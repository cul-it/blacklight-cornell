require 'rubygems'
if false
require 'spork'
#uncomment the following line to use spork with the debugger
#require 'spork/ext/ruby-debug'

Spork.prefork do
  # Loading more in this block will cause your tests to run faster. However,
  # if you change any configuration or code from libraries loaded here, you'll
  # need to restart spork for it take effect.

end

Spork.each_run do
  # This code will be run each time you run your specs.

end

# --- Instructions ---
# Sort the contents of this file into a Spork.prefork and a Spork.each_run
# block.
#
# The Spork.prefork block is run only once when the spork server is started.
# You typically want to place most of your (slow) initializer code in here, in
# particular, require'ing any 3rd-party gems that you don't normally modify
# during development.
#
# The Spork.each_run block is run each time you run your specs.  In case you
# need to load files that tend to change during development, require them here.
# With Rails, your application modules are loaded automatically, so sometimes
# this block can remain empty.
#
# Note: You can modify files loaded *from* the Spork.each_run block without
# restarting the spork server.  However, this file itself will not be reloaded,
# so if you change any of the code inside the each_run block, you still need to
# restart the server.  In general, if you have non-trivial code in this file,
# it's advisable to move it into a separate file so you can easily edit it
# without restarting spork.  (For example, with RSpec, you could move
# non-trivial code into a file spec/support/my_helper.rb, making sure that the
# spec/support/* files are require'd from inside the each_run block.)
#
# Any code that is left outside the two blocks will be run during preforking
# *and* during each_run -- that's probably not what you want.
#
# These instructions should self-destruct in 10 seconds.  If they don't, feel
# free to delete them.
end




# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'

# Make sure this require is after you require cucumber/rails/world.???
# `
require 'cucumber/rails/world'
require 'capybara/email'

# Capybara defaults to XPath selectors rather than Webrat's default of CSS3. In
# order to ease the transition to Capybara we set the default here. If you'd
# prefer to use XPath just remove this line and adjust any selectors in your
# steps to use the XPath syntax.
Capybara.default_selector = :css
# by default, uses selenium for javascript, but using poltergeist allows using phantomjs
require 'capybara/poltergeist'
options = {js_errors: false, :phantomjs => Phantomjs.path, timeout: 2.minute}
Capybara.register_driver :poltergeist do |app|
  #Capybara::Poltergeist::Driver.new(app, {debug: false})
  #Capybara::Poltergeist::Driver.new(app, :phantomjs => Phantomjs.path, timeout: 2.minute,js_errors: false)
  Capybara::Poltergeist::Driver.new(app, options)
end
Capybara.javascript_driver = :poltergeist
Capybara.server = :webrick
# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { :except => [:widgets] } may not do what you expect here
#     # as tCucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation

# DO this to load fixture before each scenario.
Before do
  ActiveRecord::FixtureSet.reset_cache
  fixtures_folder = File.join(Rails.root, 'features', 'fixtures')
  fixtures = Dir[File.join(fixtures_folder, '*.yml')].map {|f| File.basename(f, '.yml') }
  ActiveRecord::FixtureSet.create_fixtures(fixtures_folder, fixtures)
  sql = 'delete from sessions;'
  ActiveRecord::Base.connection.execute(sql)
  $wait_for_ajax_to_run = true
end
# OR do this, but not both.
#Seed the DB
#ActiveRecord::Fixtures.reset_cache
#fixtures_folder = File.join(Rails.root, 'features', 'fixtures')
#fixtures = Dir[File.join(fixtures_folder, '*.yml')].map {|f| File.basename(f, '.yml') }
#ActiveRecord::Fixtures.create_fixtures(fixtures_folder, fixtures)

Before('@omniauth_test') do
  OmniAuth.config.test_mode = true
  OmniAuth.config.mock_auth[:saml] = OmniAuth::AuthHash.new({
    provider: "saml",
    "saml_resp" => 'hello' ,
    uid: "12345678910",
    extra: {raw_info: {} } ,
    info: {
      email: ["ditester@example.com"],
      name: ["Diligent Tester"],
      netid: "jgr25",
      groups: ["staff","student"],
      primary: ["staff"],
      first_name: "Diligent",
      last_name: "Tester"
    },
    credentials: {
      token: "abcdefg12345",
      refresh_token: "12345abcdefg",
      expires_at: DateTime.now
    }
  })
end

After('@omniauth_test') do
  OmniAuth.config.test_mode = false
end

# https://github.com/teampoltergeist/poltergeist/issues/375#issuecomment-112860044
AfterStep do
  wait_for_ajax if $wait_for_ajax_to_run
end

After do
  wait_for_ajax if $wait_for_ajax_to_run
end

# https://github.com/teampoltergeist/poltergeist/issues/375#issuecomment-112860044
def wait_for_ajax
  timeout = [Capybara.default_max_wait_time, 60].max
  Timeout.timeout(timeout) do
    loop until finished_all_ajax_requests?
  end
end

def finished_all_ajax_requests?
  begin
    page.evaluate_script('(typeof jQuery !== "undefined") ? jQuery.active : 0').zero?
  rescue Capybara::NotSupportedByDriverError => e
    true
  rescue Exception => e
    puts 'Exception in finished_all_ajax_requests?'
    puts "Exception Class: #{ e.class.name }"
    puts "Exception Message: #{ e.message }"
    true
  end
end

@all_item_view
@all_item_view
