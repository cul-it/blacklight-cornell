---
http_interactions:
- request:
    method: get
    uri: http://da-prod-solr.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&mm=1&q=(((%2Btitle:%22combinatorial%22%20%2Btitle:%22algorithms%22%20)%20OR%20(title_phrase:%22combinatorial%20algorithms%22))%20AND%20((%2Bpublisher:%22algorithmics%22)%20OR%20publisher:%22algorithmics%22))%20&qt=search&rows=20&search_field=advanced&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Jan 2020 16:56:29 GMT
      Last-Modified:
      - Tue, 14 Jan 2020 20:05:10 GMT
      Etag:
      - '"Yzk2N2Y5MDAwMDAwMDAwMFNvbHI="'
      Content-Type:
      - application/json; charset=UTF-8
      Via:
      - 1.1 da-prod-solr8.library.cornell.edu
      Vary:
      - Accept-Encoding
      Content-Length:
      - '1206'
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: '{"responseHeader":{"zkConnected":true,"status":0,"QTime":10712,"params":{"f.subject_content_facet.facet.limit":"6","f.fast_geo_facet.facet.limit":"6","f.lc_alpha_facet.facet.limit":"6","f.location.facet.sort":"index","f.online.facet.limit":"3","facet.query":["acquired_dt:[NOW-14DAY
        TO NOW-7DAY ]","acquired_dt:[NOW-30DAY TO NOW-7DAY ]","acquired_dt:[NOW-1YEAR
        TO NOW-7DAY]"],"defType":"edismax","f.lc_callnum_facet.facet.sort":"count","stats":"true","f.fast_genre_facet.facet.limit":"6","wt":"json","f.format.facet.limit":"11","stats.field":"pub_date_facet","mm":"1","f.author_facet.facet.limit":"6","facet.field":["online","format","author_facet","pub_date_facet","workid_facet","language_facet","fast_topic_facet","fast_geo_facet","fast_era_facet","fast_genre_facet","subject_content_facet","lc_alpha_facet","location","hierarchy_facet","authortitle_facet","lc_callnum_facet","collection"],"qt":"search","f.lc_callnum_facet.facet.limit":"-1","sort":"score
        desc, pub_date_sort desc, title_sort asc","rows":"20","f.location.facet.limit":"101","q":"(((+title:\"combinatorial\"
        +title:\"algorithms\" ) OR (title_phrase:\"combinatorial algorithms\")) AND
        ((+publisher:\"algorithmics\") OR publisher:\"algorithmics\")) ","f.fast_era_facet.facet.limit":"6","f.fast_topic_facet.facet.limit":"6","facet":"true","f.language_facet.facet.limit":"6","search_field":"advanced"}},"response":{"numFound":1,"start":0,"maxScore":148435.9,"docs":[{"author_display":"Courant
        Computer Science Symposium (9th : 1972 : New York)","title_display":"Combinatorial
        algorithms","fulltitle_display":"Combinatorial algorithms","subtitle_display":"","pub_info_display":["New
        York : Algorithmics Press, c1973."],"pub_date_display":["c1973"],"language_display":["English."],"id":"1807908","oclc_id_display":["38625973"],"availability_json":"{\"available\":true,\"availAt\":{\"Library
        Annex\":\"QA76.6 .C85 1972\"}}","pub_date_facet":1973,"format":["Book"],"online":["At
        the Library"],"score":148435.9}]},"facet_counts":{"facet_queries":{},"facet_fields":{"online":["At
        the Library",1],"format":["Book",1],"author_facet":["Courant Computer Science
        Symposium",1,"Rustin, Randall",1],"pub_date_facet":["1973",1],"workid_facet":[],"language_facet":["English",1],"fast_topic_facet":["Algorithms",1,"Combinatorial
        analysis",1,"Electronic digital computers",1],"fast_geo_facet":[],"fast_era_facet":[],"fast_genre_facet":["Conference
        papers and proceedings",1],"subject_content_facet":["Non-Fiction (books)",1],"lc_alpha_facet":[],"location":["Library
        Annex",1],"hierarchy_facet":[],"authortitle_facet":["Courant Computer Science
        Symposium (9th : 1972 : New York) | Combinatorial algorithms",1],"lc_callnum_facet":["Q
        - Science",1,"Q - Science:QA - Mathematics",1,"Q - Science:QA - Mathematics:QA71-90
        - Instruments and machines",1,"Q - Science:QA - Mathematics:QA71-90 - Instruments
        and machines:QA75-76.95 - Calculating machines",1,"Q - Science:QA - Mathematics:QA71-90
        - Instruments and machines:QA75-76.95 - Calculating machines:QA75.5-76.95
        - Electronic computers.  Computer science",1],"collection":[]},"facet_ranges":{},"facet_intervals":{},"facet_heatmaps":{}},"stats":{"stats_fields":{"pub_date_facet":{"min":1973.0,"max":1973.0,"count":1,"missing":0,"sum":1973.0,"sumOfSquares":3892729.0,"mean":1973.0,"stddev":0.0}}}}

        '
    http_version: 
  recorded_at: Wed, 15 Jan 2020 16:56:40 GMT
- request:
    method: get
    uri: http://da-prod-solr.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&mm=1&q=(((%2Btitle:%22combinatorial%22%20%2Btitle:%22algorithms%22%20)%20OR%20(title_phrase:%22combinatorial%20algorithms%22))%20OR%20((%2Bpublisher:%22algorithmics%22)%20OR%20publisher:%22algorithmics%22))%20&qt=search&rows=20&search_field=advanced&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Jan 2020 16:56:54 GMT
      Last-Modified:
      - Wed, 15 Jan 2020 01:25:11 GMT
      Etag:
      - '"NTc1Y2Q1MDAwMDAwMDAwMFNvbHI="'
      Content-Type:
      - application/json; charset=UTF-8
      Via:
      - 1.1 da-prod-solr7.library.cornell.edu
      Vary:
      - Accept-Encoding
      Content-Length:
      - '5128'
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJyZXNwb25zZUhlYWRlciI6eyJ6a0Nvbm5lY3RlZCI6dHJ1ZSwic3RhdHVzIjowLCJRVGltZSI6MTc2NjcsInBhcmFtcyI6eyJmLnN1YmplY3RfY29udGVudF9mYWNldC5mYWNldC5saW1pdCI6IjYiLCJmLmZhc3RfZ2VvX2ZhY2V0LmZhY2V0LmxpbWl0IjoiNiIsImYubGNfYWxwaGFfZmFjZXQuZmFjZXQubGltaXQiOiI2IiwiZi5sb2NhdGlvbi5mYWNldC5zb3J0IjoiaW5kZXgiLCJmLm9ubGluZS5mYWNldC5saW1pdCI6IjMiLCJmYWNldC5xdWVyeSI6WyJhY3F1aXJlZF9kdDpbTk9XLTE0REFZIFRPIE5PVy03REFZIF0iLCJhY3F1aXJlZF9kdDpbTk9XLTMwREFZIFRPIE5PVy03REFZIF0iLCJhY3F1aXJlZF9kdDpbTk9XLTFZRUFSIFRPIE5PVy03REFZXSJdLCJkZWZUeXBlIjoiZWRpc21heCIsImYubGNfY2FsbG51bV9mYWNldC5mYWNldC5zb3J0IjoiY291bnQiLCJzdGF0cyI6InRydWUiLCJmLmZhc3RfZ2VucmVfZmFjZXQuZmFjZXQubGltaXQiOiI2Iiwid3QiOiJqc29uIiwiZi5mb3JtYXQuZmFjZXQubGltaXQiOiIxMSIsInN0YXRzLmZpZWxkIjoicHViX2RhdGVfZmFjZXQiLCJtbSI6IjEiLCJmLmF1dGhvcl9mYWNldC5mYWNldC5saW1pdCI6IjYiLCJmYWNldC5maWVsZCI6WyJvbmxpbmUiLCJmb3JtYXQiLCJhdXRob3JfZmFjZXQiLCJwdWJfZGF0ZV9mYWNldCIsIndvcmtpZF9mYWNldCIsImxhbmd1YWdlX2ZhY2V0IiwiZmFzdF90b3BpY19mYWNldCIsImZhc3RfZ2VvX2ZhY2V0IiwiZmFzdF9lcmFfZmFjZXQiLCJmYXN0X2dlbnJlX2ZhY2V0Iiwic3ViamVjdF9jb250ZW50X2ZhY2V0IiwibGNfYWxwaGFfZmFjZXQiLCJsb2NhdGlvbiIsImhpZXJhcmNoeV9mYWNldCIsImF1dGhvcnRpdGxlX2ZhY2V0IiwibGNfY2FsbG51bV9mYWNldCIsImNvbGxlY3Rpb24iXSwicXQiOiJzZWFyY2giLCJmLmxjX2NhbGxudW1fZmFjZXQuZmFjZXQubGltaXQiOiItMSIsInNvcnQiOiJzY29yZSBkZXNjLCBwdWJfZGF0ZV9zb3J0IGRlc2MsIHRpdGxlX3NvcnQgYXNjIiwicm93cyI6IjIwIiwiZi5sb2NhdGlvbi5mYWNldC5saW1pdCI6IjEwMSIsInEiOiIoKCgrdGl0bGU6XCJjb21iaW5hdG9yaWFsXCIgK3RpdGxlOlwiYWxnb3JpdGhtc1wiICkgT1IgKHRpdGxlX3BocmFzZTpcImNvbWJpbmF0b3JpYWwgYWxnb3JpdGhtc1wiKSkgT1IgKCgrcHVibGlzaGVyOlwiYWxnb3JpdGhtaWNzXCIpIE9SIHB1Ymxpc2hlcjpcImFsZ29yaXRobWljc1wiKSkgIiwiZi5mYXN0X2VyYV9mYWNldC5mYWNldC5saW1pdCI6IjYiLCJmLmZhc3RfdG9waWNfZmFjZXQuZmFjZXQubGltaXQiOiI2IiwiZmFjZXQiOiJ0cnVlIiwiZi5sYW5ndWFnZV9mYWNldC5mYWNldC5saW1pdCI6IjYiLCJzZWFyY2hfZmllbGQiOiJhZHZhbmNlZCJ9fSwicmVzcG9uc2UiOnsibnVtRm91bmQiOjE0Mywic3RhcnQiOjAsIm1heFNjb3JlIjoxNDg0MzUuOSwiZG9jcyI6W3siYXV0aG9yX2Rpc3BsYXkiOiJDb3VyYW50IENvbXB1dGVyIFNjaWVuY2UgU3ltcG9zaXVtICg5dGggOiAxOTcyIDogTmV3IFlvcmspIiwidGl0bGVfZGlzcGxheSI6IkNvbWJpbmF0b3JpYWwgYWxnb3JpdGhtcyIsImZ1bGx0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBhbGdvcml0aG1zIiwic3VidGl0bGVfZGlzcGxheSI6IiIsInB1Yl9pbmZvX2Rpc3BsYXkiOlsiTmV3IFlvcmsgOiBBbGdvcml0aG1pY3MgUHJlc3MsIGMxOTczLiJdLCJwdWJfZGF0ZV9kaXNwbGF5IjpbImMxOTczIl0sImxhbmd1YWdlX2Rpc3BsYXkiOlsiRW5nbGlzaC4iXSwiaWQiOiIxODA3OTA4Iiwib2NsY19pZF9kaXNwbGF5IjpbIjM4NjI1OTczIl0sImF2YWlsYWJpbGl0eV9qc29uIjoie1wiYXZhaWxhYmxlXCI6dHJ1ZSxcImF2YWlsQXRcIjp7XCJMaWJyYXJ5IEFubmV4XCI6XCJRQTc2LjYgLkM4NSAxOTcyXCJ9fSIsInB1Yl9kYXRlX2ZhY2V0IjoxOTczLCJmb3JtYXQiOlsiQm9vayJdLCJvbmxpbmUiOlsiQXQgdGhlIExpYnJhcnkiXSwic2NvcmUiOjE0ODQzNS45fSx7ImF1dGhvcl9kaXNwbGF5IjoiSHUsIFQuIEMuIChUZSBDaGlhbmcpLCAxOTMwLSIsInRpdGxlX2Rpc3BsYXkiOiJDb21iaW5hdG9yaWFsIGFsZ29yaXRobXMiLCJmdWxsdGl0bGVfZGlzcGxheSI6IkNvbWJpbmF0b3JpYWwgYWxnb3JpdGhtcyIsInN1YnRpdGxlX2Rpc3BsYXkiOiIiLCJwdWJfaW5mb19kaXNwbGF5IjpbIlJlYWRpbmcsIE1BIDogQWRkaXNvbi1XZXNsZXkgUHViLiBDby4sIDE5ODIuIl0sInB1Yl9kYXRlX2Rpc3BsYXkiOlsiMTk4MiJdLCJsYW5ndWFnZV9kaXNwbGF5IjpbIkVuZ2xpc2guIl0sImlkIjoiODI2MDIzIiwib2NsY19pZF9kaXNwbGF5IjpbIjc4MzcxNzEiXSwiYXZhaWxhYmlsaXR5X2pzb24iOiJ7XCJhdmFpbGFibGVcIjp0cnVlLFwiYXZhaWxBdFwiOntcIk1hdGhlbWF0aWNzIExpYnJhcnkgKE1hbG90dCBIYWxsKVwiOlwiUUExNjQgLkg4N1wifX0iLCJwdWJfZGF0ZV9mYWNldCI6MTk4MiwiZm9ybWF0IjpbIkJvb2siXSwib25saW5lIjpbIkF0IHRoZSBMaWJyYXJ5Il0sInNjb3JlIjoxNDI5NTguNDh9LHsidGl0bGVfZGlzcGxheSI6IkNvbWJpbmF0b3JpYWwgQWxnb3JpdGhtcyIsImZ1bGx0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBBbGdvcml0aG1zIDogMjh0aCBJbnRlcm5hdGlvbmFsIFdvcmtzaG9wLCBJV09DQSAyMDE3LCBOZXdjYXN0bGUsIE5TVywgQXVzdHJhbGlhLCBKdWx5IDE3LTIxLCAyMDE3LCBSZXZpc2VkIFNlbGVjdGVkIFBhcGVycyIsInN1YnRpdGxlX2Rpc3BsYXkiOiIyOHRoIEludGVybmF0aW9uYWwgV29ya3Nob3AsIElXT0NBIDIwMTcsIE5ld2Nhc3RsZSwgTlNXLCBBdXN0cmFsaWEsIEp1bHkgMTctMjEsIDIwMTcsIFJldmlzZWQgU2VsZWN0ZWQgUGFwZXJzIiwicHViX2luZm9fZGlzcGxheSI6WyJDaGFtIDogU3ByaW5nZXIgSW50ZXJuYXRpb25hbCBQdWJsaXNoaW5nIDogSW1wcmludDogU3ByaW5nZXIsIDIwMTguIl0sInB1Yl9kYXRlX2Rpc3BsYXkiOlsiMjAxOCJdLCJsYW5ndWFnZV9kaXNwbGF5IjpbIkVuZ2xpc2guIl0sImlkIjoiMTAzOTc2NzYiLCJ1cmxfYWNjZXNzX2Rpc3BsYXkiOlsiaHR0cDovL3Byb3h5LmxpYnJhcnkuY29ybmVsbC5lZHUvbG9naW4/dXJsPWh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vb3BlbnVybD9nZW5yZT1ib29rJmlzYm49OTc4LTMtMzE5LTc4ODI1LTh8RnVsbCB0ZXh0IGF2YWlsYWJsZSBmcm9tIFNwcmluZ2VyTGluayBlYm9va3MgLSBDb21wdXRlciBTY2llbmNlIChDb250ZW1wb3JhcnkpIENvbm5lY3QgdG8gdGV4dC4iLCJodHRwOi8vcHJveHkubGlicmFyeS5jb3JuZWxsLmVkdS9sb2dpbj91cmw9aHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS8xMC4xMDA3Lzk3OC0zLTMxOS03ODgyNS04fEZ1bGwgdGV4dCBhdmFpbGFibGUgZnJvbSBTcHJpbmdlckxJTksgZWJvb2tzIC0gU1RNICgyMDE4KSBDb25uZWN0IHRvIHRleHQuIl0sInVybF9hY2Nlc3NfanNvbiI6WyJ7XCJwcm92aWRlcmNvZGVcIjpcIlBSVkFWWFwiLFwiZGJjb2RlXCI6XCIwRDZcIixcImRlc2NyaXB0aW9uXCI6XCJGdWxsIHRleHQgYXZhaWxhYmxlIGZyb20gU3ByaW5nZXJMaW5rIGVib29rcyAtIENvbXB1dGVyIFNjaWVuY2UgKENvbnRlbXBvcmFyeSkgQ29ubmVjdCB0byB0ZXh0LlwiLFwic3NpZFwiOlwic3NqMDAwMTk5OTcyNlwiLFwidXJsXCI6XCJodHRwOi8vcHJveHkubGlicmFyeS5jb3JuZWxsLmVkdS9sb2dpbj91cmw9aHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9vcGVudXJsP2dlbnJlPWJvb2smaXNibj05NzgtMy0zMTktNzg4MjUtOFwifSIsIntcInByb3ZpZGVyY29kZVwiOlwiUFJWQVZYXCIsXCJkYmNvZGVcIjpcIkZPWU1PXCIsXCJkZXNjcmlwdGlvblwiOlwiRnVsbCB0ZXh0IGF2YWlsYWJsZSBmcm9tIFNwcmluZ2VyTElOSyBlYm9va3MgLSBTVE0gKDIwMTgpIENvbm5lY3QgdG8gdGV4dC5cIixcInNzaWRcIjpcInNzajAwMDE5OTk3MjZcIixcInVybFwiOlwiaHR0cDovL3Byb3h5LmxpYnJhcnkuY29ybmVsbC5lZHUvbG9naW4/dXJsPWh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vMTAuMTAwNy85NzgtMy0zMTktNzg4MjUtOFwifSJdLCJhY3F1aXJlZF9kdCI6IjIwMTgtMDYtMThUMDA6MDA6MDBaIiwib2NsY19pZF9kaXNwbGF5IjpbIjEwMzQ1NTU1NDciXSwiYXZhaWxhYmlsaXR5X2pzb24iOiJ7XCJvbmxpbmVcIjp0cnVlfSIsInB1Yl9kYXRlX2ZhY2V0IjoyMDE4LCJmb3JtYXQiOlsiQm9vayJdLCJvbmxpbmUiOlsiT25saW5lIl0sInNjb3JlIjo4MzA0MC4yOX0seyJ0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBBbGdvcml0aG1zIiwiZnVsbHRpdGxlX2Rpc3BsYXkiOiJDb21iaW5hdG9yaWFsIEFsZ29yaXRobXMgOiAzMHRoIEludGVybmF0aW9uYWwgV29ya3Nob3AsIElXT0NBIDIwMTksIFBpc2EsIEl0YWx5LCBKdWx5IDIzLTI1LCAyMDE5LCBQcm9jZWVkaW5ncyIsInN1YnRpdGxlX2Rpc3BsYXkiOiIzMHRoIEludGVybmF0aW9uYWwgV29ya3Nob3AsIElXT0NBIDIwMTksIFBpc2EsIEl0YWx5LCBKdWx5IDIzLTI1LCAyMDE5LCBQcm9jZWVkaW5ncyIsInB1Yl9pbmZvX2Rpc3BsYXkiOlsiQ2hhbSA6IFNwcmluZ2VyIEludGVybmF0aW9uYWwgUHVibGlzaGluZyA6IEltcHJpbnQ6IFNwcmluZ2VyLCAyMDE5LiJdLCJwdWJfZGF0ZV9kaXNwbGF5IjpbIjIwMTkiXSwibGFuZ3VhZ2VfZGlzcGxheSI6WyJFbmdsaXNoLiJdLCJpZCI6IjExMDUzOTk4IiwiZWRpdGlvbl9kaXNwbGF5IjpbIjFzdCBlZC4gMjAxOS4iXSwidXJsX2FjY2Vzc19qc29uIjpbIntcInByb3ZpZGVyY29kZVwiOlwiUFJWQVZYXCIsXCJkYmNvZGVcIjpcIkZDU1hRXCIsXCJkZXNjcmlwdGlvblwiOlwiRnVsbCB0ZXh0IGF2YWlsYWJsZSBmcm9tIFNwcmluZ2VyTElOSyBlYm9va3MgLSBTVE0gKDIwMTkpIENvbm5lY3QgdG8gdGV4dC5cIixcInNzaWRcIjpcInNzajAwMDIyMDg5MTdcIixcInVybFwiOlwiaHR0cDovL3Byb3h5LmxpYnJhcnkuY29ybmVsbC5lZHUvbG9naW4/dXJsPWh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vMTAuMTAwNy85NzgtMy0wMzAtMjUwMDUtOFwifSJdLCJhY3F1aXJlZF9kdCI6IjIwMTktMTAtMTdUMDA6MDA6MDBaIiwiYXZhaWxhYmlsaXR5X2pzb24iOiJ7XCJvbmxpbmVcIjp0cnVlfSIsInB1Yl9kYXRlX2ZhY2V0IjoyMDE5LCJmb3JtYXQiOlsiQm9vayJdLCJvbmxpbmUiOlsiT25saW5lIl0sInNjb3JlIjo4MjU2OC45NH0seyJ0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBBbGdvcml0aG1zIiwiZnVsbHRpdGxlX2Rpc3BsYXkiOiJDb21iaW5hdG9yaWFsIEFsZ29yaXRobXMgOiAyOXRoIEludGVybmF0aW9uYWwgV29ya3Nob3AsIElXT0NBIDIwMTgsIFNpbmdhcG9yZSwgSnVseSAxNj8xOSwgMjAxOCwgUHJvY2VlZGluZ3MiLCJzdWJ0aXRsZV9kaXNwbGF5IjoiMjl0aCBJbnRlcm5hdGlvbmFsIFdvcmtzaG9wLCBJV09DQSAyMDE4LCBTaW5nYXBvcmUsIEp1bHkgMTY/MTksIDIwMTgsIFByb2NlZWRpbmdzIiwicHViX2luZm9fZGlzcGxheSI6WyJDaGFtIDogU3ByaW5nZXIgSW50ZXJuYXRpb25hbCBQdWJsaXNoaW5nIDogSW1wcmludDogU3ByaW5nZXIsIDIwMTguIl0sInB1Yl9kYXRlX2Rpc3BsYXkiOlsiMjAxOCJdLCJsYW5ndWFnZV9kaXNwbGF5IjpbIkVuZ2xpc2guIl0sImlkIjoiMTA3NjUzNzIiLCJ1cmxfYWNjZXNzX2Rpc3BsYXkiOlsiaHR0cDovL3Byb3h5LmxpYnJhcnkuY29ybmVsbC5lZHUvbG9naW4/dXJsPWh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vb3BlbnVybD9nZW5yZT1ib29rJmlzYm49OTc4LTMtMzE5LTk0NjY3LTJ8RnVsbCB0ZXh0IGF2YWlsYWJsZSBmcm9tIFNwcmluZ2VyTGluayBlYm9va3MgLSBDb21wdXRlciBTY2llbmNlIChDb250ZW1wb3JhcnkpIENvbm5lY3QgdG8gdGV4dC4iLCJodHRwOi8vcHJveHkubGlicmFyeS5jb3JuZWxsLmVkdS9sb2dpbj91cmw9aHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS8xMC4xMDA3Lzk3OC0zLTMxOS05NDY2Ny0yfEZ1bGwgdGV4dCBhdmFpbGFibGUgZnJvbSBTcHJpbmdlckxJTksgZWJvb2tzIC0gU1RNICgyMDE4KSBDb25uZWN0IHRvIHRleHQuIl0sInVybF9hY2Nlc3NfanNvbiI6WyJ7XCJwcm92aWRlcmNvZGVcIjpcIlBSVkFWWFwiLFwiZGJjb2RlXCI6XCIwRDZcIixcImRlc2NyaXB0aW9uXCI6XCJGdWxsIHRleHQgYXZhaWxhYmxlIGZyb20gU3ByaW5nZXJMaW5rIGVib29rcyAtIENvbXB1dGVyIFNjaWVuY2UgKENvbnRlbXBvcmFyeSkgQ29ubmVjdCB0byB0ZXh0LlwiLFwic3NpZFwiOlwic3NqMDAwMjAzOTA3M1wiLFwidXJsXCI6XCJodHRwOi8vcHJveHkubGlicmFyeS5jb3JuZWxsLmVkdS9sb2dpbj91cmw9aHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9vcGVudXJsP2dlbnJlPWJvb2smaXNibj05NzgtMy0zMTktOTQ2NjctMlwifSIsIntcInByb3ZpZGVyY29kZVwiOlwiUFJWQVZYXCIsXCJkYmNvZGVcIjpcIkZPWU1PXCIsXCJkZXNjcmlwdGlvblwiOlwiRnVsbCB0ZXh0IGF2YWlsYWJsZSBmcm9tIFNwcmluZ2VyTElOSyBlYm9va3MgLSBTVE0gKDIwMTgpIENvbm5lY3QgdG8gdGV4dC5cIixcInNzaWRcIjpcInNzajAwMDIwMzkwNzNcIixcInVybFwiOlwiaHR0cDovL3Byb3h5LmxpYnJhcnkuY29ybmVsbC5lZHUvbG9naW4/dXJsPWh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vMTAuMTAwNy85NzgtMy0zMTktOTQ2NjctMlwifSJdLCJhY3F1aXJlZF9kdCI6IjIwMTktMDQtMTFUMDA6MDA6MDBaIiwib2NsY19pZF9kaXNwbGF5IjpbIjEwNDQ3MzUxMjEiXSwiYXZhaWxhYmlsaXR5X2pzb24iOiJ7XCJvbmxpbmVcIjp0cnVlfSIsInB1Yl9kYXRlX2ZhY2V0IjoyMDE4LCJmb3JtYXQiOlsiQm9vayJdLCJvbmxpbmUiOlsiT25saW5lIl0sInNjb3JlIjo3Nzk3NS4wOX0seyJ0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBBbGdvcml0aG1zIiwiZnVsbHRpdGxlX2Rpc3BsYXkiOiJDb21iaW5hdG9yaWFsIEFsZ29yaXRobXMgOiAyN3RoIEludGVybmF0aW9uYWwgV29ya3Nob3AsIElXT0NBIDIwMTYsIEhlbHNpbmtpLCBGaW5sYW5kLCBBdWd1c3QgMTctMTksIDIwMTYsIFByb2NlZWRpbmdzIiwic3VidGl0bGVfZGlzcGxheSI6IjI3dGggSW50ZXJuYXRpb25hbCBXb3Jrc2hvcCwgSVdPQ0EgMjAxNiwgSGVsc2lua2ksIEZpbmxhbmQsIEF1Z3VzdCAxNy0xOSwgMjAxNiwgUHJvY2VlZGluZ3MiLCJwdWJfaW5mb19kaXNwbGF5IjpbIkNoYW0gOiBTcHJpbmdlciBJbnRlcm5hdGlvbmFsIFB1Ymxpc2hpbmcgOiBJbXByaW50OiBTcHJpbmdlciwgMjAxNi4iXSwicHViX2RhdGVfZGlzcGxheSI6WyIyMDE2Il0sImxhbmd1YWdlX2Rpc3BsYXkiOlsiRW5nbGlzaC4iXSwiaWQiOiI5NzA0MzU5IiwidXJsX2FjY2Vzc19qc29uIjpbIntcInByb3ZpZGVyY29kZVwiOlwiUFJWQVZYXCIsXCJkYmNvZGVcIjpcIjBENlwiLFwiZGVzY3JpcHRpb25cIjpcIkZ1bGwgdGV4dCBhdmFpbGFibGUgZnJvbSBTcHJpbmdlckxpbmsgZWJvb2tzIC0gQ29tcHV0ZXIgU2NpZW5jZSAoQ29udGVtcG9yYXJ5KSBDb25uZWN0IHRvIHRleHQuXCIsXCJzc2lkXCI6XCJzc2owMDAxNzIwMzM4XCIsXCJ1cmxcIjpcImh0dHA6Ly9wcm94eS5saWJyYXJ5LmNvcm5lbGwuZWR1L2xvZ2luP3VybD1odHRwczovL2xpbmsuc3ByaW5nZXIuY29tL29wZW51cmw/Z2VucmU9Ym9vayZpc2JuPTk3OC0zLTMxOS00NDU0My00XCJ9Il0sIm9jbGNfaWRfZGlzcGxheSI6WyI5NTcxMjMzNTQiXSwiYXZhaWxhYmlsaXR5X2pzb24iOiJ7XCJvbmxpbmVcIjp0cnVlfSIsInB1Yl9kYXRlX2ZhY2V0IjoyMDE2LCJmb3JtYXQiOlsiQm9vayJdLCJvbmxpbmUiOlsiT25saW5lIl0sInNjb3JlIjo3NjQ2MC43NH0seyJ0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBBbGdvcml0aG1zIiwiZnVsbHRpdGxlX2Rpc3BsYXkiOiJDb21iaW5hdG9yaWFsIEFsZ29yaXRobXMgOiAyNnRoIEludGVybmF0aW9uYWwgV29ya3Nob3AsIElXT0NBIDIwMTUsIFZlcm9uYSwgSXRhbHksIE9jdG9iZXIgNS03LCAyMDE1LCBSZXZpc2VkIFNlbGVjdGVkIFBhcGVycyIsInN1YnRpdGxlX2Rpc3BsYXkiOiIyNnRoIEludGVybmF0aW9uYWwgV29ya3Nob3AsIElXT0NBIDIwMTUsIFZlcm9uYSwgSXRhbHksIE9jdG9iZXIgNS03LCAyMDE1LCBSZXZpc2VkIFNlbGVjdGVkIFBhcGVycyIsInB1Yl9pbmZvX2Rpc3BsYXkiOlsiQ2hhbSA6IFNwcmluZ2VyIEludGVybmF0aW9uYWwgUHVibGlzaGluZyA6IEltcHJpbnQ6IFNwcmluZ2VyLCAyMDE2LiJdLCJwdWJfZGF0ZV9kaXNwbGF5IjpbIjIwMTYiXSwibGFuZ3VhZ2VfZGlzcGxheSI6WyJFbmdsaXNoLiJdLCJpZCI6Ijk3MDQzNTgiLCJlZGl0aW9uX2Rpc3BsYXkiOlsiMXN0IGVkLiAyMDE2LiJdLCJ1cmxfYWNjZXNzX2Rpc3BsYXkiOlsiaHR0cDovL3Byb3h5LmxpYnJhcnkuY29ybmVsbC5lZHUvbG9naW4/dXJsPWh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vb3BlbnVybD9nZW5yZT1ib29rJmlzYm49OTc4LTMtMzE5LTI5NTE2LTl8RnVsbCB0ZXh0IGF2YWlsYWJsZSBmcm9tIFNwcmluZ2VyTGluayBlYm9va3MgLSBDb21wdXRlciBTY2llbmNlIChDb250ZW1wb3JhcnkpIENvbm5lY3QgdG8gdGV4dC4iXSwidXJsX2FjY2Vzc19qc29uIjpbIntcInByb3ZpZGVyY29kZVwiOlwiUFJWQVZYXCIsXCJkYmNvZGVcIjpcIjBENlwiLFwiZGVzY3JpcHRpb25cIjpcIkZ1bGwgdGV4dCBhdmFpbGFibGUgZnJvbSBTcHJpbmdlckxpbmsgZWJvb2tzIC0gQ29tcHV0ZXIgU2NpZW5jZSAoQ29udGVtcG9yYXJ5KSBDb25uZWN0IHRvIHRleHQuXCIsXCJzc2lkXCI6XCJzc2owMDAxNjU3NDkyXCIsXCJ1cmxcIjpcImh0dHA6Ly9wcm94eS5saWJyYXJ5LmNvcm5lbGwuZWR1L2xvZ2luP3VybD1odHRwczovL2xpbmsuc3ByaW5nZXIuY29tL29wZW51cmw/Z2VucmU9Ym9vayZpc2JuPTk3OC0zLTMxOS0yOTUxNi05XCJ9Il0sIm9jbGNfaWRfZGlzcGxheSI6WyI5NDQzMDgyNjAiXSwiYXZhaWxhYmlsaXR5X2pzb24iOiJ7XCJvbmxpbmVcIjp0cnVlfSIsInB1Yl9kYXRlX2ZhY2V0IjoyMDE2LCJmb3JtYXQiOlsiQm9vayJdLCJvbmxpbmUiOlsiT25saW5lIl0sInNjb3JlIjo3NTU1MS41NH0seyJ0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBBbGdvcml0aG1zIiwiZnVsbHRpdGxlX2Rpc3BsYXkiOiJDb21iaW5hdG9yaWFsIEFsZ29yaXRobXMgOiAyNXRoIEludGVybmF0aW9uYWwgV29ya3Nob3AsIElXT0NBIDIwMTQsIER1bHV0aCwgTU4sIFVTQSwgT2N0b2JlciAxNS0xNywgMjAxNCwgUmV2aXNlZCBTZWxlY3RlZCBQYXBlcnMiLCJzdWJ0aXRsZV9kaXNwbGF5IjoiMjV0aCBJbnRlcm5hdGlvbmFsIFdvcmtzaG9wLCBJV09DQSAyMDE0LCBEdWx1dGgsIE1OLCBVU0EsIE9jdG9iZXIgMTUtMTcsIDIwMTQsIFJldmlzZWQgU2VsZWN0ZWQgUGFwZXJzIiwicHViX2luZm9fZGlzcGxheSI6WyJDaGFtIDogU3ByaW5nZXIgSW50ZXJuYXRpb25hbCBQdWJsaXNoaW5nIDogSW1wcmludDogU3ByaW5nZXIsIDIwMTUuIl0sInB1Yl9kYXRlX2Rpc3BsYXkiOlsiMjAxNSJdLCJsYW5ndWFnZV9kaXNwbGF5IjpbIkVuZ2xpc2guIl0sImlkIjoiOTcwNDM1NyIsInVybF9hY2Nlc3NfZGlzcGxheSI6WyJodHRwOi8vcHJveHkubGlicmFyeS5jb3JuZWxsLmVkdS9sb2dpbj91cmw9aHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9vcGVudXJsP2dlbnJlPWJvb2smaXNibj05NzgtMy0zMTktMTkzMTUtMXxGdWxsIHRleHQgYXZhaWxhYmxlIGZyb20gU3ByaW5nZXJMaW5rIGVib29rcyAtIENvbXB1dGVyIFNjaWVuY2UgKENvbnRlbXBvcmFyeSkgQ29ubmVjdCB0byB0ZXh0LiJdLCJ1cmxfYWNjZXNzX2pzb24iOlsie1wicHJvdmlkZXJjb2RlXCI6XCJQUlZBVlhcIixcImRiY29kZVwiOlwiMEQ2XCIsXCJkZXNjcmlwdGlvblwiOlwiRnVsbCB0ZXh0IGF2YWlsYWJsZSBmcm9tIFNwcmluZ2VyTGluayBlYm9va3MgLSBDb21wdXRlciBTY2llbmNlIChDb250ZW1wb3JhcnkpIENvbm5lY3QgdG8gdGV4dC5cIixcInNzaWRcIjpcInNzajAwMDE1NDcwMjFcIixcInVybFwiOlwiaHR0cDovL3Byb3h5LmxpYnJhcnkuY29ybmVsbC5lZHUvbG9naW4/dXJsPWh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vb3BlbnVybD9nZW5yZT1ib29rJmlzYm49OTc4LTMtMzE5LTE5MzE1LTFcIn0iXSwib2NsY19pZF9kaXNwbGF5IjpbIjkxMDkzNzAwMiJdLCJhdmFpbGFiaWxpdHlfanNvbiI6IntcIm9ubGluZVwiOnRydWV9IiwicHViX2RhdGVfZmFjZXQiOjIwMTUsImZvcm1hdCI6WyJCb29rIl0sIm9ubGluZSI6WyJPbmxpbmUiXSwic2NvcmUiOjc0OTU5Ljk4fSx7ImF1dGhvcl9kaXNwbGF5IjoiTGVjcm9xLCBUaGllcnJ5LiwgZWRpdG9yIiwidGl0bGVfZGlzcGxheSI6IkNvbWJpbmF0b3JpYWwgQWxnb3JpdGhtcyIsImZ1bGx0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBBbGdvcml0aG1zIDogMjR0aCBJbnRlcm5hdGlvbmFsIFdvcmtzaG9wLCBJV09DQSAyMDEzLCBSb3VlbiwgRnJhbmNlLCBKdWx5IDEwLTEyLCAyMDEzLCBSZXZpc2VkIFNlbGVjdGVkIFBhcGVycyIsInN1YnRpdGxlX2Rpc3BsYXkiOiIyNHRoIEludGVybmF0aW9uYWwgV29ya3Nob3AsIElXT0NBIDIwMTMsIFJvdWVuLCBGcmFuY2UsIEp1bHkgMTAtMTIsIDIwMTMsIFJldmlzZWQgU2VsZWN0ZWQgUGFwZXJzIiwicHViX2luZm9fZGlzcGxheSI6WyJCZXJsaW4sIEhlaWRlbGJlcmcgOiBTcHJpbmdlciBCZXJsaW4gSGVpZGVsYmVyZyA6IEltcHJpbnQ6IFNwcmluZ2VyLCAyMDEzLiJdLCJwdWJfZGF0ZV9kaXNwbGF5IjpbIjIwMTMiXSwibGFuZ3VhZ2VfZGlzcGxheSI6WyJFbmdsaXNoLiJdLCJpZCI6Ijg3MDQxNTEiLCJ1cmxfYWNjZXNzX2Rpc3BsYXkiOlsiaHR0cDovL3Byb3h5LmxpYnJhcnkuY29ybmVsbC5lZHUvbG9naW4/dXJsPWh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vb3BlbnVybD9nZW5yZT1ib29rJmlzYm49OTc4LTMtNjQyLTQ1Mjc4LTl8RnVsbCB0ZXh0IGF2YWlsYWJsZSBmcm9tIFNwcmluZ2VyTGluayBlYm9va3MgLSBDb21wdXRlciBTY2llbmNlIChDb250ZW1wb3JhcnkpIENvbm5lY3QgdG8gdGV4dC4iLCJodHRwOi8vcHJveHkubGlicmFyeS5jb3JuZWxsLmVkdS9sb2dpbj91cmw9aHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9vcGVudXJsP2dlbnJlPWJvb2smaXNibj05NzgtMy02NDItNDUyNzctMnxGdWxsIHRleHQgYXZhaWxhYmxlIGZyb20gU3ByaW5nZXJMSU5LIExlY3R1cmUgTm90ZXMgaW4gQ29tcHV0ZXIgU2NpZW5jZSBDb250ZW1wb3JhcnkgKDE5OTctcHJlc2VudCkgQ29ubmVjdCB0byB0ZXh0LiJdLCJ1cmxfYWNjZXNzX2pzb24iOlsie1wicHJvdmlkZXJjb2RlXCI6XCJQUlZBVlhcIixcImRiY29kZVwiOlwiMEQ2XCIsXCJkZXNjcmlwdGlvblwiOlwiRnVsbCB0ZXh0IGF2YWlsYWJsZSBmcm9tIFNwcmluZ2VyTGluayBlYm9va3MgLSBDb21wdXRlciBTY2llbmNlIChDb250ZW1wb3JhcnkpIENvbm5lY3QgdG8gdGV4dC5cIixcInNzaWRcIjpcInNzajAwMDEwNjcyODNcIixcInVybFwiOlwiaHR0cDovL3Byb3h5LmxpYnJhcnkuY29ybmVsbC5lZHUvbG9naW4/dXJsPWh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vb3BlbnVybD9nZW5yZT1ib29rJmlzYm49OTc4LTMtNjQyLTQ1Mjc4LTlcIn0iLCJ7XCJwcm92aWRlcmNvZGVcIjpcIlBSVkFWWFwiLFwiZGJjb2RlXCI6XCIySFZcIixcImRlc2NyaXB0aW9uXCI6XCJGdWxsIHRleHQgYXZhaWxhYmxlIGZyb20gU3ByaW5nZXJMSU5LIExlY3R1cmUgTm90ZXMgaW4gQ29tcHV0ZXIgU2NpZW5jZSBDb250ZW1wb3JhcnkgKDE5OTctcHJlc2VudCkgQ29ubmVjdCB0byB0ZXh0LlwiLFwic3NpZFwiOlwic3NqMDAwMTA2NzI4M1wiLFwidXJsXCI6XCJodHRwOi8vcHJveHkubGlicmFyeS5jb3JuZWxsLmVkdS9sb2dpbj91cmw9aHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9vcGVudXJsP2dlbnJlPWJvb2smaXNibj05NzgtMy02NDItNDUyNzctMlwifSJdLCJvY2xjX2lkX2Rpc3BsYXkiOlsiODY4MDQwODI2Il0sImF2YWlsYWJpbGl0eV9qc29uIjoie1wib25saW5lXCI6dHJ1ZX0iLCJwdWJfZGF0ZV9mYWNldCI6MjAxMywiZm9ybWF0IjpbIkJvb2siXSwib25saW5lIjpbIk9ubGluZSJdLCJzY29yZSI6NzM5MTAuMDd9LHsiYXV0aG9yX2Rpc3BsYXkiOiJJbnRlcm5hdGlvbmFsIFdvcmtzaG9wIG9uIENvbWJpbmF0b3JpYWwgQWxnb3JpdGhtcyAoMjNyZCA6IDIwMTIgOiBUYW1pbCBOYWR1LCBJbmRpYSkiLCJ0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBhbGdvcml0aG1zIiwiZnVsbHRpdGxlX2Rpc3BsYXkiOiJDb21iaW5hdG9yaWFsIGFsZ29yaXRobXMgOiAyM3JkIGludGVybmF0aW9uYWwgd29ya3Nob3AsIElXT0NBIDIwMTIsIFRhbWlsIE5hZHUsIEluZGlhLCBKdWx5IDE5LTIxLCAyMDEyIDogcmV2aXNlZCBzZWxlY3RlZCBwYXBlcnMiLCJzdWJ0aXRsZV9kaXNwbGF5IjoiMjNyZCBpbnRlcm5hdGlvbmFsIHdvcmtzaG9wLCBJV09DQSAyMDEyLCBUYW1pbCBOYWR1LCBJbmRpYSwgSnVseSAxOS0yMSwgMjAxMiA6IHJldmlzZWQgc2VsZWN0ZWQgcGFwZXJzIiwicHViX2luZm9fZGlzcGxheSI6WyJCZXJsaW4gOyBOZXcgWW9yayA6IFNwcmluZ2VyLCBjMjAxMi4iXSwicHViX2RhdGVfZGlzcGxheSI6WyJjMjAxMiJdLCJsYW5ndWFnZV9kaXNwbGF5IjpbIkVuZ2xpc2guIl0sImlkIjoiODcwNDE1MCIsInVybF9hY2Nlc3NfanNvbiI6WyJ7XCJwcm92aWRlcmNvZGVcIjpcIlBSVkFWWFwiLFwiZGJjb2RlXCI6XCIwRDZcIixcImRlc2NyaXB0aW9uXCI6XCJGdWxsIHRleHQgYXZhaWxhYmxlIGZyb20gU3ByaW5nZXJMaW5rIGVib29rcyAtIENvbXB1dGVyIFNjaWVuY2UgKENvbnRlbXBvcmFyeSkgQ29ubmVjdCB0byB0ZXh0LlwiLFwic3NpZFwiOlwic3NqMDAwMDg3MDgzOVwiLFwidXJsXCI6XCJodHRwOi8vcHJveHkubGlicmFyeS5jb3JuZWxsLmVkdS9sb2dpbj91cmw9aHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9vcGVudXJsP2dlbnJlPWJvb2smaXNibj05NzgtMy02NDItMzU5MjYtMlwifSIsIntcInByb3ZpZGVyY29kZVwiOlwiUFJWQVZYXCIsXCJkYmNvZGVcIjpcIjJIVlwiLFwiZGVzY3JpcHRpb25cIjpcIkZ1bGwgdGV4dCBhdmFpbGFibGUgZnJvbSBTcHJpbmdlckxJTksgTGVjdHVyZSBOb3RlcyBpbiBDb21wdXRlciBTY2llbmNlIENvbnRlbXBvcmFyeSAoMTk5Ny1wcmVzZW50KSBDb25uZWN0IHRvIHRleHQuXCIsXCJzc2lkXCI6XCJzc2owMDAwODcwODM5XCIsXCJ1cmxcIjpcImh0dHA6Ly9wcm94eS5saWJyYXJ5LmNvcm5lbGwuZWR1L2xvZ2luP3VybD1odHRwczovL2xpbmsuc3ByaW5nZXIuY29tL29wZW51cmw/Z2VucmU9Ym9vayZpc2JuPTk3OC0zLTY0Mi0zNTkyNS01XCJ9Il0sIm9jbGNfaWRfZGlzcGxheSI6WyI4Mjk2NTM0NTAiXSwiYXZhaWxhYmlsaXR5X2pzb24iOiJ7XCJvbmxpbmVcIjp0cnVlfSIsInB1Yl9kYXRlX2ZhY2V0IjoyMDEyLCJmb3JtYXQiOlsiQm9vayJdLCJvbmxpbmUiOlsiT25saW5lIl0sInNjb3JlIjo3MTYxMi4wMn0seyJhdXRob3JfZGlzcGxheSI6IklsaW9wb3Vsb3MsIENvc3RhcyBTLiwgZWRpdG9yIiwidGl0bGVfZGlzcGxheSI6IkNvbWJpbmF0b3JpYWwgQWxnb3JpdGhtcyIsImZ1bGx0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBBbGdvcml0aG1zIDogMjFzdCBJbnRlcm5hdGlvbmFsIFdvcmtzaG9wLCBJV09DQSAyMDEwLCBMb25kb24sIFVLLCBKdWx5IDI2LTI4LCAyMDEwLCBSZXZpc2VkIFNlbGVjdGVkIFBhcGVycyIsInN1YnRpdGxlX2Rpc3BsYXkiOiIyMXN0IEludGVybmF0aW9uYWwgV29ya3Nob3AsIElXT0NBIDIwMTAsIExvbmRvbiwgVUssIEp1bHkgMjYtMjgsIDIwMTAsIFJldmlzZWQgU2VsZWN0ZWQgUGFwZXJzIiwicHViX2luZm9fZGlzcGxheSI6WyJCZXJsaW4sIEhlaWRlbGJlcmcgOiBTcHJpbmdlciBCZXJsaW4gSGVpZGVsYmVyZywgMjAxMS4iXSwicHViX2RhdGVfZGlzcGxheSI6WyIyMDExIl0sImxhbmd1YWdlX2Rpc3BsYXkiOlsiRW5nbGlzaC4iXSwiaWQiOiI4NzA0MTQ4IiwidXJsX2FjY2Vzc19qc29uIjpbIntcInByb3ZpZGVyY29kZVwiOlwiUFJWQVZYXCIsXCJkYmNvZGVcIjpcIjBENlwiLFwiZGVzY3JpcHRpb25cIjpcIkZ1bGwgdGV4dCBhdmFpbGFibGUgZnJvbSBTcHJpbmdlckxpbmsgZWJvb2tzIC0gQ29tcHV0ZXIgU2NpZW5jZSAoQ29udGVtcG9yYXJ5KSBDb25uZWN0IHRvIHRleHQuXCIsXCJzc2lkXCI6XCJzc2owMDAwNTM1MTkxXCIsXCJ1cmxcIjpcImh0dHA6Ly9wcm94eS5saWJyYXJ5LmNvcm5lbGwuZWR1L2xvZ2luP3VybD1odHRwczovL2xpbmsuc3ByaW5nZXIuY29tL29wZW51cmw/Z2VucmU9Ym9vayZpc2JuPTk3OC0zLTY0Mi0xOTIyMi03XCJ9Iiwie1wicHJvdmlkZXJjb2RlXCI6XCJQUlZBVlhcIixcImRiY29kZVwiOlwiMkhWXCIsXCJkZXNjcmlwdGlvblwiOlwiRnVsbCB0ZXh0IGF2YWlsYWJsZSBmcm9tIFNwcmluZ2VyTElOSyBMZWN0dXJlIE5vdGVzIGluIENvbXB1dGVyIFNjaWVuY2UgQ29udGVtcG9yYXJ5ICgxOTk3LXByZXNlbnQpIENvbm5lY3QgdG8gdGV4dC5cIixcInNzaWRcIjpcInNzajAwMDA1MzUxOTFcIixcInVybFwiOlwiaHR0cDovL3Byb3h5LmxpYnJhcnkuY29ybmVsbC5lZHUvbG9naW4/dXJsPWh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vb3BlbnVybD9nZW5yZT1ib29rJmlzYm49OTc4LTMtNjQyLTE5MjIxLTBcIn0iXSwib2NsY19pZF9kaXNwbGF5IjpbIjcxOTM2MTY5NCJdLCJhdmFpbGFiaWxpdHlfanNvbiI6IntcIm9ubGluZVwiOnRydWV9IiwicHViX2RhdGVfZmFjZXQiOjIwMTEsImZvcm1hdCI6WyJCb29rIl0sIm9ubGluZSI6WyJPbmxpbmUiXSwic2NvcmUiOjcxMzA1LjU0fSx7ImF1dGhvcl9kaXNwbGF5IjoiSW50ZXJuYXRpb25hbCBXb3Jrc2hvcCBvbiBDb21iaW5hdG9yaWFsIEFsZ29yaXRobXMgKDIybmQgOiAyMDExIDogVmljdG9yaWEsIEIuQy4pIiwidGl0bGVfZGlzcGxheSI6IkNvbWJpbmF0b3JpYWwgYWxnb3JpdGhtcyIsImZ1bGx0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBhbGdvcml0aG1zIDogMjJuZCBJbnRlcm5hdGlvbmFsIFdvcmtzaG9wLCBJV09DQSAyMDExLCBWaWN0b3JpYSwgQkMsIENhbmFkYSwgSnVseSAyMC0yMiwgMjAxMSA6IHJldmlzZWQgc2VsZWN0ZWQgcGFwZXJzIiwic3VidGl0bGVfZGlzcGxheSI6IjIybmQgSW50ZXJuYXRpb25hbCBXb3Jrc2hvcCwgSVdPQ0EgMjAxMSwgVmljdG9yaWEsIEJDLCBDYW5hZGEsIEp1bHkgMjAtMjIsIDIwMTEgOiByZXZpc2VkIHNlbGVjdGVkIHBhcGVycyIsInB1Yl9pbmZvX2Rpc3BsYXkiOlsiQmVybGluIDogU3ByaW5nZXIsIFsyMDExXSJdLCJwdWJfZGF0ZV9kaXNwbGF5IjpbIlsyMDExXSJdLCJsYW5ndWFnZV9kaXNwbGF5IjpbIkVuZ2xpc2guIl0sImlkIjoiODcwNDE0OSIsInVybF9hY2Nlc3NfZGlzcGxheSI6WyJodHRwOi8vcHJveHkubGlicmFyeS5jb3JuZWxsLmVkdS9sb2dpbj91cmw9aHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9vcGVudXJsP2dlbnJlPWJvb2smaXNibj05NzgtMy02NDItMjUwMTEtOHxGdWxsIHRleHQgYXZhaWxhYmxlIGZyb20gU3ByaW5nZXJMaW5rIGVib29rcyAtIENvbXB1dGVyIFNjaWVuY2UgKENvbnRlbXBvcmFyeSkgQ29ubmVjdCB0byB0ZXh0LiIsImh0dHA6Ly9wcm94eS5saWJyYXJ5LmNvcm5lbGwuZWR1L2xvZ2luP3VybD1odHRwczovL2xpbmsuc3ByaW5nZXIuY29tL29wZW51cmw/Z2VucmU9Ym9vayZpc2JuPTk3OC0zLTY0Mi0yNTAxMC0xfEZ1bGwgdGV4dCBhdmFpbGFibGUgZnJvbSBTcHJpbmdlckxJTksgTGVjdHVyZSBOb3RlcyBpbiBDb21wdXRlciBTY2llbmNlIENvbnRlbXBvcmFyeSAoMTk5Ny1wcmVzZW50KSBDb25uZWN0IHRvIHRleHQuIl0sInVybF9hY2Nlc3NfanNvbiI6WyJ7XCJwcm92aWRlcmNvZGVcIjpcIlBSVkFWWFwiLFwiZGJjb2RlXCI6XCIwRDZcIixcImRlc2NyaXB0aW9uXCI6XCJGdWxsIHRleHQgYXZhaWxhYmxlIGZyb20gU3ByaW5nZXJMaW5rIGVib29rcyAtIENvbXB1dGVyIFNjaWVuY2UgKENvbnRlbXBvcmFyeSkgQ29ubmVjdCB0byB0ZXh0LlwiLFwic3NpZFwiOlwic3NqMDAwMDYwOTM0N1wiLFwidXJsXCI6XCJodHRwOi8vcHJveHkubGlicmFyeS5jb3JuZWxsLmVkdS9sb2dpbj91cmw9aHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9vcGVudXJsP2dlbnJlPWJvb2smaXNibj05NzgtMy02NDItMjUwMTEtOFwifSIsIntcInByb3ZpZGVyY29kZVwiOlwiUFJWQVZYXCIsXCJkYmNvZGVcIjpcIjJIVlwiLFwiZGVzY3JpcHRpb25cIjpcIkZ1bGwgdGV4dCBhdmFpbGFibGUgZnJvbSBTcHJpbmdlckxJTksgTGVjdHVyZSBOb3RlcyBpbiBDb21wdXRlciBTY2llbmNlIENvbnRlbXBvcmFyeSAoMTk5Ny1wcmVzZW50KSBDb25uZWN0IHRvIHRleHQuXCIsXCJzc2lkXCI6XCJzc2owMDAwNjA5MzQ3XCIsXCJ1cmxcIjpcImh0dHA6Ly9wcm94eS5saWJyYXJ5LmNvcm5lbGwuZWR1L2xvZ2luP3VybD1odHRwczovL2xpbmsuc3ByaW5nZXIuY29tL29wZW51cmw/Z2VucmU9Ym9vayZpc2JuPTk3OC0zLTY0Mi0yNTAxMC0xXCJ9Il0sIm9jbGNfaWRfZGlzcGxheSI6WyI3NjE2OTM3NzQiXSwiYXZhaWxhYmlsaXR5X2pzb24iOiJ7XCJvbmxpbmVcIjp0cnVlfSIsInB1Yl9kYXRlX2ZhY2V0IjoyMDExLCJmb3JtYXQiOlsiQm9vayJdLCJvbmxpbmUiOlsiT25saW5lIl0sInNjb3JlIjo3MDcwMy44MzZ9LHsiYXV0aG9yX2Rpc3BsYXkiOiJJbnRlcm5hdGlvbmFsIFdvcmtzaG9wIG9uIENvbWJpbmF0b3JpYWwgQWxnb3JpdGhtcyAoMjB0aCA6IDIwMDkgOiBIcmFkZWMgYW5kIE1vcmF2aWPDrSwgQ3plY2ggUmVwdWJsaWMpIiwidGl0bGVfZGlzcGxheSI6IkNvbWJpbmF0b3JpYWwgYWxnb3JpdGhtcyIsImZ1bGx0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBhbGdvcml0aG1zIDogMjB0aCBpbnRlcm5hdGlvbmFsIHdvcmtzaG9wLCBJd29jYSAyMDA5LCBIcmFkZWMgbmFkIFtzaWNdIE1vcmF2aWMszJUgQ3plY2ggUmVwdWJsaWMsIEp1bmUgMjgtSnVseSAyLCAyMDA5LCByZXZpc2VkIHNlbGVjdGVkIHBhcGVycyIsInN1YnRpdGxlX2Rpc3BsYXkiOiIyMHRoIGludGVybmF0aW9uYWwgd29ya3Nob3AsIEl3b2NhIDIwMDksIEhyYWRlYyBuYWQgW3NpY10gTW9yYXZpYyzMlSBDemVjaCBSZXB1YmxpYywgSnVuZSAyOC1KdWx5IDIsIDIwMDksIHJldmlzZWQgc2VsZWN0ZWQgcGFwZXJzIiwicHViX2luZm9fZGlzcGxheSI6WyJCZXJsaW4gOiBTcHJpbmdlciwgYzIwMDkuIl0sInB1Yl9kYXRlX2Rpc3BsYXkiOlsiYzIwMDkiXSwibGFuZ3VhZ2VfZGlzcGxheSI6WyJFbmdsaXNoLiJdLCJpZCI6Ijg3MDQxNDciLCJ1cmxfYWNjZXNzX2pzb24iOlsie1wicHJvdmlkZXJjb2RlXCI6XCJQUlZBVlhcIixcImRiY29kZVwiOlwiMEQ2XCIsXCJkZXNjcmlwdGlvblwiOlwiRnVsbCB0ZXh0IGF2YWlsYWJsZSBmcm9tIFNwcmluZ2VyTGluayBlYm9va3MgLSBDb21wdXRlciBTY2llbmNlIChDb250ZW1wb3JhcnkpIENvbm5lY3QgdG8gdGV4dC5cIixcInNzaWRcIjpcInNzajAwMDAzNTU0NTZcIixcInVybFwiOlwiaHR0cDovL3Byb3h5LmxpYnJhcnkuY29ybmVsbC5lZHUvbG9naW4/dXJsPWh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vb3BlbnVybD9nZW5yZT1ib29rJmlzYm49OTc4LTMtNjQyLTEwMjE3LTJcIn0iLCJ7XCJwcm92aWRlcmNvZGVcIjpcIlBSVkFWWFwiLFwiZGJjb2RlXCI6XCIySFZcIixcImRlc2NyaXB0aW9uXCI6XCJGdWxsIHRleHQgYXZhaWxhYmxlIGZyb20gU3ByaW5nZXJMSU5LIExlY3R1cmUgTm90ZXMgaW4gQ29tcHV0ZXIgU2NpZW5jZSBDb250ZW1wb3JhcnkgKDE5OTctcHJlc2VudCkgQ29ubmVjdCB0byB0ZXh0LlwiLFwic3NpZFwiOlwic3NqMDAwMDM1NTQ1NlwiLFwidXJsXCI6XCJodHRwOi8vcHJveHkubGlicmFyeS5jb3JuZWxsLmVkdS9sb2dpbj91cmw9aHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9vcGVudXJsP2dlbnJlPWJvb2smaXNibj05NzgtMy02NDItMTAyMTYtNVwifSJdLCJvY2xjX2lkX2Rpc3BsYXkiOlsiNDYyOTE4Mjg3Il0sImF2YWlsYWJpbGl0eV9qc29uIjoie1wib25saW5lXCI6dHJ1ZX0iLCJwdWJfZGF0ZV9mYWNldCI6MjAwOSwiZm9ybWF0IjpbIkJvb2siXSwib25saW5lIjpbIk9ubGluZSJdLCJzY29yZSI6NjgwMDEuNjF9LHsiYXV0aG9yX2Rpc3BsYXkiOiJIdSwgVC4gQy4gKFRlIENoaWFuZyksIDE5MzAtIiwidGl0bGVfZGlzcGxheSI6IkNvbWJpbmF0b3JpYWwgYWxnb3JpdGhtcyIsImZ1bGx0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBhbGdvcml0aG1zLiBULkMuIEh1IGFuZCBNLlQuIFNoaW5nIiwic3VidGl0bGVfZGlzcGxheSI6IlQuQy4gSHUgYW5kIE0uVC4gU2hpbmciLCJwdWJfaW5mb19kaXNwbGF5IjpbIk1pbmVvbGEsIE4uWS4gOiBEb3ZlciBQdWJsaWNhdGlvbnMsIDIwMDIuIl0sInB1Yl9kYXRlX2Rpc3BsYXkiOlsiMjAwMiJdLCJsYW5ndWFnZV9kaXNwbGF5IjpbIkVuZ2xpc2guIl0sImlkIjoiNDM5MTM3MiIsImVkaXRpb25fZGlzcGxheSI6WyIyLiBlZC4iXSwib2NsY19pZF9kaXNwbGF5IjpbIjQ3MjM3ODY4Il0sImF2YWlsYWJpbGl0eV9qc29uIjoie1wiYXZhaWxhYmxlXCI6dHJ1ZSxcImF2YWlsQXRcIjp7XCJNYXRoZW1hdGljcyBMaWJyYXJ5IChNYWxvdHQgSGFsbClcIjpcIlFBMTY0IC5IOHggMjAwMlwifX0iLCJwdWJfZGF0ZV9mYWNldCI6MjAwMiwiZm9ybWF0IjpbIkJvb2siXSwib25saW5lIjpbIkF0IHRoZSBMaWJyYXJ5Il0sInNjb3JlIjo2NzUyNi42MX0seyJhdXRob3JfZGlzcGxheSI6IktyZWhlciwgRG9uYWxkIEwuIiwidGl0bGVfZGlzcGxheSI6IkNvbWJpbmF0b3JpYWwgYWxnb3JpdGhtcyIsImZ1bGx0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBhbGdvcml0aG1zIDogZ2VuZXJhdGlvbiwgZW51bWVyYXRpb24sIGFuZCBzZWFyY2giLCJzdWJ0aXRsZV9kaXNwbGF5IjoiZ2VuZXJhdGlvbiwgZW51bWVyYXRpb24sIGFuZCBzZWFyY2giLCJwdWJfaW5mb19kaXNwbGF5IjpbIkJvY2EgUmF0b24sIEZsYS4gOiBDUkMgUHJlc3MsIGMxOTk5LiJdLCJwdWJfZGF0ZV9kaXNwbGF5IjpbImMxOTk5Il0sImxhbmd1YWdlX2Rpc3BsYXkiOlsiRW5nbGlzaC4iXSwiaWQiOiIzMzUxODAzIiwib2NsY19pZF9kaXNwbGF5IjpbIjM5NzI3OTM1Il0sImF2YWlsYWJpbGl0eV9qc29uIjoie1wiYXZhaWxhYmxlXCI6dHJ1ZSxcImF2YWlsQXRcIjp7XCJNYXRoZW1hdGljcyBMaWJyYXJ5IChNYWxvdHQgSGFsbClcIjpcIlFBMTY0IC5LNzN4IDE5OTlcIn19IiwicHViX2RhdGVfZmFjZXQiOjE5OTksImZvcm1hdCI6WyJCb29rIl0sIm9ubGluZSI6WyJBdCB0aGUgTGlicmFyeSJdLCJzY29yZSI6NjA2MDMuNDczfSx7ImF1dGhvcl9kaXNwbGF5IjoiV2lsZiwgSGVyYmVydCBTLiwgMTkzMS0iLCJ0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBhbGdvcml0aG1zIiwiZnVsbHRpdGxlX2Rpc3BsYXkiOiJDb21iaW5hdG9yaWFsIGFsZ29yaXRobXMgOiBhbiB1cGRhdGUiLCJzdWJ0aXRsZV9kaXNwbGF5IjoiYW4gdXBkYXRlIiwicHViX2luZm9fZGlzcGxheSI6WyJQaGlsYWRlbHBoaWEsIFBhLiA6IFNvY2lldHkgZm9yIEluZHVzdHJpYWwgYW5kIEFwcGxpZWQgTWF0aGVtYXRpY3MsIDE5ODkuIl0sInB1Yl9kYXRlX2Rpc3BsYXkiOlsiMTk4OSJdLCJsYW5ndWFnZV9kaXNwbGF5IjpbIkVuZ2xpc2guIl0sImlkIjoiNzUzODk4MyIsInVybF9hY2Nlc3NfanNvbiI6WyJ7XCJwcm92aWRlcmNvZGVcIjpcIlBSVkFWU1wiLFwiZGJjb2RlXCI6XCI3TTNcIixcImRlc2NyaXB0aW9uXCI6XCJGdWxsIHRleHQgYXZhaWxhYmxlIGZyb20gU0lBTSBlYm9vayBDb25uZWN0IHRvIHRleHQuXCIsXCJzc2lkXCI6XCJzc2owMDAwNTI3NTgzXCIsXCJ1cmxcIjpcImh0dHA6Ly9wcm94eS5saWJyYXJ5LmNvcm5lbGwuZWR1L2xvZ2luP3VybD1odHRwczovL2VwdWJzLnNpYW0ub3JnL2RvaS9ib29rLzEwLjExMzcvMS45NzgxNjExOTcwMTY2XCJ9Il0sIm9jbGNfaWRfZGlzcGxheSI6WyI3MTg2MjgwOTciXSwiYXZhaWxhYmlsaXR5X2pzb24iOiJ7XCJvbmxpbmVcIjp0cnVlfSIsInB1Yl9kYXRlX2ZhY2V0IjoxOTg5LCJmb3JtYXQiOlsiQm9vayJdLCJvbmxpbmUiOlsiT25saW5lIl0sInNjb3JlIjo1NDIyNS4yfSx7ImF1dGhvcl9kaXNwbGF5IjoiUmVpbmdvbGQsIEVkd2FyZCBNLiwgMTk0NS0iLCJ0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBhbGdvcml0aG1zIiwiZnVsbHRpdGxlX2Rpc3BsYXkiOiJDb21iaW5hdG9yaWFsIGFsZ29yaXRobXMgOiB0aGVvcnkgYW5kIHByYWN0aWNlIiwic3VidGl0bGVfZGlzcGxheSI6InRoZW9yeSBhbmQgcHJhY3RpY2UiLCJwdWJfaW5mb19kaXNwbGF5IjpbIkVuZ2xld29vZCBDbGlmZnMsIE4uSi4gOiBQcmVudGljZS1IYWxsLCBjMTk3Ny4iXSwicHViX2RhdGVfZGlzcGxheSI6WyJjMTk3NyJdLCJsYW5ndWFnZV9kaXNwbGF5IjpbIkVuZ2xpc2guIl0sImlkIjoiMjMwNDUxIiwib2NsY19pZF9kaXNwbGF5IjpbIjI1MjQ5ODgiXSwiYXZhaWxhYmlsaXR5X2pzb24iOiJ7XCJhdmFpbGFibGVcIjp0cnVlLFwiYXZhaWxBdFwiOntcIkxpYnJhcnkgQW5uZXhcIjpcIlFBMTY0IC5SMzZcIn19IiwicHViX2RhdGVfZmFjZXQiOjE5NzcsImZvcm1hdCI6WyJCb29rIl0sIm9ubGluZSI6WyJBdCB0aGUgTGlicmFyeSJdLCJzY29yZSI6NTMzNTYuMDQ3fSx7InRpdGxlX2Rpc3BsYXkiOiJDb21iaW5hdG9yaWFsIEFsZ29yaXRobXMgb24gV29yZHMiLCJmdWxsdGl0bGVfZGlzcGxheSI6IkNvbWJpbmF0b3JpYWwgQWxnb3JpdGhtcyBvbiBXb3JkcyIsInN1YnRpdGxlX2Rpc3BsYXkiOiIiLCJwdWJfaW5mb19kaXNwbGF5IjpbIkJlcmxpbiA6IFNwcmluZ2VyIERlYy4gMTk4NSJdLCJwdWJfZGF0ZV9kaXNwbGF5IjpbIkRlYy4gMTk4NSJdLCJsYW5ndWFnZV9kaXNwbGF5IjpbIkVuZ2xpc2guIl0sImlkIjoiMTAxMTI0NzciLCJ1cmxfYWNjZXNzX2pzb24iOlsie1wicHJvdmlkZXJjb2RlXCI6XCJQUlZBVlhcIixcImRiY29kZVwiOlwiNTBYXCIsXCJkZXNjcmlwdGlvblwiOlwiRnVsbCB0ZXh0IGF2YWlsYWJsZSBmcm9tIFNwcmluZ2VyIEJvb2tzIE9ubGluZSBBcmNoaXZlIENvbm5lY3QgdG8gdGV4dC5cIixcInNzaWRcIjpcInNzaWIwMjk5MzU5MTlcIixcInVybFwiOlwiaHR0cDovL3Byb3h5LmxpYnJhcnkuY29ybmVsbC5lZHUvbG9naW4/dXJsPWh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vMTAuMTAwNy85NzgtMy02NDItODI0NTYtMlwifSJdLCJvY2xjX2lkX2Rpc3BsYXkiOlsiODY0NjgyMTk0Il0sImF2YWlsYWJpbGl0eV9qc29uIjoie1wib25saW5lXCI6dHJ1ZX0iLCJwdWJfZGF0ZV9mYWNldCI6MTk4NSwiZm9ybWF0IjpbIkJvb2siXSwib25saW5lIjpbIk9ubGluZSJdLCJzY29yZSI6MjMzNzQuMTI5fSx7ImF1dGhvcl9kaXNwbGF5IjoiTkFUTyBBZHZhbmNlZCBSZXNlYXJjaCBXb3Jrc2hvcCBvbiBDb21iaW5hdG9yaWFsIEFsZ29yaXRobXMgb24gV29yZHMgKDE5ODQgOiBNYXJhdGVhLCBJdGFseSkiLCJ0aXRsZV9kaXNwbGF5IjoiQ29tYmluYXRvcmlhbCBhbGdvcml0aG1zIG9uIHdvcmRzIiwiZnVsbHRpdGxlX2Rpc3BsYXkiOiJDb21iaW5hdG9yaWFsIGFsZ29yaXRobXMgb24gd29yZHMiLCJzdWJ0aXRsZV9kaXNwbGF5IjoiIiwicHViX2luZm9fZGlzcGxheSI6WyJCZXJsaW4gOyBOZXcgWW9yayA6IFNwcmluZ2VyLVZlcmxhZywgYzE5ODUuIl0sInB1Yl9kYXRlX2Rpc3BsYXkiOlsiYzE5ODUiXSwibGFuZ3VhZ2VfZGlzcGxheSI6WyJFbmdsaXNoLiJdLCJpZCI6IjU5ODU5NiIsIm9jbGNfaWRfZGlzcGxheSI6WyIxMTk3MDYzNyJdLCJhdmFpbGFiaWxpdHlfanNvbiI6IntcImF2YWlsYWJsZVwiOnRydWUsXCJhdmFpbEF0XCI6e1wiTGlicmFyeSBBbm5leFwiOlwiUUExNjQgLk4yNyAxOTg0XCJ9fSIsInB1Yl9kYXRlX2ZhY2V0IjoxOTg1LCJmb3JtYXQiOlsiQm9vayJdLCJvbmxpbmUiOlsiQXQgdGhlIExpYnJhcnkiXSwic2NvcmUiOjIzMTA4LjkyfSx7ImF1dGhvcl9kaXNwbGF5IjoiV2hpdGVoZWFkLCBFYXJsIEdsZW4uIiwidGl0bGVfZGlzcGxheSI6IkNvbWJpbmF0b3JpYWwgYWxnb3JpdGhtcywgMTk3Mi0xOTczIiwiZnVsbHRpdGxlX2Rpc3BsYXkiOiJDb21iaW5hdG9yaWFsIGFsZ29yaXRobXMsIDE5NzItMTk3MyIsInN1YnRpdGxlX2Rpc3BsYXkiOiIiLCJwdWJfaW5mb19kaXNwbGF5IjpbIltOZXcgWW9ya10gQ291cmFudCBJbnN0aXR1dGUgb2YgTWF0aGVtYXRpY2FsIFNjaWVuY2VzLCBOZXcgWW9yayBVbml2ZXJzaXR5IFsxOTczXSJdLCJwdWJfZGF0ZV9kaXNwbGF5IjpbIlsxOTczXSJdLCJsYW5ndWFnZV9kaXNwbGF5IjpbIkVuZ2xpc2guIl0sImlkIjoiNjE0MjA2Iiwib2NsY19pZF9kaXNwbGF5IjpbIjYyNDU1NiJdLCJhdmFpbGFiaWxpdHlfanNvbiI6IntcImF2YWlsYWJsZVwiOnRydWUsXCJhdmFpbEF0XCI6e1wiTWF0aGVtYXRpY3MgTGlicmFyeSAoTWFsb3R0IEhhbGwpXCI6XCJRQTE2NCAuVzU5XCJ9fSIsInB1Yl9kYXRlX2ZhY2V0IjoxOTczLCJmb3JtYXQiOlsiQm9vayJdLCJvbmxpbmUiOlsiQXQgdGhlIExpYnJhcnkiXSwic2NvcmUiOjIzMDc0Ljk2OX1dfSwiZmFjZXRfY291bnRzIjp7ImZhY2V0X3F1ZXJpZXMiOnsiYWNxdWlyZWRfZHQ6W05PVy0xWUVBUiBUTyBOT1ctN0RBWV0iOjN9LCJmYWNldF9maWVsZHMiOnsib25saW5lIjpbIk9ubGluZSIsODAsIkF0IHRoZSBMaWJyYXJ5Iiw2NV0sImZvcm1hdCI6WyJCb29rIiwxNDIsIlRoZXNpcyIsNF0sImF1dGhvcl9mYWNldCI6WyJJbnRlcm5hdGlvbmFsIFdvcmtzaG9wIG9uIEFwcHJveGltYXRpb24gQWxnb3JpdGhtcyBmb3IgQ29tYmluYXRvcmlhbCBPcHRpbWl6YXRpb24gUHJvYmxlbXMiLDIzLCJTcHJpbmdlckxpbmsgKE9ubGluZSBzZXJ2aWNlKSIsMTgsImVicmFyeSwgSW5jLiIsMTMsIkphbnNlbiwgS2xhdXMiLDEyLCJJbnRlcm5hdGlvbmFsIFdvcmtzaG9wIG9uIFJhbmRvbWl6YXRpb24gYW5kIENvbXB1dGF0aW9uIiwxMCwiVnlnZW4sIEplbnMiLDEwXSwicHViX2RhdGVfZmFjZXQiOlsiMjAwOCIsOSwiMjAwNiIsOCwiMTk4OCIsNywiMjAxMSIsNywiMTk4NSIsNiwiMjAwMCIsNiwiMjAwMSIsNiwiMjAwMyIsNiwiMjAwNSIsNiwiMTk5MiIsNV0sIndvcmtpZF9mYWNldCI6WyI3OTI3MjUxMzgiLDcsIjkxNTM3NTU5MSIsNiwiMjY0MjM2OCIsNCwiNzk1Mjg2MTU5IiwzLCIxMTc3NjMyOTIiLDIsIjEyMjg0MzE0IiwyLCIyMDE1MTQ3MzMiLDIsIjIwMzI4MzIxMSIsMiwiMjE2OTc2MyIsMiwiMjIyMzExODUyIiwyXSwibGFuZ3VhZ2VfZmFjZXQiOlsiRW5nbGlzaCIsMTQzXSwiZmFzdF90b3BpY19mYWNldCI6WyJBbGdvcml0aG1zIiwzNSwiQ29tcHV0ZXIgYWxnb3JpdGhtcyIsMjksIkNvbWJpbmF0b3JpYWwgYW5hbHlzaXMiLDI1LCJDb21iaW5hdG9yaWFsIG9wdGltaXphdGlvbiIsMjAsIkNvbXB1dGVyIHNjaWVuY2UgPiBTdGF0aXN0aWNhbCBtZXRob2RzIiwyMCwiQ29tYmluYXRvcmlhbCBhbmFseXNpcyA+IERhdGEgcHJvY2Vzc2luZyIsMTBdLCJmYXN0X2dlb19mYWNldCI6W10sImZhc3RfZXJhX2ZhY2V0IjpbXSwiZmFzdF9nZW5yZV9mYWNldCI6WyJDb25mZXJlbmNlIHBhcGVycyBhbmQgcHJvY2VlZGluZ3MiLDQzLCJDb25mZXJlbmNlIHBhcGVycyBhbmQgIHByb2NlZWRpbmdzIiw4XSwic3ViamVjdF9jb250ZW50X2ZhY2V0IjpbIk5vbi1GaWN0aW9uIChib29rcykiLDEzMV0sImxjX2FscGhhX2ZhY2V0IjpbXSwibG9jYXRpb24iOlsiS3JvY2ggTGlicmFyeSBSYXJlICYgTWFudXNjcmlwdHMiLDMsIktyb2NoIExpYnJhcnkgUmFyZSAmIE1hbnVzY3JpcHRzID4gUmVxdWVzdCBpbiBBZHZhbmNlIiwzLCJMaWJyYXJ5IEFubmV4IiwyOCwiTWFubiBMaWJyYXJ5IiwyLCJNYW5uIExpYnJhcnkgPiBNYWluIENvbGxlY3Rpb24iLDIsIk1hdGhlbWF0aWNzIExpYnJhcnkiLDMyLCJNYXRoZW1hdGljcyBMaWJyYXJ5ID4gTWFpbiBDb2xsZWN0aW9uIiwzMiwiVXJpcyBMaWJyYXJ5Iiw1LCJVcmlzIExpYnJhcnkgPiBNYWluIENvbGxlY3Rpb24iLDVdLCJoaWVyYXJjaHlfZmFjZXQiOltdLCJhdXRob3J0aXRsZV9mYWNldCI6WyJLb3J0ZSwgQi4gSC4gKEJlcm5oYXJkIEguKSwgMTkzOC0gfCBDb21iaW5hdG9yaWFsIG9wdGltaXphdGlvbiIsNywiR3LDtnRzY2hlbCwgTWFydGluLiB8IEdlb21ldHJpYyBhbGdvcml0aG1zIGFuZCBjb21iaW5hdG9yaWFsIG9wdGltaXphdGlvbiIsMywiSHJvbWtvdmnEjSwgSnVyYWosIDE5NTgtIHwgQWxnb3JpdGhtaWNzIGZvciBoYXJkIHByb2JsZW1zIiwzLCJTYWdhbiwgQnJ1Y2UgRWxpLiB8IHN5bW1ldHJpYyBncm91cCIsMywiQnJpc2tvcm4sIERpcmsuIHwgU3BvcnRzIGxlYWd1ZXMgc2NoZWR1bGluZyIsMiwiQ8ymZWxhLCBFcmFuZGEuIHwgcXVhZHJhdGljIGFzc2lnbm1lbnQgcHJvYmxlbSIsMiwiSGFydG1hbm4sIEFsZXhhbmRlciBLLiB8IFBoYXNlIHRyYW5zaXRpb25zIGluIGNvbWJpbmF0b3JpYWwgb3B0aW1pemF0aW9uIHByb2JsZW1zIiwyLCJIdSwgVC4gQy4gKFRlIENoaWFuZyksIDE5MzAtIHwgQ29tYmluYXRvcmlhbCBhbGdvcml0aG1zIiwyLCJJbnRlcm5hdGlvbmFsIFdvcmtzaG9wIG9uIEFwcHJveGltYXRpb24gQWxnb3JpdGhtcyBmb3IgQ29tYmluYXRvcmlhbCBPcHRpbWl6YXRpb24gUHJvYmxlbXMgKDEwdGggOiAyMDA3IDogUHJpbmNldG9uLCBOLkouKSB8IEFwcHJveGltYXRpb24sIHJhbmRvbWl6YXRpb24sIGFuZCBjb21iaW5hdG9yaWFsIG9wdGltaXphdGlvbiIsMiwiSW50ZXJuYXRpb25hbCBXb3Jrc2hvcCBvbiBBcHByb3hpbWF0aW9uIEFsZ29yaXRobXMgZm9yIENvbWJpbmF0b3JpYWwgT3B0aW1pemF0aW9uIFByb2JsZW1zICgxOTk4IDogQWFsYm9yZywgRGVubWFyaykgfCBBcHByb3hpbWF0aW9uIGFsZ29yaXRobXMgZm9yIGNvbWJpbmF0b3JpYWwgb3B0aW1pemF0aW9uIiwyXSwibGNfY2FsbG51bV9mYWNldCI6WyJRIC0gU2NpZW5jZSIsMTI2LCJRIC0gU2NpZW5jZTpRQSAtIE1hdGhlbWF0aWNzIiwxMjQsIlEgLSBTY2llbmNlOlFBIC0gTWF0aGVtYXRpY3M6UUE3MS05MCAtIEluc3RydW1lbnRzIGFuZCBtYWNoaW5lcyIsNTEsIlEgLSBTY2llbmNlOlFBIC0gTWF0aGVtYXRpY3M6UUE3MS05MCAtIEluc3RydW1lbnRzIGFuZCBtYWNoaW5lczpRQTc1LTc2Ljk1IC0gQ2FsY3VsYXRpbmcgbWFjaGluZXMiLDQ5LCJRIC0gU2NpZW5jZTpRQSAtIE1hdGhlbWF0aWNzOlFBNzEtOTAgLSBJbnN0cnVtZW50cyBhbmQgbWFjaGluZXM6UUE3NS03Ni45NSAtIENhbGN1bGF0aW5nIG1hY2hpbmVzOlFBNzUuNS03Ni45NSAtIEVsZWN0cm9uaWMgY29tcHV0ZXJzLiAgQ29tcHV0ZXIgc2NpZW5jZSIsNDksIlEgLSBTY2llbmNlOlFBIC0gTWF0aGVtYXRpY3M6UUExNTAtMjcyLjUgLSBBbGdlYnJhIiw0NSwiUSAtIFNjaWVuY2U6UUEgLSBNYXRoZW1hdGljczpRQTI5OS42LTQzMyAtIEFuYWx5c2lzIiwyNywiVCAtIFRlY2hub2xvZ3kiLDgsIlQgLSBUZWNobm9sb2d5OlRLIC0gRWxlY3RyaWNhbCBFbmdpbmVlcmluZywgRWxlY3Ryb25pY3MsIE51Y2xlYXIgRW5naW5lZXJpbmciLDYsIlQgLSBUZWNobm9sb2d5OlRLIC0gRWxlY3RyaWNhbCBFbmdpbmVlcmluZywgRWxlY3Ryb25pY3MsIE51Y2xlYXIgRW5naW5lZXJpbmc6VEs1MTAxLTY3MjAgLSBUZWxlY29tbXVuaWNhdGlvbiAoaW5jbCB0ZWxlZ3JhcGh5LCB0ZWxlcGhvbmUsIHJhZGlvLCByYWRhciwgdGVsZXZpc2lvbikiLDYsIkggLSBTb2NpYWwgU2NpZW5jZXMiLDUsIkggLSBTb2NpYWwgU2NpZW5jZXM6SEQgLSBJbmR1c3RyaWVzLCBMYW5kIHVzZSwgTGFib3IiLDUsIkggLSBTb2NpYWwgU2NpZW5jZXM6SEQgLSBJbmR1c3RyaWVzLCBMYW5kIHVzZSwgTGFib3I6SEQyOC03MCAtIE1hbmFnZW1lbnQuICBJbmR1c3RyaWFsIG1hbmFnZW1lbnQiLDUsIlEgLSBTY2llbmNlOlFBIC0gTWF0aGVtYXRpY3M6UUExLTQzIC0gR2VuZXJhbCIsMywiSCAtIFNvY2lhbCBTY2llbmNlczpIRCAtIEluZHVzdHJpZXMsIExhbmQgdXNlLCBMYWJvcjpIRDI4LTcwIC0gTWFuYWdlbWVudC4gIEluZHVzdHJpYWwgbWFuYWdlbWVudDpIRDY5IC0gT3RoZXIgKGluY2wgYnVzaW5lc3MgY29uc3VsdGFudHMsIGNhcGFjaXR5LCBzaXplIG9mIGluZHVzdHJpZXMsIGV0Yy4pIiwyLCJRIC0gU2NpZW5jZTpRSCAtIE5hdHVyYWwgSGlzdG9yeSwgQmlvbG9neSIsMiwiUSAtIFNjaWVuY2U6UUggLSBOYXR1cmFsIEhpc3RvcnksIEJpb2xvZ3k6UUgzMDEtNzA1LjUgLSBCaW9sb2d5IChHZW5lcmFsKSIsMiwiUSAtIFNjaWVuY2U6UUEgLSBNYXRoZW1hdGljczpRQTI3My0yODAgLSBQcm9iYWJpbGl0aWVzLiAgTWF0aGVtYXRpY2FsIHN0YXRpc3RpY3MiLDEsIlEgLSBTY2llbmNlOlFBIC0gTWF0aGVtYXRpY3M6UUE0NDAtNjk5IC0gR2VvbWV0cnkuICBUcmlnb25vbWV0cnkuICBUb3BvbG9neSIsMSwiUSAtIFNjaWVuY2U6UUEgLSBNYXRoZW1hdGljczpRQTcxLTkwIC0gSW5zdHJ1bWVudHMgYW5kIG1hY2hpbmVzOlFBNzUtNzYuOTUgLSBDYWxjdWxhdGluZyBtYWNoaW5lczpRQTc1LjUtNzYuOTUgLSBFbGVjdHJvbmljIGNvbXB1dGVycy4gIENvbXB1dGVyIHNjaWVuY2U6UUE3Ni43NS03Ni43NjUgLSBDb21wdXRlciBzb2Z0d2FyZSIsMSwiUSAtIFNjaWVuY2U6UUEgLSBNYXRoZW1hdGljczpRQTgwMS05MzkgLSBBbmFseXRpYyBtZWNoYW5pY3MiLDEsIlEgLSBTY2llbmNlOlFDIC0gUGh5c2ljcyIsMSwiUSAtIFNjaWVuY2U6UUMgLSBQaHlzaWNzOlFDMTIwLTE2OC44NSAtIERlc2NyaXB0aXZlIGFuZCBleHBlcmltZW50YWwgbWVjaGFuaWNzIiwxLCJRIC0gU2NpZW5jZTpRSCAtIE5hdHVyYWwgSGlzdG9yeSwgQmlvbG9neTpRSDMwMS03MDUuNSAtIEJpb2xvZ3kgKEdlbmVyYWwpOlFINTAxLTUzMSAtIExpZmUiLDEsIlEgLSBTY2llbmNlOlFQIC0gUGh5c2lvbG9neSIsMSwiUSAtIFNjaWVuY2U6UVAgLSBQaHlzaW9sb2d5OlFQMS0zNDUgLSBHZW5lcmFsIChpbmNsIGluZmx1ZW5jZSBvZiB0aGUgZW52aXJvbm1lbnQpIiwxLCJUIC0gVGVjaG5vbG9neTpUIC0gVGVjaG5vbG9neSAoR2VuZXJhbCkiLDEsIlQgLSBUZWNobm9sb2d5OlQgLSBUZWNobm9sb2d5IChHZW5lcmFsKTpUNTUuNC02MC44IC0gSW5kdXN0cmlhbCBlbmdpbmVlcmluZy4gIE1hbmFnZW1lbnQgZW5naW5lZXJpbmciLDEsIlQgLSBUZWNobm9sb2d5OlQgLSBUZWNobm9sb2d5IChHZW5lcmFsKTpUNTUuNC02MC44IC0gSW5kdXN0cmlhbCBlbmdpbmVlcmluZy4gIE1hbmFnZW1lbnQgZW5naW5lZXJpbmc6VDU3LTU3Ljk3IC0gQXBwbGllZCBtYXRoZW1hdGljcy4gIFF1YW50aXRhdGl2ZSBtZXRob2RzIiwxLCJUIC0gVGVjaG5vbG9neTpUIC0gVGVjaG5vbG9neSAoR2VuZXJhbCk6VDU1LjQtNjAuOCAtIEluZHVzdHJpYWwgZW5naW5lZXJpbmcuICBNYW5hZ2VtZW50IGVuZ2luZWVyaW5nOlQ1Ny01Ny45NyAtIEFwcGxpZWQgbWF0aGVtYXRpY3MuICBRdWFudGl0YXRpdmUgbWV0aG9kczpUNTcuNi01Ny45NyAtIE9wZXJhdGlvbnMgcmVzZWFyY2guICBTeXN0ZW1zIGFuYWx5c2lzIiwxLCJUIC0gVGVjaG5vbG9neTpUQSAtIEVuZ2luZWVyaW5nIChHZW5lcmFsKSwgQ2l2aWwgRW5naW5lZXJpbmciLDFdLCJjb2xsZWN0aW9uIjpbXX0sImZhY2V0X3JhbmdlcyI6e30sImZhY2V0X2ludGVydmFscyI6e30sImZhY2V0X2hlYXRtYXBzIjp7fX0sInN0YXRzIjp7InN0YXRzX2ZpZWxkcyI6eyJwdWJfZGF0ZV9mYWNldCI6eyJtaW4iOjE5NjkuMCwibWF4IjoyMDE5LjAsImNvdW50IjoxNDMsIm1pc3NpbmciOjAsInN1bSI6Mjg1OTYwLjAsInN1bU9mU3F1YXJlcyI6NS43MTg2MTIwMkU4LCJtZWFuIjoxOTk5LjcyMDI3OTcyMDI3OTcsInN0ZGRldiI6MTIuMjE2MDE2NzI4NDU2ODY0fX19fQo=
    http_version: 
  recorded_at: Wed, 15 Jan 2020 16:57:12 GMT
- request:
    method: get
    uri: http://da-prod-solr.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&mm=1&q=(((%2Btitle:%22combinatorial%22%20%2Btitle:%22algorithms%22%20)%20OR%20(title_phrase:%22combinatorial%20algorithms%22))%20NOT%20((%2Bpublisher:%22springer%22)%20OR%20publisher:%22springer%22))%20&qt=search&rows=20&search_field=advanced&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Jan 2020 16:57:39 GMT
      Last-Modified:
      - Wed, 15 Jan 2020 01:25:11 GMT
      Etag:
      - '"NTc1Y2Q1MDAwMDAwMDAwMFNvbHI="'
      Content-Type:
      - application/json; charset=UTF-8
      Via:
      - 1.1 da-prod-solr7.library.cornell.edu
      Vary:
      - Accept-Encoding
      Content-Length:
      - '4596'
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 15 Jan 2020 16:57:43 GMT
- request:
    method: get
    uri: http://da-prod-solr.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&mm=1&q=(((%2Btitle:%22combinatorial%22%20%2Btitle:%22algorithms%22%20)%20OR%20(title_phrase:%22combinatorial%20algorithms%22))%20NOT%20((%2B%22springer%22)%20OR%20phrase:%22springer%22))%20&qt=search&rows=20&search_field=advanced&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Jan 2020 16:58:24 GMT
      Last-Modified:
      - Wed, 15 Jan 2020 01:25:11 GMT
      Etag:
      - '"NTc1Y2Q1MDAwMDAwMDAwMFNvbHI="'
      Content-Type:
      - application/json; charset=UTF-8
      Via:
      - 1.1 da-prod-solr7.library.cornell.edu
      Vary:
      - Accept-Encoding
      Content-Length:
      - '4588'
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 15 Jan 2020 16:58:40 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&mm=1&q=(((%2Btitle:%22beef%22)%20OR%20title_phrase:%22beef%22)%20AND%20((%2Btitle:%22100%25%22)%20OR%20title_phrase:%22100%25%22))%20&qt=search&rows=20&search_field=advanced&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:15:05 GMT
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '2846'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:04:38 GMT
      Etag:
      - '"NTE2YTVhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-088.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "responseHeader":{
            "zkConnected":true,
            "status":0,
            "QTime":387,
            "params":{
              "f.subject_content_facet.facet.limit":"6",
              "f.fast_geo_facet.facet.limit":"6",
              "f.lc_alpha_facet.facet.limit":"6",
              "f.location.facet.sort":"index",
              "f.online.facet.limit":"3",
              "facet.query":["acquired_dt:[NOW-14DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-30DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-1YEAR TO NOW-7DAY]"],
              "defType":"edismax",
              "f.lc_callnum_facet.facet.sort":"count",
              "stats":"true",
              "f.fast_genre_facet.facet.limit":"6",
              "wt":"json",
              "f.format.facet.limit":"11",
              "stats.field":"pub_date_facet",
              "mm":"1",
              "f.author_facet.facet.limit":"6",
              "facet.field":["online",
                "format",
                "author_facet",
                "pub_date_facet",
                "workid_facet",
                "language_facet",
                "fast_topic_facet",
                "fast_geo_facet",
                "fast_era_facet",
                "fast_genre_facet",
                "subject_content_facet",
                "lc_alpha_facet",
                "location",
                "hierarchy_facet",
                "authortitle_facet",
                "lc_callnum_facet",
                "collection"],
              "qt":"search",
              "f.lc_callnum_facet.facet.limit":"-1",
              "sort":"score desc, pub_date_sort desc, title_sort asc",
              "rows":"20",
              "f.location.facet.limit":"101",
              "q":"(((+title:\"beef\") OR title_phrase:\"beef\") AND ((+title:\"100%\") OR title_phrase:\"100%\")) ",
              "f.fast_era_facet.facet.limit":"6",
              "f.fast_topic_facet.facet.limit":"6",
              "facet":"true",
              "f.language_facet.facet.limit":"6",
              "search_field":"advanced"}},
          "response":{"numFound":5,"start":0,"maxScore":23731.203,"docs":[
              {
                "title_display":"100% beef",
                "fulltitle_display":"100% beef",
                "subtitle_display":"",
                "pub_info_display":["Palm Springs, CA : J&L Productions,"],
                "language_display":["English."],
                "id":"6395180",
                "acquired_dt":"2008-12-08T00:00:00Z",
                "oclc_id_display":["172511278"],
                "availability_json":"{\"available\":true,\"availAt\":{\"Kroch Library Rare & Manuscripts (Non-Circulating)\":\"Human Sexuality HQ75 .O583\"}}",
                "pub_date_facet":2000,
                "format":["Journal/Periodical"],
                "online":["At the Library"],
                "score":23731.203},
              {
                "title_display":"Institutional meat purchase specifications for fresh beef",
                "fulltitle_display":"Institutional meat purchase specifications for fresh beef. Series 100",
                "subtitle_display":"Series 100",
                "pub_info_display":["Washington, DC : U. S. Dept. of Agriculture, Agricultural Marketing Service, Livestock Division,"],
                "language_display":["English."],
                "id":"1754680",
                "url_access_json":["{\"description\":\"HathiTrust (multiple volumes)\",\"url\":\"http://catalog.hathitrust.org/Record/009152949\"}"],
                "oclc_id_display":["22355963"],
                "availability_json":"{\"available\":true,\"online\":true,\"availAt\":{\"Library Annex\":\"HD9410.9.U5 A51\"}}",
                "pub_date_facet":1900,
                "format":["Journal/Periodical"],
                "online":["At the Library",
                  "Online"],
                "score":9633.777},
              {
                "title_display":"A sea-fight",
                "fulltitle_display":"A sea-fight : two ships taken by Captain Southwood, and Captain Faulkner. Prince Chares [sic] his letters, with a commission; and other letters and papers taken at Paroes, with provisions and ammunition going to relieve Pendennis Castle. With 6 pieces of ordnance, 3 murderers, 20 barrels of gun-powder 10 barrels of beef, 6 chaldron of coals, 3 fat of peas, 100 weight of match, one cask and a half of bread, a barrel of candles. Also, 50 head of cattel taken at Aram. 30 casks of salmon taken at Bereskellet; and a ship taken at Dingle with two great guns, 2 murderers, 2 chambers, and the rebels all taken prisoners. These papers being examined, are commanded to be printed, and are published according to order of Parliament",
                "subtitle_display":"two ships taken by Captain Southwood, and Captain Faulkner. Prince Chares [sic] his letters, with a commission; and other letters and papers taken at Paroes, with provisions and ammunition going to relieve Pendennis Castle. With 6 pieces of ordnance, 3 murderers, 20 barrels of gun-powder 10 barrels of beef, 6 chaldron of coals, 3 fat of peas, 100 weight of match, one cask and a half of bread, a barrel of candles. Also, 50 head of cattel taken at Aram. 30 casks of salmon taken at Bereskellet; and a ship taken at Dingle with two great guns, 2 murderers, 2 chambers, and the rebels all taken prisoners. These papers being examined, are commanded to be printed, and are published according to order of Parliament",
                "pub_info_display":["London : Printed for Iane Coe, June 12. 1646."],
                "pub_date_display":["June 12. 1646"],
                "language_display":["English."],
                "id":"3662401",
                "oclc_id_display":["61374280"],
                "availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"Film 4655 55:E.340[19]\"}}",
                "pub_date_facet":1646,
                "format":["Book",
                  "Microform"],
                "online":["At the Library"],
                "score":1990.1543},
              {
                "title_display":"A sea-fight",
                "fulltitle_display":"A sea-fight: : two ships taken by Captain Southwood, and Captain Faulkner. Prince Chares [sic] his letters, with a commission; and other letters and papers taken at Paroes, with provisions and ammunition going to relieve Pendennis Castle. With 6 pieces of ordnance, 3 murderers, 20 barrels of gun-powder 10 barrels of beef, 6 chaldron of coals, 3 fat of peas, 100 weight of match, one cask and a half of bread, a barrel of candles. Also, 50 head of cattel taken at Aram. 30 casks of salmon taken at Bereskellet; and a ship taken at Dingle with two great guns, 2 murderers, 2 chambers, and the rebels all taken prisoners. These papers being examined, are commanded to be printed, and are published according to order of Parliament",
                "subtitle_display":"two ships taken by Captain Southwood, and Captain Faulkner. Prince Chares [sic] his letters, with a commission; and other letters and papers taken at Paroes, with provisions and ammunition going to relieve Pendennis Castle. With 6 pieces of ordnance, 3 murderers, 20 barrels of gun-powder 10 barrels of beef, 6 chaldron of coals, 3 fat of peas, 100 weight of match, one cask and a half of bread, a barrel of candles. Also, 50 head of cattel taken at Aram. 30 casks of salmon taken at Bereskellet; and a ship taken at Dingle with two great guns, 2 murderers, 2 chambers, and the rebels all taken prisoners. These papers being examined, are commanded to be printed, and are published according to order of Parliament",
                "pub_info_display":["London, : Printed for Iane Coe, June 12. 1646."],
                "pub_date_display":["June 12. 1646"],
                "language_display":["English."],
                "id":"8144881",
                "url_access_display":["http://proxy.library.cornell.edu/login?url=http://gateway.proquest.com/openurl?ctx_ver=Z39.88-2003&res_id=xri:eebo&rft_val_fmt=&rft_id=xri:eebo:image:159744|Available from Early English Books Online"],
                "url_access_json":["{\"providercode\":\"PRVCDH\",\"dbcode\":\"BHS\",\"description\":\"Available from Early English Books Online\",\"url\":\"http://proxy.library.cornell.edu/login?url=http://gateway.proquest.com/openurl?ctx_ver=Z39.88-2003&res_id=xri:eebo&rft_val_fmt=&rft_id=xri:eebo:image:159744\"}"],
                "acquired_dt":"2015-02-27T00:00:00Z",
                "oclc_id_display":["606665744"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":1646,
                "format":["Book"],
                "online":["Online"],
                "score":1980.8191},
              {
                "title_display":"XL Radio",
                "fulltitle_display":"XL Radio . Mixtape 17, May 00",
                "subtitle_display":"Mixtape 17, May 00",
                "pub_info_display":["[2000?]."],
                "pub_date_display":["[2000?]"],
                "language_display":["English."],
                "id":"7537266",
                "acquired_dt":"2011-12-13T00:00:00Z",
                "oclc_id_display":["768252186"],
                "availability_json":"{\"available\":true,\"availAt\":{\"Kroch Library Rare & Manuscripts (Non-Circulating)\":\"Archives 8029 Box 109 no. 6\"}}",
                "pub_date_facet":2000,
                "format":["Musical Recording"],
                "online":["At the Library"],
                "score":138.82805}]
          },
          "facet_counts":{
            "facet_queries":{},
            "facet_fields":{
              "online":[
                "At the Library",4,
                "Online",2],
              "format":[
                "Book",2,
                "Journal/Periodical",2,
                "Microform",1,
                "Musical Recording",1],
              "author_facet":[
                "England and Wales. Parliament",1,
                "Geoffrey Weiss Hip-Hop Collection",1,
                "United States. Agricultural Marketing Service Livestock & Seed Division",1,
                "United States. Agricultural Marketing Service. Livestock Division",1,
                "United States. Consumer and Marketing Service. Livestock Division",1],
              "pub_date_facet":[
                "1646",2,
                "2000",2,
                "1900",1],
              "workid_facet":[
                "54423263",2],
              "language_facet":[
                "English",5],
              "fast_topic_facet":[
                "Pendennis Castle (Falmouth, England)",2,
                "Bears (Gay culture)",1,
                "Civil War (Great Britain : 1642-1649)",1,
                "Gay men",1,
                "Military operations, Naval",1,
                "Popular music",1],
              "fast_geo_facet":[
                "Great Britain",1,
                "United States",1],
              "fast_era_facet":[
                "1642 - 1649",1,
                "1991 - 2000",1],
              "fast_genre_facet":[
                "Early works",2,
                "Periodicals",2,
                "History",1],
              "subject_content_facet":[],
              "lc_alpha_facet":[],
              "location":[
                "Kroch Library Rare & Manuscripts",2,
                "Kroch Library Rare & Manuscripts > Main Collection",2,
                "Library Annex",2],
              "hierarchy_facet":[],
              "authortitle_facet":[],
              "lc_callnum_facet":[
                "H - Social Sciences",2,
                "H - Social Sciences:HD - Industries, Land use, Labor",1,
                "H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades",1,
                "H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades:HD9000-9495 - Agricultural industries",1,
                "H - Social Sciences:HQ - The Family, Marriage, Women",1,
                "H - Social Sciences:HQ - The Family, Marriage, Women:HQ12-449 - Sexual life",1,
                "H - Social Sciences:HQ - The Family, Marriage, Women:HQ12-449 - Sexual life:HQ75-76.8 - Homosexuality.  Lesbianism",1,
                "Z - Bibliography, Library Science, Information Resources",1,
                "Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources",1,
                "Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography",1,
                "Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography:Z2000-2959 - Europe",1],
              "collection":[]},
            "facet_ranges":{},
            "facet_intervals":{},
            "facet_heatmaps":{}},
          "stats":{
            "stats_fields":{
              "pub_date_facet":{
                "min":1646.0,
                "max":2000.0,
                "count":5,
                "missing":0,
                "sum":9192.0,
                "sumOfSquares":1.7028632E7,
                "mean":1838.4,
                "stddev":180.31860691564805}}}}
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:15:05 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.query=pub_date_facet:%5B2000%20TO%202000%5D&mm=1&q=(((%2Btitle:%22beef%22)%20OR%20title_phrase:%22beef%22)%20AND%20((%2Btitle:%22100%25%22)%20OR%20title_phrase:%22100%25%22))%20&qt=search&rows=0&search_field=advanced&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:15:12 GMT
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '758'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:14:32 GMT
      Etag:
      - '"MTFiMWJhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-004.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "responseHeader":{
            "zkConnected":true,
            "status":0,
            "QTime":95,
            "params":{
              "f.subject_content_facet.facet.limit":"6",
              "mm":"1",
              "f.author_facet.facet.limit":"6",
              "qt":"search",
              "f.fast_geo_facet.facet.limit":"6",
              "f.lc_alpha_facet.facet.limit":"6",
              "f.lc_callnum_facet.facet.limit":"-1",
              "sort":"score desc, pub_date_sort desc, title_sort asc",
              "f.location.facet.sort":"index",
              "rows":"0",
              "f.online.facet.limit":"3",
              "facet.query":["acquired_dt:[NOW-14DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-30DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-1YEAR TO NOW-7DAY]",
                "pub_date_facet:[1646 TO 1649]",
                "pub_date_facet:[1650 TO 1699]",
                "pub_date_facet:[1700 TO 1749]",
                "pub_date_facet:[1750 TO 1799]",
                "pub_date_facet:[1800 TO 1849]",
                "pub_date_facet:[1850 TO 1899]",
                "pub_date_facet:[1900 TO 1949]",
                "pub_date_facet:[1950 TO 1999]",
                "pub_date_facet:[2000 TO 2000]"],
              "f.location.facet.limit":"101",
              "q":"(((+title:\"beef\") OR title_phrase:\"beef\") AND ((+title:\"100%\") OR title_phrase:\"100%\")) ",
              "defType":"edismax",
              "f.fast_era_facet.facet.limit":"6",
              "f.lc_callnum_facet.facet.sort":"count",
              "f.fast_topic_facet.facet.limit":"6",
              "f.fast_genre_facet.facet.limit":"6",
              "facet":"true",
              "wt":"json",
              "f.format.facet.limit":"11",
              "f.language_facet.facet.limit":"6",
              "search_field":"advanced"}},
          "response":{"numFound":5,"start":0,"maxScore":23731.203,"docs":[]
          },
          "facet_counts":{
            "facet_queries":{
              "pub_date_facet:[1646 TO 1649]":2,
              "pub_date_facet:[1900 TO 1949]":1,
              "pub_date_facet:[2000 TO 2000]":2},
            "facet_fields":{
              "format":[
                "Book",2,
                "Journal/Periodical",2,
                "Microform",1,
                "Musical Recording",1],
              "online":[
                "At the Library",4,
                "Online",2],
              "language_facet":[
                "English",5],
              "location_facet":[
                "Kroch Library Rare & Manuscripts",2,
                "Library Annex",2]},
            "facet_ranges":{},
            "facet_intervals":{},
            "facet_heatmaps":{}}}
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:15:12 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/get?ids=1754680&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:15:20 GMT
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '2445'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:12:44 GMT
      Etag:
      - '"NGQ5OWJhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-004.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:15:20 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=false&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&fl=id&mm=1&q=(((%2Btitle:%22beef%22)%20OR%20title_phrase:%22beef%22)%20AND%20((%2Btitle:%22100%25%22)%20OR%20title_phrase:%22100%25%22))%20&qt=search&rows=3&search_field=advanced&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:15:20 GMT
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '747'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:04:38 GMT
      Etag:
      - '"NTE2YTVhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-088.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "responseHeader":{
            "zkConnected":true,
            "status":0,
            "QTime":18,
            "params":{
              "f.subject_content_facet.facet.limit":"6",
              "f.fast_geo_facet.facet.limit":"6",
              "fl":"id",
              "f.lc_alpha_facet.facet.limit":"6",
              "f.location.facet.sort":"index",
              "f.online.facet.limit":"3",
              "facet.query":["acquired_dt:[NOW-14DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-30DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-1YEAR TO NOW-7DAY]"],
              "defType":"edismax",
              "f.lc_callnum_facet.facet.sort":"count",
              "stats":"true",
              "f.fast_genre_facet.facet.limit":"6",
              "wt":"json",
              "f.format.facet.limit":"11",
              "stats.field":"pub_date_facet",
              "mm":"1",
              "f.author_facet.facet.limit":"6",
              "facet.field":["online",
                "format",
                "author_facet",
                "pub_date_facet",
                "workid_facet",
                "language_facet",
                "fast_topic_facet",
                "fast_geo_facet",
                "fast_era_facet",
                "fast_genre_facet",
                "subject_content_facet",
                "lc_alpha_facet",
                "location",
                "hierarchy_facet",
                "authortitle_facet",
                "lc_callnum_facet",
                "collection"],
              "qt":"search",
              "f.lc_callnum_facet.facet.limit":"-1",
              "sort":"score desc, pub_date_sort desc, title_sort asc",
              "rows":"3",
              "f.location.facet.limit":"101",
              "q":"(((+title:\"beef\") OR title_phrase:\"beef\") AND ((+title:\"100%\") OR title_phrase:\"100%\")) ",
              "f.fast_era_facet.facet.limit":"6",
              "f.fast_topic_facet.facet.limit":"6",
              "facet":"false",
              "f.language_facet.facet.limit":"6",
              "search_field":"advanced"}},
          "response":{"numFound":5,"start":0,"maxScore":23731.203,"docs":[
              {
                "id":"6395180"},
              {
                "id":"1754680"},
              {
                "id":"3662401"}]
          },
          "stats":{
            "stats_fields":{
              "pub_date_facet":{
                "min":1646.0,
                "max":2000.0,
                "count":5,
                "missing":0,
                "sum":9192.0,
                "sumOfSquares":1.7028632E7,
                "mean":1838.4,
                "stddev":180.31860691564805}}}}
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:15:20 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/get?ids=3662401&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:15:32 GMT
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '2793'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:04:38 GMT
      Etag:
      - '"NTE2YTVhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-088.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:15:32 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=false&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&fl=id&mm=1&q=(((%2Btitle:%22beef%22)%20OR%20title_phrase:%22beef%22)%20AND%20((%2Btitle:%22100%25%22)%20OR%20title_phrase:%22100%25%22))%20&qt=search&rows=3&search_field=advanced&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&start=1&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:15:32 GMT
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '751'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:13:30 GMT
      Etag:
      - '"YTc0ZTFhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-004.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "responseHeader":{
            "zkConnected":true,
            "status":0,
            "QTime":9,
            "params":{
              "f.subject_content_facet.facet.limit":"6",
              "f.fast_geo_facet.facet.limit":"6",
              "fl":"id",
              "f.lc_alpha_facet.facet.limit":"6",
              "f.location.facet.sort":"index",
              "f.online.facet.limit":"3",
              "facet.query":["acquired_dt:[NOW-14DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-30DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-1YEAR TO NOW-7DAY]"],
              "defType":"edismax",
              "f.lc_callnum_facet.facet.sort":"count",
              "stats":"true",
              "f.fast_genre_facet.facet.limit":"6",
              "wt":"json",
              "f.format.facet.limit":"11",
              "stats.field":"pub_date_facet",
              "mm":"1",
              "f.author_facet.facet.limit":"6",
              "facet.field":["online",
                "format",
                "author_facet",
                "pub_date_facet",
                "workid_facet",
                "language_facet",
                "fast_topic_facet",
                "fast_geo_facet",
                "fast_era_facet",
                "fast_genre_facet",
                "subject_content_facet",
                "lc_alpha_facet",
                "location",
                "hierarchy_facet",
                "authortitle_facet",
                "lc_callnum_facet",
                "collection"],
              "qt":"search",
              "start":"1",
              "f.lc_callnum_facet.facet.limit":"-1",
              "sort":"score desc, pub_date_sort desc, title_sort asc",
              "rows":"3",
              "f.location.facet.limit":"101",
              "q":"(((+title:\"beef\") OR title_phrase:\"beef\") AND ((+title:\"100%\") OR title_phrase:\"100%\")) ",
              "f.fast_era_facet.facet.limit":"6",
              "f.fast_topic_facet.facet.limit":"6",
              "facet":"false",
              "f.language_facet.facet.limit":"6",
              "search_field":"advanced"}},
          "response":{"numFound":5,"start":1,"maxScore":23731.203,"docs":[
              {
                "id":"1754680"},
              {
                "id":"3662401"},
              {
                "id":"8144881"}]
          },
          "stats":{
            "stats_fields":{
              "pub_date_facet":{
                "min":1646.0,
                "max":2000.0,
                "count":5,
                "missing":0,
                "sum":9192.0,
                "sumOfSquares":1.7028632E7,
                "mean":1838.4,
                "stddev":180.31860691564805}}}}
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:15:32 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/get?ids=1754680&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:15:50 GMT
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '2445'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:15:15 GMT
      Etag:
      - '"MjFiNTVhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-088.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:15:50 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=false&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&fl=id&mm=1&q=(((%2Btitle:%22beef%22)%20OR%20title_phrase:%22beef%22)%20AND%20((%2Btitle:%22100%25%22)%20OR%20title_phrase:%22100%25%22))%20&qt=search&rows=3&search_field=advanced&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:15:50 GMT
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '748'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:05:19 GMT
      Etag:
      - '"MmMwZDZhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-004.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "responseHeader":{
            "zkConnected":true,
            "status":0,
            "QTime":75,
            "params":{
              "f.subject_content_facet.facet.limit":"6",
              "f.fast_geo_facet.facet.limit":"6",
              "fl":"id",
              "f.lc_alpha_facet.facet.limit":"6",
              "f.location.facet.sort":"index",
              "f.online.facet.limit":"3",
              "facet.query":["acquired_dt:[NOW-14DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-30DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-1YEAR TO NOW-7DAY]"],
              "defType":"edismax",
              "f.lc_callnum_facet.facet.sort":"count",
              "stats":"true",
              "f.fast_genre_facet.facet.limit":"6",
              "wt":"json",
              "f.format.facet.limit":"11",
              "stats.field":"pub_date_facet",
              "mm":"1",
              "f.author_facet.facet.limit":"6",
              "facet.field":["online",
                "format",
                "author_facet",
                "pub_date_facet",
                "workid_facet",
                "language_facet",
                "fast_topic_facet",
                "fast_geo_facet",
                "fast_era_facet",
                "fast_genre_facet",
                "subject_content_facet",
                "lc_alpha_facet",
                "location",
                "hierarchy_facet",
                "authortitle_facet",
                "lc_callnum_facet",
                "collection"],
              "qt":"search",
              "f.lc_callnum_facet.facet.limit":"-1",
              "sort":"score desc, pub_date_sort desc, title_sort asc",
              "rows":"3",
              "f.location.facet.limit":"101",
              "q":"(((+title:\"beef\") OR title_phrase:\"beef\") AND ((+title:\"100%\") OR title_phrase:\"100%\")) ",
              "f.fast_era_facet.facet.limit":"6",
              "f.fast_topic_facet.facet.limit":"6",
              "facet":"false",
              "f.language_facet.facet.limit":"6",
              "search_field":"advanced"}},
          "response":{"numFound":5,"start":0,"maxScore":23731.203,"docs":[
              {
                "id":"6395180"},
              {
                "id":"1754680"},
              {
                "id":"3662401"}]
          },
          "stats":{
            "stats_fields":{
              "pub_date_facet":{
                "min":1646.0,
                "max":2000.0,
                "count":5,
                "missing":0,
                "sum":9192.0,
                "sumOfSquares":1.7028632E7,
                "mean":1838.4,
                "stddev":180.31860691564805}}}}
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:15:50 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&mm=1&q=(%2Badvanced:%22title%22%20%2Badvanced:%22=%22%20%2Badvanced:%22100%25%22)%20OR%20advanced:%22title%20=%20100%25%22&qt=search&rows=20&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:15:53 GMT
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:05:19 GMT
      Etag:
      - '"MmMwZDZhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-004.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:15:53 GMT
- request:
    method: get
    uri: http://www.worldcat.org/webservices/catalog/search/sru?maximumRecords=1&query=srw.kw%20=%20%22title%22%20AND%20srw.kw%20=%20%22=%22%20AND%20srw.kw%20=%20%22100%25%22&recordSchema=info:srw/schema/1/dc&servicelevel=full&wskey=ydY1RXi9Lx7wmUjJVYi3QlCwUEXxDmJEO5Lrvwf9nLX9vn9dnX3OeHseVTPpxjjTWajSn3r4L70jpUW4
    body:
      encoding: UTF-8
      string: ''
    headers:
      User-Agent:
      - HTTPClient/1.0 (2.8.3, ruby 2.5.5 (2019-03-15))
      Accept:
      - "*/*"
      Date:
      - Fri, 17 Jan 2020 14:15:53 GMT
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      Content-Type:
      - text/xml;charset=utf-8
      Content-Length:
      - '879'
      Date:
      - Fri, 17 Jan 2020 14:15:52 GMT
    body:
      encoding: UTF-8
      string: |
        <?xml version="1.0" ?><?xml-stylesheet type="text/xsl" href="/webservices/catalog/xsl/searchRetrieveResponse.xsl"?><searchRetrieveResponse xmlns="http://www.loc.gov/zing/srw/">
        <version>1.1</version>
        <numberOfRecords>0</numberOfRecords>
        <diagnostics><diagnostic xmlns="http://www.loc.gov/zing/srw/diagnostic/">
          <uri>info:srw/diagnostic/1/27</uri>
          <details>srw.kw</details>
          <message>The index [srw.kw] did not include a searchable value</message>
          </diagnostic>
        </diagnostics>
        <echoedSearchRetrieveRequest>
        <maximumRecords>1</maximumRecords><query>srw.kw = &quot;title&quot; AND srw.kw = &quot;=&quot; AND srw.kw = &quot;100%&quot;</query><recordSchema>info:srw/schema/1/dc</recordSchema><servicelevel>full</servicelevel><wskey>ydY1RXi9Lx7wmUjJVYi3QlCwUEXxDmJEO5Lrvwf9nLX9vn9dnX3OeHseVTPpxjjTWajSn3r4L70jpUW4</wskey></echoedSearchRetrieveRequest>
        </searchRetrieveResponse>
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:15:53 GMT
- request:
    method: get
    uri: http://api.summon.serialssolutions.com/2.0.0/search?s.cmd=setHoldingsOnly(true)&s.he=__BENTO_HL_END__&s.hs=__BENTO_HL_START__&s.ps=1&s.q=title%20=%20100%25
    body:
      encoding: UTF-8
      string: ''
    headers:
      User-Agent:
      - HTTPClient/1.0 (2.8.3, ruby 2.5.5 (2019-03-15))
      Accept:
      - application/json
      Date:
      - Fri, 17 Jan 2020 14:15:53 GMT
      Content-Type:
      - application/x-www-form-urlencoded; charset=utf8
      X-Summon-Date:
      - Fri, 17 Jan 2020 14:15:53 GMT
      Authorization:
      - Summon cornell;c9kAjh3mb6rWZLHJrKS+XIolRok=
      Host:
      - api.summon.serialssolutions.com:80
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 17 Jan 2020 14:15:54 GMT
      Datacenter:
      - DFW1
    body:
      encoding: UTF-8
      string: '{"version": "2.0.0","sessionId": "1cd70be9-3066-4b6d-8646-fc0a708fe811","elapsedQueryTime":
        660,"queryTime": 654,"totalRequestTime": 663,"pageCount": 4065876,"recordCount":
        4065876,"query": {"queryString": "s.fvf=ContentType%2CNewspaper+Article%2Ct&s.hs=__BENTO_HL_START__&s.secure=f&s.link.rule.version=Default&s.dailyCatalog=t&s.q=title+%3D+100%25&s.ho=t&s.ps=1&s.he=__BENTO_HL_END__","pageNumber":
        1,"pageSize": 1,"highlightStartDelimiter": "__BENTO_HL_START__","highlightEndDelimiter":
        "__BENTO_HL_END__","isHoldingsOnlyEnabled": true,"textQueries": [{"textQuery":
        "title = 100%","removeCommand": "removeTextQuery(title = 100%)"}],"searchTerms":
        [],"textFilters": [],"rangeFilters": [],"facetValueFilters": [{"fieldName":
        "ContentType","value": "Newspaper Article","isNegated": true,"removeCommand":
        "removeFacetValueFilter(ContentType,Newspaper Article)","negateCommand": "negateFacetValueFilter(ContentType,Newspaper
        Article)"}],"inclusiveFacetValueFilters": [],"facetValueGroupFilters": [],"facetFields":
        [],"rangeFacetFields": [],"sort": []},"facetFields": [],"rangeFacetFields":
        [],"didYouMeanSuggestions": [],"recommendationLists": {},"documents": [{"hasFullText":
        true,"isFullTextHit": false,"isPrint": false,"inHoldings": true,"openUrl":
        "ctx_ver=Z39.88-2004&ctx_enc=info%3Aofi%2Fenc%3AUTF-8&rfr_id=info%3Asid%2Fsummon.serialssolutions.com&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&rft.genre=article&rft.atitle=Need+Authorities+For+The+Gray+Zone%3F&rft.jtitle=PRISM&rft.au=JAMES+Q.+ROBERTS&rft.date=2016-01-01&rft.pub=Center+for+Complex+Operations&rft.issn=2157-0663&rft.eissn=2157-0671&rft.volume=6&rft.issue=3&rft.spage=20&rft.epage=33&rft.externalDocID=26470462","link":
        "http://cornell.summon.serialssolutions.com/2.0.0/link/0/eLvHCXMwrV1NT9wwELWgVSUupaVUUGg1hwouhNqJ4yS9IGh3CxIsoA1QcbEc21EFW7IN6QGJX8yvwJOPLYIKceCSQ2JZjuZ5ZjR-fkPIZ6ZNRDOLZ-pCeDwTxosFF16uqYponNu4aTZxEB6e8KN--HOKHHZ3YVr7dm6x9tWm0Fgm_4KhxY9Q8Xxj_MfDxlF4wNp10VBtdwU8pPFFNE1esoAJBD31jidlF4pCrLU2pYt1SPxC_c-GifjAG9chpj9LrifChEgsmfCTihKJKHeI152C47P-xxvyuk1NYbPB0lsyZS_myMJeLeNdXsEKDJSDJbTe4B25GbjIB1hjK8palxX6RQkOd_CjVFdwWlzYja8wrIoxnPyq-1CsA3ITHKrWwIW7MThXU17aUQ5VAVJu9QbpvtzelcPUZdlSpojjO697g-9S_mcco_T-qHWcf7QGqTq3MCx-2ydP77YzrnZkcXGrpYXNCnaqeZL2e-m3ba9tHeGdhZR7fhbrPKSBYdwmWcC1yHwt_FxYHwX7YhbqILZGJy5fstwyQY1mips4yn338IMFAkZpI5SxOowpV0plWcKUMLlKIpdSZskieV_DRo4bWRDpUssIr_oukuXO7LJ1CJfyn80_PP55icy4nEw0NLZl8qIq_9qP5FWLtk81mm8Bz68FrQ","ExternalDocumentID":
        ["4287844041","26470462"],"Issue": ["3"],"DBID": ["7XB","M2L","88F","PQEST","ARAPS","3V.","M1Q","Q9U","P62","DPSOV","BENPR","DWQXO","ALSLI","P5Z","KC-","HCIFZ","8FE","ABUWG","BGLVJ","8FG","0-V","PQQKQ","8FK","PQUKI"],"IngestDate":
        ["Tue Aug 13 18:14:59 EDT 2019","Thu Sep 26 15:37:01 EDT 2019"],"PublicationDate_xml":
        [{"month": "1","year": "2016","text": "20160101","day": "1"}],"Score": ["17.508509"],"DatabaseTitleList":
        ["Advanced Technologies & Aerospace Collection"],"URI": ["https://www.jstor.org/stable/26470462","https://search.proquest.com/docview/1853272364"],"PublicationPlace_xml":
        [{"name": "Washington"}],"PublicationPlace": ["Washington"],"Publisher_xml":
        [{"name": "Center for Complex Operations"},{"name": "National Defense University
        Press"}],"ID": ["FETCH-LOGICAL-j504-2b8cf503d14e9b34c6b2c62f6e22859815c38edc9750e4e160dc1a4d87f2d8723"],"GeographicLocations":
        ["United States--US"],"PQPubID": ["1036428"],"Publisher": ["Center for Complex
        Operations","National Defense University Press"],"AbstractList": ["  [...]many
        County Teams today have a representative from the Justice Department or the
        Federal Bureau of Investigation, usually known as the Legal Attaché (Legatt),
        assigned to the Embassy. [...]an approach strengthens the partner nation''s
        legitimacy by enabling it to demonstrate to its population, and to the world,
        that it is capable of coherent action in defense of its nation, even when
        the enemy is hiding his operations in the shadows of the Gray Zone. Because
        of the United States'' conventional (and nuclear) military overmatch against
        any near peer competitor for the foreseeable future it is likely that state
        competitors will continue to employ and refine their non-attributable Gray
        Zone capabilities for the next several decades."],"Language": ["English"],"EISSN":
        ["2157-0671"],"Author": ["JAMES Q. ROBERTS"],"ISSN": ["2157-0663"],"PublicationCentury":
        ["2000"],"PublicationDecade": ["2010"],"IsScholarly": ["true"],"Snippet":
        ["... to act. Short of war and beyond the parameters set by the 2001 Congressional
        \"Authorization for the Use of Military Force\" (AUMF) we may judge our __BENTO_HL_START__Title__BENTO_HL_END__
        10..."],"PublicationTitle": ["PRISM"],"ProviderPackageCode": ["ABBHK","JFNAL","JADSL","AFKRA","88F","PQEST","ARALO","ARAPS","3V.","M1Q","Q9U","DPSOV","P62","HCIFZ","KC-","P5Z","ABUWG","BGLVJ","PQQKQ","PQUKI","7XB","PROAC","M2L","BENPR","BPHCQ","ALSLI","DWQXO","8FE","0-V","8FG","8FK"],"SubjectTerms":
        ["FEATURES","Law enforcement","Diplomatic & consular services","Funding","National
        security","Defense"],"Discipline": ["Military & Naval Science"],"Volume":
        ["6"],"ContentType": ["Journal Article"],"SourceType": ["Aggregation Database","Publisher"],"Author_xml":
        [{"sequence": "1","fullname": "JAMES Q. ROBERTS"}],"Abstract": ["  [...]many
        County Teams today have a representative from the Justice Department or the
        Federal Bureau of Investigation, usually known as the Legal Attaché (Legatt),
        assigned to the Embassy. [...]an approach strengthens the partner nation''s
        legitimacy by enabling it to demonstrate to its population, and to the world,
        that it is capable of coherent action in defense of its nation, even when
        the enemy is hiding his operations in the shadows of the Gray Zone. Because
        of the United States'' conventional (and nuclear) military overmatch against
        any near peer competitor for the foreseeable future it is likely that state
        competitors will continue to employ and refine their non-attributable Gray
        Zone capabilities for the next several decades."],"PublicationYear": ["2016"],"StartPage":
        ["20"],"SourceID": ["proquest","jstor"],"GeographicLocations_xml": [{"name":
        "United States--US"}],"SSID": ["ssj0000399253"],"Title": ["Need Authorities
        For The Gray Zone?"],"PublicationDate": ["20160101","20160901"],"DatabaseTitle":
        ["Advanced Technologies & Aerospace Collection","Social Science Premium Collection","ProQuest
        Political Science","Technology Collection","ProQuest Central Basic","ProQuest
        Advanced Technologies & Aerospace Collection","ProQuest One Academic Eastern
        Edition","ProQuest Central (Alumni Edition)","SciTech Premium Collection","ProQuest
        Technology Collection","Politics Collection","ProQuest Military Collection
        (Alumni Edition)","ProQuest Military Collection","ProQuest SciTech Collection","ProQuest
        Central","Advanced Technologies & Aerospace Database","ProQuest Social Sciences
        Premium Collection","ProQuest One Academic UKI Edition","ProQuest Central
        Korea","ProQuest Politics Collection","ProQuest One Academic","ProQuest Central
        (Alumni)"],"EndPage": ["33"],"Subtitle": ["Stop Whining. Instead, Help Yourself
        to __BENTO_HL_START__Title__BENTO_HL_END__ __BENTO_HL_START__100__BENTO_HL_END__.
        Hell, Take Some __BENTO_HL_START__Title__BENTO_HL_END__ 200 While You''re
        At It"],"MergedId": ["FETCHMERGED-LOGICAL-j504-2b8cf503d14e9b34c6b2c62f6e22859815c38edc9750e4e160dc1a4d87f2d8723"],"PQID":
        ["1853272364"],"IsPeerReviewed": ["false"],"thumbnail_s": ["http://covers-cdn.summon.serialssolutions.com/index.aspx?isbn=/sc.gif&issn=2157-0663&client=summon"],"thumbnail_m":
        ["http://covers-cdn.summon.serialssolutions.com/index.aspx?isbn=/mc.gif&issn=2157-0663&client=summon"],"thumbnail_l":
        ["http://covers-cdn.summon.serialssolutions.com/index.aspx?isbn=/lc.gif&issn=2157-0663&client=summon"],"Database_xml":
        [{"sequence": "1","dbid": "0-V","name": "ProQuest Social Sciences Premium
        Collection","url": "http://proxy.library.cornell.edu/login?url=http://search.proquest.com/socscicoll/socialsciences/fromDatabasesLayer?accountid=10267","sourceTypes":
        ["Aggregation Database"]}],"link.rule.ids": ["307,801,802,805,13166"],"LinkModel":
        ["DirectLink"],"IEDL.DBID": ["0-V"],"BookMark": ["ePnHCXMwY2LgBNYioCVV5sB8AmObGXPABj4MQEehmhpzMij7ActnBdBIUH4R-PRQBbf8IgVg6Ci4FyVWKkTl56Xa8zCwpgGjIZUXSnMzhLi5hjh76EJvCtDNMjUw0TVKskhOMzUwTjE0SbVMMjZJNksySjYzSjNLNQKdz2ZhaJpsbJGakmwJrB5TTVINzQxSkg0TTVIszNOMgAToqiJliLGw4jgeGpPF8aD6zMgcdMw6UJUsRBV44WJ8AeQ4iHhgk8IctMXTGACEEUPv"],"DatabaseName":
        ["ProQuest Central (purchase pre-March 2016)","Political Science Database","Military
        Database (Alumni Edition)","ProQuest One Academic Eastern Edition","Advanced
        Technologies & Aerospace Collection","ProQuest Central (Corporate)","Military
        Database","ProQuest Central Basic","ProQuest Advanced Technologies & Aerospace
        Collection","Politics Collection","ProQuest Central","ProQuest Central Korea","Social
        Science Premium Collection","Advanced Technologies & Aerospace Database","ProQuest
        Politics Collection","SciTech Premium Collection","ProQuest SciTech Collection","ProQuest
        Central (Alumni Edition)","Technology Collection","ProQuest Technology Collection","ProQuest
        Social Sciences Premium Collection","ProQuest One Academic","ProQuest Central
        (Alumni) (purchase pre-March 2016)","ProQuest One Academic UKI Edition"],"ParticipantIDs":
        ["proquest_journals_1853272364","jstor_primary_26470462"]}],"rollups": {"image":
        {},"reference": {},"newspaper": {}}}'
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:15:54 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.query=pub_date_facet:%5B2000%20TO%202020%5D&mm=1&q=(%2Badvanced:%22title%22%20%2Badvanced:%22=%22%20%2Badvanced:%22100%25%22)%20OR%20advanced:%22title%20=%20100%25%22&qt=search&rows=0&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:16:03 GMT
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '993'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:13:30 GMT
      Etag:
      - '"YTc0ZTFhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-004.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "responseHeader":{
            "zkConnected":true,
            "status":0,
            "QTime":357,
            "params":{
              "f.subject_content_facet.facet.limit":"6",
              "mm":"1",
              "f.author_facet.facet.limit":"6",
              "qt":"search",
              "f.fast_geo_facet.facet.limit":"6",
              "f.lc_alpha_facet.facet.limit":"6",
              "f.lc_callnum_facet.facet.limit":"-1",
              "sort":"score desc, pub_date_sort desc, title_sort asc",
              "f.location.facet.sort":"index",
              "rows":"0",
              "f.online.facet.limit":"3",
              "facet.query":["acquired_dt:[NOW-14DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-30DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-1YEAR TO NOW-7DAY]",
                "pub_date_facet:[1499 TO 1499]",
                "pub_date_facet:[1500 TO 1599]",
                "pub_date_facet:[1600 TO 1699]",
                "pub_date_facet:[1700 TO 1799]",
                "pub_date_facet:[1800 TO 1899]",
                "pub_date_facet:[1900 TO 1999]",
                "pub_date_facet:[2000 TO 2020]"],
              "f.location.facet.limit":"101",
              "q":"(+advanced:\"title\" +advanced:\"=\" +advanced:\"100%\") OR advanced:\"title = 100%\"",
              "defType":"edismax",
              "f.fast_era_facet.facet.limit":"6",
              "f.lc_callnum_facet.facet.sort":"count",
              "f.fast_topic_facet.facet.limit":"6",
              "f.fast_genre_facet.facet.limit":"6",
              "facet":"true",
              "wt":"json",
              "f.format.facet.limit":"11",
              "f.language_facet.facet.limit":"6"}},
          "response":{"numFound":42079,"start":0,"maxScore":1671437.5,"docs":[]
          },
          "facet_counts":{
            "facet_queries":{
              "acquired_dt:[NOW-14DAY TO NOW-7DAY ]":24,
              "acquired_dt:[NOW-30DAY TO NOW-7DAY ]":44,
              "acquired_dt:[NOW-1YEAR TO NOW-7DAY]":2847,
              "pub_date_facet:[1499 TO 1499]":1,
              "pub_date_facet:[1600 TO 1699]":168,
              "pub_date_facet:[1700 TO 1799]":340,
              "pub_date_facet:[1800 TO 1899]":530,
              "pub_date_facet:[1900 TO 1999]":17185,
              "pub_date_facet:[2000 TO 2020]":23729},
            "facet_fields":{
              "format":[
                "Book",39494,
                "Journal/Periodical",1122,
                "Video",916,
                "Thesis",515,
                "Microform",326,
                "Musical Score",129,
                "Map",55,
                "Manuscript/Archive",51,
                "Database",48,
                "Non-musical Recording",42,
                "Musical Recording",36],
              "online":[
                "Online",24052,
                "At the Library",18300],
              "language_facet":[
                "English",40372,
                "German",255,
                "French",238,
                "Chinese",99,
                "Russian",98,
                "Spanish",88],
              "location_facet":[
                "Library Annex",7240,
                "Olin Library",2918,
                "Mathematics Library",2797,
                "Uris Library",1187,
                "Kroch Library Asia",1138,
                "Mann Library",1136,
                "ILR Library",964,
                "Law Library",573,
                "Kroch Library Rare & Manuscripts",565,
                "Fine Arts Library",213]},
            "facet_ranges":{},
            "facet_intervals":{},
            "facet_heatmaps":{}}}
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:16:03 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&mm=1&q=Title:%20beef%20AND%20Title:%20100%25&qt=search&rows=20&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:16:07 GMT
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '7225'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:04:38 GMT
      Etag:
      - '"NTE2YTVhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-088.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "responseHeader":{
            "zkConnected":true,
            "status":0,
            "QTime":436,
            "params":{
              "f.subject_content_facet.facet.limit":"6",
              "f.fast_geo_facet.facet.limit":"6",
              "f.lc_alpha_facet.facet.limit":"6",
              "f.location.facet.sort":"index",
              "f.online.facet.limit":"3",
              "facet.query":["acquired_dt:[NOW-14DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-30DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-1YEAR TO NOW-7DAY]"],
              "defType":"edismax",
              "f.lc_callnum_facet.facet.sort":"count",
              "stats":"true",
              "f.fast_genre_facet.facet.limit":"6",
              "wt":"json",
              "f.format.facet.limit":"11",
              "stats.field":"pub_date_facet",
              "mm":"1",
              "f.author_facet.facet.limit":"6",
              "facet.field":["online",
                "format",
                "author_facet",
                "pub_date_facet",
                "workid_facet",
                "language_facet",
                "fast_topic_facet",
                "fast_geo_facet",
                "fast_era_facet",
                "fast_genre_facet",
                "subject_content_facet",
                "lc_alpha_facet",
                "location",
                "hierarchy_facet",
                "authortitle_facet",
                "lc_callnum_facet",
                "collection"],
              "qt":"search",
              "f.lc_callnum_facet.facet.limit":"-1",
              "sort":"score desc, pub_date_sort desc, title_sort asc",
              "rows":"20",
              "f.location.facet.limit":"101",
              "q":"Title: beef AND Title: 100%",
              "f.fast_era_facet.facet.limit":"6",
              "f.fast_topic_facet.facet.limit":"6",
              "facet":"true",
              "f.language_facet.facet.limit":"6"}},
          "response":{"numFound":417,"start":0,"maxScore":481691.25,"docs":[
              {
                "title_display":"Institutional meat purchase specifications for fresh beef",
                "fulltitle_display":"Institutional meat purchase specifications for fresh beef. Series 100",
                "subtitle_display":"Series 100",
                "pub_info_display":["Washington, DC : U. S. Dept. of Agriculture, Agricultural Marketing Service, Livestock Division,"],
                "language_display":["English."],
                "id":"1754680",
                "url_access_json":["{\"description\":\"HathiTrust (multiple volumes)\",\"url\":\"http://catalog.hathitrust.org/Record/009152949\"}"],
                "oclc_id_display":["22355963"],
                "availability_json":"{\"available\":true,\"online\":true,\"availAt\":{\"Library Annex\":\"HD9410.9.U5 A51\"}}",
                "pub_date_facet":1900,
                "format":["Journal/Periodical"],
                "online":["At the Library",
                  "Online"],
                "score":481691.25},
              {
                "title_display":"Beef 2007-08",
                "fulltitle_display":"Beef 2007-08",
                "subtitle_display":"",
                "pub_info_display":["Fort Collins, CO : United States Dept. of Agriculture, Animal and Plant Health Inspection Service, Veterinary Services, National Animal Health Monitoring System, [2008-   ]"],
                "pub_date_display":["[2008-   ]"],
                "language_display":["English."],
                "id":"6749620",
                "acquired_dt":"2009-11-11T00:00:00Z",
                "oclc_id_display":["298183796"],
                "availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"SF196.U6 B44 2008\"}}",
                "pub_date_facet":2008,
                "format":["Book"],
                "online":["At the Library"],
                "score":481520.88},
              {
                "author_display":"Obara, Kakuyu.",
                "title_display":"Japan's beef market",
                "fulltitle_display":"Japan's beef market",
                "subtitle_display":"",
                "pub_info_display":["[Washington, DC] : U.S. Dept. of Agriculture, Economic Research Service, [2010]"],
                "pub_date_display":["[2010]"],
                "language_display":["English."],
                "id":"7687563",
                "url_access_display":["http://purl.fdlp.gov/GPO/gpo6104|Available from the U.S. Government Printing Office."],
                "url_access_json":["{\"providercode\":\"PRVLSH\",\"dbcode\":\"ACAJP\",\"description\":\"Available from the U.S. Government Printing Office.\",\"url\":\"http://purl.fdlp.gov/GPO/gpo6104\"}"],
                "acquired_dt":"2012-05-10T00:00:00Z",
                "oclc_id_display":["712589957"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":2010,
                "format":["Book"],
                "online":["Online"],
                "score":464163.78},
              {
                "title_display":"Beef 2007-08",
                "fulltitle_display":"Beef 2007-08 : an indepth look at the U.S. beef cow-calf industry",
                "subtitle_display":"an indepth look at the U.S. beef cow-calf industry",
                "pub_info_display":["[Fort Collins, Colo.] : U.S. Dept. of Agriculture, Animal and Plant Health Inspection Service, [2007]"],
                "pub_date_display":["[2007]"],
                "language_display":["English."],
                "id":"10590259",
                "url_access_json":["{\"providercode\":\"PRVLSH\",\"dbcode\":\"ACAJP\",\"description\":\"Available from the U.S. Government Printing Office\",\"url\":\"http://purl.access.gpo.gov/GPO/LPS93104\"}"],
                "acquired_dt":"2018-12-13T00:00:00Z",
                "oclc_id_display":["224443260"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":2007,
                "format":["Book"],
                "online":["Online"],
                "score":439227.53},
              {
                "title_display":"Corned beef and food safety",
                "fulltitle_display":"Corned beef and food safety",
                "subtitle_display":"",
                "pub_info_display":["[Washington, D.C.] : U.S. Dept. of Agriculture, Food Safety and Inspection Service, [2011]"],
                "pub_date_display":["[2011]"],
                "language_display":["English."],
                "id":"7704759",
                "edition_display":["Rev. June 2011."],
                "url_access_json":["{\"providercode\":\"PRVLSH\",\"dbcode\":\"ACAJP\",\"description\":\"Available from the U.S. Government Printing Office.\",\"url\":\"http://purl.fdlp.gov/GPO/gpo19087\"}"],
                "acquired_dt":"2012-05-15T00:00:00Z",
                "oclc_id_display":["776887565"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":2011,
                "format":["Book"],
                "online":["Online"],
                "score":437909.88},
              {
                "author_display":"Ferber, Edna.",
                "title_display":"Roast Beef, Medium",
                "fulltitle_display":"Roast Beef, Medium",
                "subtitle_display":"",
                "pub_info_display":["[S.l.] : World eBook Library, 2005."],
                "pub_date_display":["2005"],
                "id":"10844608",
                "url_access_json":["{\"providercode\":\"PRVEBS\",\"dbcode\":\"ACZ\",\"description\":\"Full text available from Literary Reference Center Connect to text.\",\"ssid\":\"ssib001755336\",\"url\":\"http://proxy.library.cornell.edu/login?url=https://search.ebscohost.com/direct.asp?db=lfh&jid=2C6L&scope=site\"}"],
                "acquired_dt":"2019-05-14T00:00:00Z",
                "oclc_id_display":["1101391741"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":2005,
                "format":["Book"],
                "online":["Online"],
                "score":437644.7},
              {
                "title_display":"Ground beef and food safety",
                "fulltitle_display":"Ground beef and food safety",
                "subtitle_display":"",
                "pub_info_display":["[Washington, D.C.] : U.S. Dept. of Agriculture, Food Safety and Inspection Service, [2011]"],
                "pub_date_display":["[2011]"],
                "language_display":["English."],
                "id":"7704756",
                "edition_display":["Rev. May 2011."],
                "url_access_display":["http://purl.fdlp.gov/GPO/gpo19085|Available from the U.S. Government Printing Office."],
                "url_access_json":["{\"providercode\":\"PRVLSH\",\"dbcode\":\"ACAJP\",\"description\":\"Available from the U.S. Government Printing Office.\",\"url\":\"http://purl.fdlp.gov/GPO/gpo19085\"}"],
                "acquired_dt":"2012-05-15T00:00:00Z",
                "oclc_id_display":["776884722"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":2011,
                "format":["Book"],
                "online":["Online"],
                "score":437211.47},
              {
                "author_display":"Peel, Derrell S.",
                "title_display":"Cow-calf beef production in Mexico",
                "fulltitle_display":"Cow-calf beef production in Mexico",
                "subtitle_display":"",
                "pub_info_display":["[Washington, D.C.] : U.S. Dept. of Agriculture, Economic Research Service, [2010]"],
                "pub_date_display":["[2010]"],
                "language_display":["English."],
                "id":"7774528",
                "url_access_display":["http://purl.fdlp.gov/GPO/gpo24928|Available from the U.S. Government Printing Office."],
                "url_access_json":["{\"providercode\":\"PRVLSH\",\"dbcode\":\"ACAJP\",\"description\":\"Available from the U.S. Government Printing Office.\",\"url\":\"http://purl.fdlp.gov/GPO/gpo24928\"}"],
                "acquired_dt":"2012-08-10T00:00:00Z",
                "oclc_id_display":["798328663"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":2010,
                "format":["Book"],
                "online":["Online"],
                "score":431748.16},
              {
                "title_display":"Beef production medicine",
                "fulltitle_display":"Beef production medicine",
                "subtitle_display":"",
                "pub_info_display":["Canyon, Tex. : Palo Duro Consultation Research and Feedlot ; Amarillo, Tex. : Global Animal Products, Inc., c2004."],
                "pub_date_display":["c2004"],
                "language_display":["English."],
                "id":"5457307",
                "edition_display":["8th ed."],
                "acquired_dt":"2005-07-05T00:00:00Z",
                "oclc_id_display":["56958381"],
                "availability_json":"{\"available\":true,\"availAt\":{\"Veterinary Library (Schurman Hall)\":\"SF207 .B44 2004\"}}",
                "pub_date_facet":2004,
                "format":["Book"],
                "online":["At the Library"],
                "score":425018.3},
              {
                "author_display":"Walcott, Derek, author",
                "title_display":"Beef, no chicken",
                "fulltitle_display":"Beef, no chicken",
                "subtitle_display":"",
                "pub_info_display":["Alexandria, VA : Alexander Street Press, 2003."],
                "pub_date_display":["2003"],
                "language_display":["English."],
                "id":"10710109",
                "edition_display":["[First electronic edition]."],
                "url_access_display":["http://proxy.library.cornell.edu/login?url=http://www.aspresolver.com/aspresolver.asp?BLDR;PL005901|Available at Alexander Street Press Black Drama (Second Edition) Connect to online resource."],
                "url_access_json":["{\"providercode\":\"PRVAAS\",\"dbcode\":\"WBD\",\"description\":\"Available at Alexander Street Press Black Drama (Second Edition) Connect to online resource.\",\"url\":\"http://proxy.library.cornell.edu/login?url=http://www.aspresolver.com/aspresolver.asp?BLDR;PL005901\"}"],
                "acquired_dt":"2019-03-05T00:00:00Z",
                "oclc_id_display":["593450708"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":2003,
                "format":["Book"],
                "online":["Online"],
                "score":409358.44},
              {
                "author_display":"Meister, Kathleen.",
                "title_display":"The beef controversy",
                "fulltitle_display":"The beef controversy",
                "subtitle_display":"",
                "pub_info_display":["New York, NY : American Council on Science and Health, c1993."],
                "pub_date_display":["c1993"],
                "language_display":["English."],
                "id":"2341644",
                "oclc_id_display":["29210493"],
                "availability_json":"{\"available\":true,\"availAt\":{\"Mann Library\":\"TX556.B4 M51 1993\"}}",
                "pub_date_facet":1993,
                "format":["Book"],
                "online":["At the Library"],
                "score":397289.12},
              {
                "author_display":"McBride, William D.",
                "title_display":"The diverse structure and organization of U.S. beef cow-calf farms",
                "fulltitle_display":"The diverse structure and organization of U.S. beef cow-calf farms",
                "subtitle_display":"",
                "pub_info_display":["[Washington, D.C.] : U.S. Dept. of Agriculture, Economic Research Service, [2011]"],
                "pub_date_display":["[2011]"],
                "language_display":["English."],
                "id":"7691705",
                "url_access_display":["http://purl.fdlp.gov/GPO/gpo9987|Available from the U.S. Government Printing Office."],
                "url_access_json":["{\"providercode\":\"PRVLSH\",\"dbcode\":\"ACAJP\",\"description\":\"Available from the U.S. Government Printing Office.\",\"url\":\"http://purl.fdlp.gov/GPO/gpo9987\"}"],
                "acquired_dt":"2012-05-11T00:00:00Z",
                "oclc_id_display":["741565553"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":2011,
                "format":["Book"],
                "online":["Online"],
                "score":396886.84},
              {
                "author_display":"Kuchler, Fred.",
                "title_display":"Did BSE announcements reduce beef purchases?",
                "fulltitle_display":"Did BSE announcements reduce beef purchases?",
                "subtitle_display":"",
                "pub_info_display":["[Washington, D.C.] : United States Dept. of Agriculture, Economic Research Service, [2006]"],
                "pub_date_display":["[2006]"],
                "language_display":["English."],
                "id":"7624015",
                "url_access_json":["{\"providercode\":\"PRVLSH\",\"dbcode\":\"ACAJP\",\"description\":\"Available from the U.S. Government Printing Office. Available from the U.S. Government Printing Office. View report\",\"url\":\"http://www.ers.usda.gov/publications/err34/\"}",
                  "{\"providercode\":\"PRVLSH\",\"dbcode\":\"ACAJP\",\"description\":\"Available from the U.S. Government Printing Office. Available from the U.S. Government Printing Office.\",\"url\":\"http://purl.access.gpo.gov/GPO/LPS97666\"}"],
                "acquired_dt":"2012-04-10T00:00:00Z",
                "oclc_id_display":["77535833"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":2006,
                "format":["Book"],
                "online":["Online"],
                "score":384734.38},
              {
                "author_display":"Cole, N. Andy.",
                "title_display":"Dietary management to decrease methane emissions from beef feedlots",
                "fulltitle_display":"Dietary management to decrease methane emissions from beef feedlots",
                "subtitle_display":"",
                "pub_info_display":["[Washington, D.C.] : USDA ARS, [2012]"],
                "pub_date_display":["[2012]"],
                "language_display":["English."],
                "id":"7890093",
                "url_access_json":["{\"providercode\":\"PRVLSH\",\"dbcode\":\"ACAJP\",\"description\":\"Available from the U.S. Government Printing Office.\",\"url\":\"http://purl.fdlp.gov/GPO/gpo27766\"}"],
                "acquired_dt":"2012-10-16T00:00:00Z",
                "oclc_id_display":["809109528"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":2012,
                "format":["Book"],
                "online":["Online"],
                "score":377351.22},
              {
                "title_display":"Let's talk about handling and preparing a beef brisket",
                "fulltitle_display":"Let's talk about handling and preparing a beef brisket",
                "subtitle_display":"",
                "pub_info_display":["[Washington, D.C.? : U.S. Dept. of Agriculture, Food Safety and Inspection Service, 2011]"],
                "pub_date_display":["2011"],
                "language_display":["English."],
                "id":"7696914",
                "url_access_display":["http://purl.fdlp.gov/GPO/gpo15180|Available from the U.S. Government Printing Office."],
                "url_access_json":["{\"providercode\":\"PRVLSH\",\"dbcode\":\"ACAJP\",\"description\":\"Available from the U.S. Government Printing Office.\",\"url\":\"http://purl.fdlp.gov/GPO/gpo15180\"}"],
                "acquired_dt":"2012-05-14T00:00:00Z",
                "oclc_id_display":["760917814"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":2011,
                "format":["Video"],
                "online":["Online"],
                "score":373898.4},
              {
                "title_display":"The Australian beef industry",
                "fulltitle_display":"The Australian beef industry",
                "subtitle_display":"",
                "pub_info_display":["Canberra : ABARE,"],
                "language_display":["English."],
                "id":"3285941",
                "oclc_id_display":["41903846"],
                "availability_json":"{\"available\":true,\"availAt\":{\"Mann Library\":\"HD9433.A8 A87\"}}",
                "pub_date_facet":1990,
                "format":["Journal/Periodical"],
                "online":["At the Library"],
                "score":369488.03},
              {
                "title_display":"Beef today",
                "fulltitle_display":"Beef today",
                "subtitle_display":"",
                "title_uniform_display":["Beef today (Philadelphia, Pa. : Online)|Beef today (Philadelphia, Pa. : Online)"],
                "pub_info_display":["Philadelphia, Pa. : Farm Journal, Inc., 1987-"],
                "pub_date_display":["1987-"],
                "language_display":["English."],
                "id":"7749619",
                "url_access_json":["{\"providercode\":\"PRVPQU\",\"dbcode\":\"ATCPS\",\"description\":\"Full text available from Agricultural & Environmental Science Collection: 09/01/2004 to 09/22/2008 Connect to text.\",\"ssid\":\"ssj0037672\",\"url\":\"http://proxy.library.cornell.edu/login?url=https://search.proquest.com/publication/45207\"}",
                  "{\"providercode\":\"PRVPQU\",\"dbcode\":\"M2O\",\"description\":\"Full text available from ProQuest Research Library: 09/01/2004 to 09/22/2008 Connect to text.\",\"ssid\":\"ssj0037672\",\"url\":\"http://proxy.library.cornell.edu/login?url=https://search.proquest.com/publication/45207\"}"],
                "acquired_dt":"2012-07-09T00:00:00Z",
                "oclc_id_display":["23594547"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":1987,
                "format":["Journal/Periodical"],
                "online":["Online"],
                "score":366609.16},
              {
                "author_display":"Marti, Daniel M.",
                "title_display":"Where's the (not) meat?",
                "fulltitle_display":"Where's the (not) meat? : byproducts from beef and pork production",
                "subtitle_display":"byproducts from beef and pork production",
                "pub_info_display":["[Washington, D.C.] : U.S. Dept. of Agriculture, [2011]"],
                "pub_date_display":["[2011]"],
                "language_display":["English."],
                "id":"7774159",
                "url_access_json":["{\"providercode\":\"PRVLSH\",\"dbcode\":\"ACAJP\",\"description\":\"Available from the U.S. Government Printing Office.\",\"url\":\"http://purl.fdlp.gov/GPO/gpo24560\"}"],
                "acquired_dt":"2012-08-10T00:00:00Z",
                "oclc_id_display":["796934342"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":2011,
                "format":["Book"],
                "online":["Online"],
                "score":366569.84},
              {
                "author_display":"Mumford, Herbert Windsor.",
                "title_display":"Beef production",
                "fulltitle_display":"Beef production",
                "subtitle_display":"",
                "pub_info_display":["[S.l.] : [s.n.], 1908."],
                "pub_date_display":["1908"],
                "id":"7597418",
                "url_access_json":["{\"providercode\":\"PRVHBD\",\"dbcode\":\"79B\",\"description\":\"Full text available from Biodiversity Heritage Library (BHL) Connect to text.\",\"ssid\":\"ssib008411281\",\"url\":\"https://www.biodiversitylibrary.org/title/58236\"}"],
                "acquired_dt":"2012-03-15T00:00:00Z",
                "oclc_id_display":["964880965"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":1908,
                "format":["Book"],
                "online":["Online"],
                "score":364212.5},
              {
                "title_display":"Dairy beef",
                "fulltitle_display":"Dairy beef : maximizing quality & profits",
                "subtitle_display":"maximizing quality & profits",
                "pub_info_display":["Oakland, Calif. : University of California, Agriculture and Natural Resources, c2003."],
                "pub_date_display":["c2003"],
                "language_display":["English."],
                "id":"5053961",
                "edition_display":["User's version 1.5"],
                "acquired_dt":"2004-05-21T00:00:00Z",
                "oclc_id_display":["56314019"],
                "availability_json":"{\"available\":true,\"availAt\":{\"Mann Library\":\"Disk SF208 .D12 2003\"}}",
                "pub_date_facet":2003,
                "format":["Computer File"],
                "online":["At the Library"],
                "score":361200.6}]
          },
          "facet_counts":{
            "facet_queries":{
              "acquired_dt:[NOW-1YEAR TO NOW-7DAY]":27},
            "facet_fields":{
              "online":[
                "At the Library",225,
                "Online",202],
              "format":[
                "Book",355,
                "Journal/Periodical",34,
                "Microform",15,
                "Video",13,
                "Thesis",12,
                "Musical Recording",7,
                "Computer File",5,
                "Manuscript/Archive",1,
                "Map",1,
                "Musical Score",1],
              "author_facet":[
                "Skinner, J. H. (John Harrison), 1874-1942",12,
                "United States. Department of Agriculture. Economic Research Service",11,
                "National Animal Health Monitoring System (U.S.)",9,
                "King, F. G. (Franklin George), 1884-",7,
                "United States. Agricultural Research Service",6,
                "United States. Animal and Plant Health Inspection Service. Veterinary Services",6],
              "pub_date_facet":[
                "2011",10,
                "2012",10,
                "1960",8,
                "1995",8,
                "1800",7,
                "1964",7,
                "1973",7,
                "1974",7,
                "2013",7,
                "1790",6],
              "workid_facet":[
                "355214748",3,
                "4575410",3,
                "641615",3,
                "16433426",2,
                "16436866",2,
                "1843811707",2,
                "320540771",2,
                "341746795",2,
                "376646376",2,
                "41850957",2],
              "language_facet":[
                "English",355,
                "Spanish",7,
                "German",4,
                "French",2,
                "Russian",2,
                "Arabic",1],
              "fast_topic_facet":[
                "Beef cattle",53,
                "Beef cattle > Feeding and feeds",51,
                "Cattle trade",23,
                "Meat industry and trade",22,
                "Beef",19,
                "Beef industry",18],
              "fast_geo_facet":[
                "United States",80,
                "Great Britain",18,
                "Florida",15,
                "California",6,
                "Ireland",6,
                "Kansas",6],
              "fast_era_facet":[
                "1775 - 1783",10,
                "1700 - 1799",3,
                "1789 - 1820",3,
                "1600 - 1699",2,
                "1991 - 2000",2,
                "1812 - 1815",1],
              "fast_genre_facet":[
                "Periodicals",25,
                "Early works",20,
                "Conference papers and proceedings",17,
                "History",17,
                "Statistics",12,
                "Documentary films",5],
              "subject_content_facet":[
                "Non-Fiction (books)",257],
              "lc_alpha_facet":[],
              "location":[
                "Africana Library",1,
                "Africana Library > Main Collection",1,
                "ILR Library",1,
                "ILR Library > Main Collection",1,
                "ILR Library Kheel Center",1,
                "ILR Library Kheel Center > Main Collection",1,
                "Kroch Library Asia",3,
                "Kroch Library Asia > Main Collection",3,
                "Kroch Library Rare & Manuscripts",8,
                "Kroch Library Rare & Manuscripts > Main Collection",4,
                "Kroch Library Rare & Manuscripts > Request in Advance",4,
                "Library Annex",174,
                "Mann Library",23,
                "Mann Library > Ellis Collection",1,
                "Mann Library > Main Collection",21,
                "Mann Library > Reference",1,
                "Music Library",1,
                "Music Library > A/V",1,
                "Olin Library",11,
                "Olin Library > Main Collection",10,
                "Olin Library > Maps",1,
                "Uris Library",3,
                "Uris Library > Main Collection",3,
                "Veterinary Library",4,
                "Veterinary Library > Main Collection",4],
              "hierarchy_facet":[],
              "authortitle_facet":[
                "Gunston, Daniel. | Jemmy Twitcher's jests",4,
                "New York State College of Agriculture. Department of Agricultural Economics. | A.E.",4,
                "Ensminger, M. Eugene. | Beef cattle husbandry",3,
                "Skinner, J. H. (John Harrison), 1874-1942. | Cattle feeding",3,
                "Connecticut. Governor (1769-1784 : Trumbull) | By the Honorable Jonathan Trumbull, Esq; governor of the English colony of Connecticut, in New-England, in America: a proclamation",2,
                "Connecticut. Governor (1769-1784 : Trumbull) | By the Honorable Jonathan Trumbull, Esquire, governor of the English colony of Connecticut, in New-England, in America; a proclamation",2,
                "Eckardt, Clarence W. | Beef production in the East",2,
                "Hereford herd-book society. | Hereford cattle",2,
                "Massachusetts. General Court. | Commonwealth of Massachusetts. In the House of Representatives, June 22, 1781",2,
                "Massachusetts. General Court. | State of Massachusetts-Bay",2],
              "lc_callnum_facet":[
                "S - Agriculture",150,
                "S - Agriculture:SF - Animal Culture",78,
                "S - Agriculture:S - Agriculture (General)",74,
                "S - Agriculture:S - Agriculture (General):S21-400.5 - Documents and other collections",68,
                "S - Agriculture:SF - Animal Culture:SF191-275 - Cattle",66,
                "H - Social Sciences",60,
                "H - Social Sciences:HD - Industries, Land use, Labor",53,
                "H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades",46,
                "H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades:HD9000-9495 - Agricultural industries",46,
                "T - Technology",24,
                "A - General",23,
                "A - General:AC - Collections, Series, Collected works",22,
                "A - General:AC - Collections, Series, Collected works:AC1-195 - Collections of monographs, essays, etc.",22,
                "A - General:AC - Collections, Series, Collected works:AC1-195 - Collections of monographs, essays, etc.:AC1-8 - American and English",22,
                "T - Technology:TX - Home Economics",11,
                "H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture",10,
                "T - Technology:TS - Manufactures",9,
                "T - Technology:TS - Manufactures:TS1950-1982 - Animal products",9,
                "Z - Bibliography, Library Science, Information Resources",8,
                "Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources",7,
                "Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography",7,
                "K - Law",6,
                "S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine",6,
                "Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography:Z1201-1946 - America",6,
                "Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography:Z1201-1946 - America:Z1215-1363 - United States",6,
                "K - Law:KF-KFZ - The United States",5,
                "K - Law:KF-KFZ - The United States:KF - Federal law.  Common and collective state law",5,
                "T - Technology:TX - Home Economics:TX341-641 - Nutrition.  Foods and food supply",5,
                "H - Social Sciences:HG - Finance",4,
                "S - Agriculture:S - Agriculture (General):S530-559 - Agricultural education",4,
                "T - Technology:TX - Home Economics:TX642-840 - Cooking",4,
                "D - World History",3,
                "Q - Science",3,
                "R - Medicine",3,
                "S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF756.5-769.5 - Special preclinical sciences",3,
                "T - Technology:TH - Building Construction",3,
                "T - Technology:TH - Building Construction:TH4021-4977 - Buildings (Construction with reference to use)",3,
                "D - World History:DS - Asia",2,
                "H - Social Sciences:HB - Economic Theory, Demography",2,
                "H - Social Sciences:HG - Finance:HG4501-6051 - Investment, capital formation, speculation",2,
                "H - Social Sciences:HG - Finance:HG4501-6051 - Investment, capital formation, speculation:HG6001-6051 - Speculation",2,
                "R - Medicine:RC - Internal Medicine",2,
                "R - Medicine:RC - Internal Medicine:RC109-216 - Infectious and parasitic diseases",2,
                "S - Agriculture:SF - Animal Culture:SF105-109 - Breeding and breeds",2,
                "S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF951-997.5 - Diseases of special classes of animals",2,
                "S - Agriculture:SF - Animal Culture:SF91 - Housing and environmental control",2,
                "T - Technology:TX - Home Economics:TX901-946.5 - Hospitality industry.  Hotels, clubs, restaurants, etc.  Food service",2,
                "B - Philosophy, Psychology, Religion",1,
                "B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism",1,
                "B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions",1,
                "B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental",1,
                "B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism",1,
                "B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1212.32-1215 - Doctrines.  Theology",1,
                "D - World History:DS - Asia:DS101-151 - Israel (Palestine).  The Jews",1,
                "D - World History:DS - Asia:DS101-151 - Israel (Palestine).  The Jews:DS114-128.2 - History",1,
                "D - World History:DS - Asia:DS41-66 - Middle East.  Southwestern Asia.  Ancient Orient.  Arab East.  Near East",1,
                "D - World History:DS - Asia:DS41-66 - Middle East.  Southwestern Asia.  Ancient Orient.  Arab East.  Near East:DS51-54.95 - Local history and description",1,
                "D - World History:DT - Africa",1,
                "D - World History:DT - Africa:DT43-154 - Egypt",1,
                "D - World History:DT - Africa:DT43-154 - Egypt:DT74-107.87 - History",1,
                "G - Geography, Anthropology, Recreation",1,
                "G - Geography, Anthropology, Recreation:G - Geography (General)",1,
                "G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps",1,
                "G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country",1,
                "G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G3290-5667 - America.  Western Hemisphere",1,
                "G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G3290-5667 - America.  Western Hemisphere:G3300-5184 - North America",1,
                "G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G3290-5667 - America.  Western Hemisphere:G3300-5184 - North America:G4900-5184 - West Indies",1,
                "H - Social Sciences:HE - Transportation & Communications",1,
                "H - Social Sciences:HE - Transportation & Communications:HE380.8-971 - Water transportation",1,
                "H - Social Sciences:HE - Transportation & Communications:HE380.8-971 - Water transportation:HE561-971 - Shipping",1,
                "H - Social Sciences:HF - Commerce",1,
                "H - Social Sciences:HF - Commerce:HF1701-2701 - Tariff.  Free trade.  Protectionism",1,
                "H - Social Sciences:HG - Finance:HG1501-3550 - Banking",1,
                "H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1811-2351 - Special classes of banks and financial institutions",1,
                "K - Law:KD-KDK - The United Kingdom and Ireland",1,
                "K - Law:KD-KDK - The United Kingdom and Ireland:KDC - Scotland",1,
                "M - Music",1,
                "M - Music:M - Music",1,
                "M - Music:M - Music:M1495-2199 - Vocal music",1,
                "M - Music:M - Music:M1495-2199 - Vocal music:M1497-1998 - Secular vocal music",1,
                "M - Music:M - Music:M1495-2199 - Vocal music:M1497-1998 - Secular vocal music:M1627-1853 - Folk, national and ethnic music",1,
                "M - Music:ML - Literature on music",1,
                "M - Music:ML - Literature on music:ML159-3785 - History and criticism",1,
                "M - Music:ML - Literature on music:ML159-3785 - History and criticism:ML3469-3541 - Popular music",1,
                "P - Language & Literature",1,
                "P - Language & Literature:PN - Literature (General)",1,
                "P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama",1,
                "P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1993-1999 - Motion pictures",1,
                "P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1993-1999 - Motion pictures:PN1997-1997.85 - Plays, scenarios, etc.",1,
                "Q - Science:QH - Natural History, Biology",1,
                "Q - Science:QH - Natural History, Biology:QH301-705.5 - Biology (General)",1,
                "Q - Science:QH - Natural History, Biology:QH301-705.5 - Biology (General):QH426-470 - Genetics",1,
                "Q - Science:QL - Zoology",1,
                "Q - Science:QL - Zoology:QL1-355 - General (incl geographical distribution)",1,
                "Q - Science:QR - Microbiology",1,
                "Q - Science:QR - Microbiology:QR100-130 - Microbial ecology",1,
                "R - Medicine:RA - Public Aspects of Medicine",1,
                "R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine",1,
                "R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA773-788 - Personal health and hygiene",1,
                "S - Agriculture:S - Agriculture (General):S419-482 - History",1,
                "S - Agriculture:S - Agriculture (General):S560-571.5 - Farm economics.  Farm management.  Agricultural mathematics",1,
                "S - Agriculture:SB - Plant Culture",1,
                "S - Agriculture:SB - Plant Culture:SB183-317 - Field crops",1,
                "S - Agriculture:SF - Animal Culture:SF101-103.5 - Brands and branding, and other means of identifying",1,
                "S - Agriculture:SF - Animal Culture:SF191-275 - Cattle:SF221-250 - Dairying",1,
                "S - Agriculture:SF - Animal Culture:SF41-55 - History",1,
                "T - Technology:TP - Chemical Technology",1,
                "T - Technology:TP - Chemical Technology:TP200-248 - Chemicals (Manufacture, use, etc.)",1,
                "Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography:Z2000-2959 - Europe",1,
                "Z - Bibliography, Library Science, Information Resources:ZA - Information Resources",1,
                "Z - Bibliography, Library Science, Information Resources:ZA - Information Resources:ZA4050-4775 - Information in specific formats or media",1,
                "Z - Bibliography, Library Science, Information Resources:ZA - Information Resources:ZA4050-4775 - Information in specific formats or media:ZA4050-4480 - Electronic information resources",1,
                "Z - Bibliography, Library Science, Information Resources:ZA - Information Resources:ZA4050-4775 - Information in specific formats or media:ZA4050-4480 - Electronic information resources:ZA4150-4380 - Computer network resources",1],
              "collection":[
                "Law Library",5]},
            "facet_ranges":{},
            "facet_intervals":{},
            "facet_heatmaps":{}},
          "stats":{
            "stats_fields":{
              "pub_date_facet":{
                "min":1686.0,
                "max":2015.0,
                "count":416,
                "missing":1,
                "sum":802861.0,
                "sumOfSquares":1.552331879E9,
                "mean":1929.954326923077,
                "stddev":82.82392606137779}}}}
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:16:07 GMT
- request:
    method: get
    uri: http://www.worldcat.org/webservices/catalog/search/sru?maximumRecords=1&query=srw.kw%20=%20%22Title:%22%20AND%20srw.kw%20=%20%22beef%22%20AND%20srw.kw%20=%20%22AND%22%20AND%20srw.kw%20=%20%22Title:%22%20AND%20srw.kw%20=%20%22100%25%22&recordSchema=info:srw/schema/1/dc&servicelevel=full&wskey=ydY1RXi9Lx7wmUjJVYi3QlCwUEXxDmJEO5Lrvwf9nLX9vn9dnX3OeHseVTPpxjjTWajSn3r4L70jpUW4
    body:
      encoding: UTF-8
      string: ''
    headers:
      User-Agent:
      - HTTPClient/1.0 (2.8.3, ruby 2.5.5 (2019-03-15))
      Accept:
      - "*/*"
      Date:
      - Fri, 17 Jan 2020 14:16:07 GMT
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      Content-Type:
      - text/xml;charset=utf-8
      Content-Length:
      - '3045'
      Date:
      - Fri, 17 Jan 2020 14:16:06 GMT
    body:
      encoding: UTF-8
      string: |
        <?xml version="1.0" encoding="UTF-8" standalone="no"?>
        <?xml-stylesheet type='text/xsl' href='/webservices/catalog/xsl/searchRetrieveResponse.xsl'?>

        <searchRetrieveResponse xmlns="http://www.loc.gov/zing/srw/" xmlns:oclcterms="http://purl.org/oclc/terms/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <version>1.1</version>
        <numberOfRecords>327</numberOfRecords>
        <records>
        <record>
        <recordSchema>info:srw/schema/1/dc</recordSchema>
        <recordPacking>xml</recordPacking>
        <recordData>
        <oclcdcs>
        <dc:contributor>Beef Knuckles,</dc:contributor>
        <dc:description>September 2009-</dc:description>
        <dc:description>Title from title screen (viewed on 17 September 2014)</dc:description>
        <dc:description>"Beef Knuckles is a small zine full of comics and and words. Each cover is hand screenprinted and we only make 100 or so."</dc:description>
        <dc:format>1 online resource</dc:format>
        <dc:identifier xsi:type="http://purl.org/dc/terms/URI">http://beefknuckles.wordpress.com</dc:identifier>
        <dc:language xsi:type="http://purl.org/dc/terms/ISO639-2">eng</dc:language>
        <dc:relation xsi:type="http://purl.org/dc/terms/URI">http://nla.gov.au/nla.arc-147811</dc:relation>
        <dc:relation>PANDORA electronic collection</dc:relation>
        <dc:relation>Mode of access: Available online. Address as at 17/09/14:</dc:relation>
        <dc:relation xsi:type="http://purl.org/dc/terms/URI">http://beefknuckles.wordpress.com</dc:relation>
        <dc:subject>Australian</dc:subject>
        <dc:subject xsi:type="http://purl.org/dc/terms/DDC">070.572</dc:subject>
        <dc:subject xsi:type="http://purl.org/dc/terms/LCSH">Zines--Australia.</dc:subject>
        <dc:subject xsi:type="http://purl.org/dc/terms/LCSH">Zines--Australia--Blogs.</dc:subject>
        <dc:title>Beef Knuckles.</dc:title>
        <dc:type>Text</dc:type>
        <oclcterms:recordContentSource>AU@</oclcterms:recordContentSource>
        <oclcterms:recordCreationDate xsi:type="http://purl.org/oclc/terms/marc008date">140919</oclcterms:recordCreationDate>
        <oclcterms:recordIdentifier>890998294</oclcterms:recordIdentifier>
        <oclcterms:languageOfCataloging xsi:type="http://purl.org/oclc/terms/iso639-2b">eng</oclcterms:languageOfCataloging>
        <oclcterms:recordTranscribingAgency>AU@</oclcterms:recordTranscribingAgency>
        <oclcterms:recordContentSource>rda</oclcterms:recordContentSource>
        </oclcdcs>
        </recordData>
        </record>
        </records>
        <nextRecordPosition>2</nextRecordPosition>
        <resultSetIdleTime/>
        <echoedSearchRetrieveRequest xmlns:srw="http://www.loc.gov/zing/srw/">
        <version>1.1</version>
        <query>srw.kw = "Title:" AND srw.kw = "beef" AND srw.kw = "AND" AND srw.kw = "Title:" AND srw.kw = "100%"</query>
        <maximumRecords>1</maximumRecords>
        <recordSchema>info:srw/schema/1/dc</recordSchema>
        <recordPacking>xml</recordPacking>
        <startRecord>1</startRecord>
        <sortKeys>relevance</sortKeys>
        <wskey>ydY1RXi9Lx7wmUjJVYi3QlCwUEXxDmJEO5Lrvwf9nLX9vn9dnX3OeHseVTPpxjjTWajSn3r4L70jpUW4</wskey>
        <servicelevel>full</servicelevel>
        </echoedSearchRetrieveRequest>
        </searchRetrieveResponse>
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:16:07 GMT
- request:
    method: get
    uri: http://api.summon.serialssolutions.com/2.0.0/search?s.cmd=setHoldingsOnly(true)&s.he=__BENTO_HL_END__&s.hs=__BENTO_HL_START__&s.ps=1&s.q=Title%5C:%20beef%20AND%20Title%5C:%20100%25
    body:
      encoding: UTF-8
      string: ''
    headers:
      User-Agent:
      - HTTPClient/1.0 (2.8.3, ruby 2.5.5 (2019-03-15))
      Accept:
      - application/json
      Date:
      - Fri, 17 Jan 2020 14:16:07 GMT
      Content-Type:
      - application/x-www-form-urlencoded; charset=utf8
      X-Summon-Date:
      - Fri, 17 Jan 2020 14:16:07 GMT
      Authorization:
      - Summon cornell;fKs2w7bCbmO+Aj+7G+Q0DrS8xfg=
      Host:
      - api.summon.serialssolutions.com:80
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 17 Jan 2020 14:16:06 GMT
      Datacenter:
      - DFW1
    body:
      encoding: UTF-8
      string: '{"version": "2.0.0","sessionId": "36a8c404-782a-4b73-8597-a75cb44f3366","elapsedQueryTime":
        166,"queryTime": 157,"totalRequestTime": 173,"pageCount": 215631,"recordCount":
        215631,"query": {"queryString": "s.fvf=ContentType%2CNewspaper+Article%2Ct&s.hs=__BENTO_HL_START__&s.secure=f&s.link.rule.version=Default&s.dailyCatalog=t&s.q=Title%5C%3A+beef+AND+Title%5C%3A+100%25&s.ho=t&s.ps=1&s.he=__BENTO_HL_END__","pageNumber":
        1,"pageSize": 1,"highlightStartDelimiter": "__BENTO_HL_START__","highlightEndDelimiter":
        "__BENTO_HL_END__","isHoldingsOnlyEnabled": true,"textQueries": [{"textQuery":
        "Title beef AND Title 100%","removeCommand": "removeTextQuery(Title beef AND
        Title 100%)"}],"searchTerms": [],"textFilters": [],"rangeFilters": [],"facetValueFilters":
        [{"fieldName": "ContentType","value": "Newspaper Article","isNegated": true,"removeCommand":
        "removeFacetValueFilter(ContentType,Newspaper Article)","negateCommand": "negateFacetValueFilter(ContentType,Newspaper
        Article)"}],"inclusiveFacetValueFilters": [],"facetValueGroupFilters": [],"facetFields":
        [],"rangeFacetFields": [],"sort": []},"facetFields": [],"rangeFacetFields":
        [],"didYouMeanSuggestions": [],"recommendationLists": {},"documents": [{"hasFullText":
        true,"isFullTextHit": true,"isPrint": false,"inHoldings": true,"openUrl":
        "ctx_ver=Z39.88-2004&ctx_enc=info%3Aofi%2Fenc%3AUTF-8&rfr_id=info%3Asid%2Fsummon.serialssolutions.com&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&rft.genre=article&rft.atitle=Availability+of+disaggregated+greenhouse+gas+emissions+from+beef+cattle+production%3A+A+systematic+review&rft.jtitle=Environmental+Impact+Assessment+Review&rft.au=Lynch%2C+John&rft.date=2019-05-01&rft.pub=Elsevier&rft.issn=0195-9255&rft.eissn=1873-6432&rft.volume=76&rft.spage=69&rft.epage=78&rft_id=info:doi/10.1016%2Fj.eiar.2019.02.003&rft_id=info%3Apmid%2F31388221&rft.externalDBID=5PM","link":
        "http://cornell.summon.serialssolutions.com/2.0.0/link/0/eLvHCXMwpV1Lb9NAEF5VSJXgAOUhSGmrPVTigKzY-7S5pW2iHqoCatpyW-3LqasqiRqKxE_gX7PjXbvJAQ5w9D6ktffzzKz9zTcIHVKhS8tylgXvozNmJM3KELdmWnJrGKspbbPer77wr9fscsK_baHjLhcGaJXJ9keb3lrr1DJMT3O4bJrhBaS6VQQUxcAMt4qfwRpDFYPJyVH_J0FUbT3cWJMwjE6JM5Hj5RsNmqBFFXU76Z-cU7LWvY_a5E-uOaTJC9T9_I00lJ7NtLgH2soaTbvTe_zPu95Bz1Poikdx3Eu05eev0LM1QcPX6Nfoh27uovT3T7yosWtWehaO9PCxzuEZkHxuFg8rj2d6haHUHHysW2FIcsFKHY3Pp5_V6Zm6mIY4Wynjfb3WOj4_UQrbVnYZL6NUbZj-CY_woyA1jsk4b9DlZDw9Ps1SsYesYDwYOmZYpTmpiCy59aJyQuqCGkKctaJmnLgQexTEGc9DiCVcXeW2KIwtpQugcjV9hzC3OatdLaXxFQuRnDbOh_OksM6WzBI-QB-77VXLKOahOpbbrQIwKACDyglIpg4Q7xCgNjZHBW_z13kfAC4KLESAh9Up0WEx96C1pUZcSpDgKfMBehuB1K-GFqGHkGKA5AbE-gGgBr7ZM29uWlVwIUpGhdz9x1W_R0_hKnI599CT7_cPfh9tJ9wetC_Vbz89LdU","ExternalDocumentID":
        ["A577388080","10_1016_j_eiar_2019_02_003","31388221","doi_10_1016_j_eiar_2019_02_003"],"DBID":
        ["AAFTH","NPM","CITATION","AAYXX","BSHEE","5PM"],"AuthorAffiliation_xml":
        [{"name": "Department of Physics, University of Oxford, UK"}],"PublicationTitleAlternate":
        ["Environ Impact Assess Rev"],"Score": ["12.045949"],"PublicationPlace": ["United
        States"],"ID": ["FETCH-LOGICAL-14587-4b49a5292785ce69d67a13b22dcc6f452d24012dbe58936df90c11bc87dcb4df3"],"DOI":
        ["10.1016/j.eiar.2019.02.003"],"Publisher": ["Elsevier Inc","Elsevier B.V","Elsevier"],"Language":
        ["English"],"EISSN": ["1873-6432"],"ISSN": ["0195-9255"],"IsScholarly": ["true"],"AuthorAffiliation":
        ["Department of Physics, University of Oxford, UK"],"SubjectTerms": ["Methane","Carbon
        dioxide equivalent","Nitrous oxide","Beef","Cattle","Greenhouse gas","Livestock
        industry","Global warming potential","Carbon dioxide","Beef industry","Environmental
        aspects","Ecological footprint","Greenhouse gases","Emissions (Pollution)","Analysis","Beef
        cattle","Air pollution","Agriculture","Global warming","Natural gas","LCA,
        Life Cycle Assessment","RE, Radiative Efficiency","CO2e, Carbon dioxide equivalent","GTP,
        Global Temperature change Potential","IPCC, Intergovernmental Panel on Climate
        Change","GWP, Global Warming Potential","GHG, Greenhouse gas","RF, Radiative
        Forcing","AR, Assessment Report"],"Discipline": ["Engineering","Agriculture"],"ContentType":
        ["Journal Article"],"References": ["Knapp, Laur, Vadas, Weiss, Tricarico (bb0160)
        2014; 97","Reisinger, Clark (bb0255) 2018; 24","Florindo, de Medeiros Florindo,
        Talamini, da Costa, Ruviaro (bb0100) 2017; 147","Capper (bb0040) 2012; 2","Etminan,
        Myhre, Highwood, Shine (bb0095) 2016; 43","Opio, Gerber, Mottet, Falcucci,
        Tempio, MacLeod, Vellinga, Henderson, Steinfeld (bb0220) 2013","Parajuli,
        Dalgaard, Birkved (bb0225) 2018; 619-620","Desjardins, Worth, Vergé, Maxime,
        Dyer, Cerkowniak (bb0080) 2012; 4","Ocko, Hamburg, Jacob, Keith, Keohane,
        Oppenheimer, Roy-Mayhew, Schrag, Pacala (bb0210) 2017; 356","de Vries, de
        Boer (bb0070) 2010; 128","Levasseur, Cavalett, Fuglestvedt, Gasser, Johansson,
        Jørgensen, Raugei, Reisinger, Schivley, Strømman, Tanaka, Cherubini (bb0165)
        2016; 71","Basarab, Baron, López-Campos, Aalhus, Haugen-Kozyra, Okine (bb0030)
        2012; 2","O''Neill (bb0215) 2000; 44","Picasso, Modernel, Becoña, Salvo, Gutiérrez,
        Astigarraga (bb0235) 2014; 98","McAfee, McSorley, Cuskelly, Fearon, Moss,
        Beattie, Wallace, Bonham, Strain (bb0170) 2011; 105","Persson, Johansson,
        Cederberg, Hedenus, Bryngelsson (bb0230) 2015; 10","Pierrehumbert, Eshel (bb0245)
        2015; 10","Fuglestvedt, Berntsen, Godal, Sausen, Shine, Skodvin (bb0105) 2003;
        58","Hünerberg, Little, Beauchemin, McGinn, O''Connor, Okine, Harstad, Kröbel,
        McAllister (bb0140) 2014; 127","Hawkins, Ma, Schilizzi, Zhang (bb0130) 2016;
        139","Dick, Abreu da Silva, Dewes (bb0085) 2015; 96","Eisler, Lee, Tarlton,
        Martin, Beddington, Dungait, Greathead, Liu, Mathew, Miller, Misselbrook,
        Murray, Vinod, Van Saun, Winter (bb0090) 2014; 507","Pierrehumbert (bb0240)
        2014; 42","Buratti, Fantozzi, Barbanera, Lascaro, Chiorri, Cecchini (bb0035)
        2017; 576","Myhre, Shindell, Bréon, Collins, Fuglestvedt, Huang, Koch, Larmarque,
        Lee, Mendoza, Nakajima, Robock, Stephens, Takemura, Zhang (bb0200) 2013","Cardoso,
        Berndt, Leytem, Alves, De Carvalho, De Barros Soares, Urquiaga, Boddey (bb0045)
        2016; 143","McAuliffe, Takahashi, Orr, Harris, Lee (bb0175) 2018; 171","Garnett
        (bb0115) 2009; 12","McClelland, Arndt, Gordon, Thoma (bb0180) 2018; 209","Alemu,
        Janzen, Little, Hao, Thompson, Baron, Iwaasa, Beauchemin, Kröbel (bb0010)
        2017; 158","Notarnicola, Sala, Anton, McLaren, Saouter, Sonesson (bb0205)
        2017; 140","US EIA (bb0315) 2018","Gerssen-Gondelach, Lauwerijssen, Havlík,
        Herrero, Valin, Faaij, Wicke (bb0125) 2017; 240","Jolliet, Antón, Boulay,
        Cherubini, Fantke, Levasseur, McKone, Michelsen, Milà i Canals, Motoshita,
        Pfister, Verones, Vigon, Frischknecht (bb0150) 2018; 23","Veysset, Lherm,
        Bébin (bb0320) 2010; 103","Daley, Abbott, Doyle, Nader, Larson (bb0065) 2010;
        9","Henchion, McCarthy, Resconi, Troy (bb0135) 2014; 98","Cherubini, Fuglestvedt,
        Gasser, Reisinger, Cavalett, Huijbregts, Johansson, Jørgensen, Raugei, Schivley,
        Strømman, Tanaka, Levasseur (bb0050) 2016; 64","McLeod (bb0185) 2015","Shine,
        Berntsen, Fuglestvedt, Skeie, Stuber (bb0280) 2007; 365","Smith, Sones, Grace,
        MacMillan, Tarawali, Herrero (bb0285) 2013; 3","Fuglestvedt, Rogelj, Millar,
        Allen, Boucher, Cain, Forster, Kriegler, Shindell (bb0110) 2018; 376","Springmann,
        Clark, Mason-D''Croz, Wiebe, Bodirsky, Lassaletta, de Vries, Vermeulen, Herrero,
        Carlson, Jonell, Troell, DeClerck, Gordon, Zurayk, Scarborough, Rayner, Loken,
        Fanzo, Godfray, Tilman, Rockström, Willett (bb0290) 2018; 562","Gasser, Peters,
        Fuglestvedt, Collins, Shindell, Ciais (bb0120) 2017; 8","Adewale, Reganold,
        Higgins, Evans, Carpenter-Boggs (bb0005) 2018; 71","Allen, Fuglestvedt, Shine,
        Reisinger, Pierrehumbert, Forster (bb0015) 2016; 6","Reisinger, Ledgard (bb0260)
        2013; 8","Rice, O''Brien, Shalloo, Holden (bb0270) 2017; 202","Clark, Tilman
        (bb0055) 2017; 12","Shine (bb0275) 2009; 96","de Vries, van Middelaar, de
        Boer (bb0075) 2015; 178","Moher, Liberati, Tetzlaff, Altman, The (bb0190)
        2009; 6","R Core Team (bb0250) 2018","Muñoz, Rigarlsford, i Canals, King (bb0195)
        2013; 18","Clune, Crossin, Verghese (bb0060) 2017; 140","Tsutsumi, Ono, Ogasawara,
        Hojito (bb0310) 2018; 172","Tilman, Clark (bb0305) 2014; 515","IPCC (bb0145)
        2006","Thornton (bb0300) 2010; 365","Archer, Brovkin (bb0025) 2008; 90","Allen,
        Shine, Fuglestvedt, Millar, Cain, Frame, Macey (bb0020) 2018; 1","Kamali,
        van der Linden, Meuwissen, Malafaia, Oude Lansink, de Boer (bb0155) 2016;
        146","Reisinger, Ledgard, Falconer (bb0265) 2017; 81","Stackhouse-Lawson,
        Rotz, Oltjen, Mitloehner (bb0295) 2012; 90"],"SourceType": ["Open Access Repository","Aggregation
        Database","Index Database","Publisher"],"PublicationYear": ["2019"],"StartPage":
        ["69"],"SourceID": ["pubmedcentral","gale","crossref","pubmed","elsevier"],"Copyright_xml":
        [{"notice": "The Author"},{"notice": "COPYRIGHT 2019 Elsevier B.V."},{"notice":
        "2019 The Author 2019"}],"SSID": ["ssj0016998"],"IsOpenAccess": ["true"],"Title":
        ["Availability of disaggregated greenhouse gas emissions from __BENTO_HL_START__beef__BENTO_HL_END__
        cattle production: A systematic review"],"DatabaseTitle": ["PubMed","CrossRef"],"EndPage":
        ["78"],"MergedId": ["FETCHMERGED-LOGICAL-14587-4b49a5292785ce69d67a13b22dcc6f452d24012dbe58936df90c11bc87dcb4df3"],"Copyright":
        ["The Author","COPYRIGHT 2019 Elsevier B.V.","2019 The Author 2019"],"License":
        ["This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/)."],"IngestDate":
        ["Sun Sep 22 11:52:07 EDT 2019","Mon May 06 00:24:40 EDT 2019","Mon Nov 04
        20:47:45 EST 2019","Mon Nov 04 09:25:11 EST 2019","Mon Aug 26 17:05:41 EDT
        2019"],"PublicationDate_xml": [{"month": "05","year": "2019","text": "May
        2019"}],"DatabaseTitleList": ["","","","PubMed"],"URI": ["https://www.sciencedirect.com/science/article/pii/S0195925518303603","https://www.ncbi.nlm.nih.gov/pubmed/31388221","http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=6684367&tool=pmcentrez&rendertype=abstract"],"PublicationPlace_xml":
        [{"name": "United States"}],"Publisher_xml": [{"name": "Elsevier Inc"},{"name":
        "Elsevier B.V"},{"name": "Elsevier"}],"AbstractList": ["Agriculture is a significant
        source of anthropogenic greenhouse gas (GHG) emissions, and beef cattle are
        particularly emissions intensive. GHG emissions are typically expressed as
        a carbon dioxide equivalent (CO e) ‘carbon footprint’ per unit output. The
        100-year Global Warming Potential (GWP ) is the most commonly used CO e metric,
        but others have also been proposed, and there is no universal reason to prefer
        GWP over alternative metrics. The weightings assigned to non-CO GHGs can differ
        significantly depending on the metric used, and relying upon a single metric
        can obscure important differences in the climate impacts of different GHGs.
        This loss of detail is especially relevant to beef production systems, as
        the majority of GHG emissions (as conventionally reported) are in the form
        of methane (CH ) and nitrous oxide (N O), rather than CO . This paper presents
        a systematic literature review of harmonised cradle to farm-gate beef carbon
        footprints from bottom-up studies on individual or representative systems,
        collecting the emissions data for each separate GHG, rather than a single
        CO e value. Disaggregated GHG emissions could not be obtained for the majority
        of studies, highlighting the loss of information resulting from the standard
        reporting of total GWP CO e alone. Where individual GHG compositions were
        available, significant variation was found for all gases. A comparison of
        grass fed and non-grass fed beef production systems was used to illustrate
        dynamics that are not sufficiently captured through a single CO e footprint.
        Few clear trends emerged between the two dietary groups, but there was a non-significant
        indication that under GWP non-grass fed systems generally appear more emissions
        efficient, but under an alternative metric, the 100-year global temperature
        potential (GTP ), grass-fed beef had lower footprints. Despite recent focus
        on agricultural emissions, this review concludes there are insufficient data
        available to fully address important questions regarding the climate impacts
        of agricultural production, and calls for researchers to include separate
        GHG emissions in addition to aggregated CO e footprints.","Agriculture is
        a significant source of anthropogenic greenhouse gas (GHG) emissions, and
        beef cattle are particularly emissions intensive. GHG emissions are typically
        expressed as a carbon dioxide equivalent (CO 2 e) ‘carbon footprint’ per unit
        output. The 100-year Global Warming Potential (GWP 100 ) is the most commonly
        used CO 2 e metric, but others have also been proposed, and there is no universal
        reason to prefer GWP 100 over alternative metrics. The weightings assigned
        to non-CO 2 GHGs can differ significantly depending on the metric used, and
        relying upon a single metric can obscure important differences in the climate
        impacts of different GHGs. This loss of detail is especially relevant to beef
        production systems, as the majority of GHG emissions (as conventionally reported)
        are in the form of methane (CH 4 ) and nitrous oxide (N 2 O), rather than
        CO 2 . This paper presents a systematic literature review of harmonised cradle
        to farm-gate beef carbon footprints from bottom-up studies on individual or
        representative systems, collecting the emissions data for each separate GHG,
        rather than a single CO 2 e value. Disaggregated GHG emissions could not be
        obtained for the majority of studies, highlighting the loss of information
        resulting from the standard reporting of total GWP 100 CO 2 e alone. Where
        individual GHG compositions were available, significant variation was found
        for all gases. A comparison of grass fed and non-grass fed beef production
        systems was used to illustrate dynamics that are not sufficiently captured
        through a single CO 2 e footprint. Few clear trends emerged between the two
        dietary groups, but there was a non-significant indication that under GWP
        100 non-grass fed systems generally appear more emissions efficient, but under
        an alternative metric, the 100-year global temperature potential (GTP 100
        ), grass-fed beef had lower footprints. Despite recent focus on agricultural
        emissions, this review concludes there are insufficient data available to
        fully address important questions regarding the climate impacts of agricultural
        production, and calls for researchers to include separate GHG emissions in
        addition to aggregated CO 2 e footprints. • Multi-gas footprints are typically
        converted to a total carbon dioxide equivalent. • Different carbon dioxide
        equivalence metrics emphasize different climate behaviours. • Reporting emissions
        of all gases as a combined total loses important information. • Disaggregated
        data could not be retrieved from most (71%) full beef LCAs. • Relative emissions
        intensity is highly dependent on metric choice.","Agriculture is a significant
        source of anthropogenic greenhouse gas (GHG) emissions, and beef cattle are
        particularly emissions intensive. GHG emissions are typically expressed as
        a carbon dioxide equivalent (CO.sub.2e) ''carbon footprint'' per unit output.
        The 100-year Global Warming Potential (GWP.sub.100) is the most commonly used
        CO.sub.2e metric, but others have also been proposed, and there is no universal
        reason to prefer GWP.sub.100 over alternative metrics. The weightings assigned
        to non-CO.sub.2 GHGs can differ significantly depending on the metric used,
        and relying upon a single metric can obscure important differences in the
        climate impacts of different GHGs. This loss of detail is especially relevant
        to beef production systems, as the majority of GHG emissions (as conventionally
        reported) are in the form of methane (CH.sub.4) and nitrous oxide (N.sub.2O),
        rather than CO.sub.2. This paper presents a systematic literature review of
        harmonised cradle to farm-gate beef carbon footprints from bottom-up studies
        on individual or representative systems, collecting the emissions data for
        each separate GHG, rather than a single CO.sub.2e value. Disaggregated GHG
        emissions could not be obtained for the majority of studies, highlighting
        the loss of information resulting from the standard reporting of total GWP.sub.100
        CO.sub.2e alone. Where individual GHG compositions were available, significant
        variation was found for all gases. A comparison of grass fed and non-grass
        fed beef production systems was used to illustrate dynamics that are not sufficiently
        captured through a single CO.sub.2e footprint. Few clear trends emerged between
        the two dietary groups, but there was a non-significant indication that under
        GWP.sub.100 non-grass fed systems generally appear more emissions efficient,
        but under an alternative metric, the 100-year global temperature potential
        (GTP.sub.100), grass-fed beef had lower footprints. Despite recent focus on
        agricultural emissions, this review concludes there are insufficient data
        available to fully address important questions regarding the climate impacts
        of agricultural production, and calls for researchers to include separate
        GHG emissions in addition to aggregated CO.sub.2e footprints."],"Author":
        ["Lynch, John"],"PublicationCentury": ["2000"],"PublicationDecade": ["2010"],"References_xml":
        [{"volume": "240","start-page": "135","year": "2017","end-page": "147","ident":
        "bb0125","article-title": "Intensification pathways for beef and dairy cattle
        production systems: Impacts on GHG emissions, land occupation and land use
        change","publication-title": "Agric. Ecosyst. Environ.","contributor": {"fullname":
        "Gerssen-Gondelach"},"contributor": {"fullname": "Lauwerijssen"},"contributor":
        {"fullname": "Havlík"},"contributor": {"fullname": "Herrero"},"contributor":
        {"fullname": "Valin"},"contributor": {"fullname": "Faaij"},"contributor":
        {"fullname": "Wicke"}},{"volume": "96","start-page": "467","year": "2009","end-page":
        "472","ident": "bb0275","article-title": "The global warming potential—the
        need for an interdisciplinary retrial","publication-title": "Clim. Chang.","contributor":
        {"fullname": "Shine"}},{"volume": "9","start-page": "10","year": "2010","ident":
        "bb0065","article-title": "A review of fatty acid profiles and antioxidant
        content in grass-fed and grain-fed beef","publication-title": "Nutr. J.","contributor":
        {"fullname": "Daley"},"contributor": {"fullname": "Abbott"},"contributor":
        {"fullname": "Doyle"},"contributor": {"fullname": "Nader"},"contributor":
        {"fullname": "Larson"}},{"volume": "6","year": "2009","ident": "bb0190","article-title":
        "Preferred reporting items for systematic reviews and meta-analyses: the PRISMA
        statement","publication-title": "PLoS Med.","contributor": {"fullname": "Moher"},"contributor":
        {"fullname": "Liberati"},"contributor": {"fullname": "Tetzlaff"},"contributor":
        {"fullname": "Altman"},"contributor": {"fullname": "The"}},{"volume": "365","start-page":
        "1903","year": "2007","end-page": "1914","ident": "bb0280","article-title":
        "Comparing the climate effect of emissions of short- and long-lived climate
        agents","publication-title": "Philos. Trans. R. Soc. A Math. Phys. Eng. Sci.","contributor":
        {"fullname": "Shine"},"contributor": {"fullname": "Berntsen"},"contributor":
        {"fullname": "Fuglestvedt"},"contributor": {"fullname": "Skeie"},"contributor":
        {"fullname": "Stuber"}},{"volume": "171","start-page": "1672","year": "2018","end-page":
        "1680","ident": "bb0175","article-title": "Distributions of emissions intensity
        for individual beef cattle reared on pasture-based production systems","publication-title":
        "J. Clean. Prod.","contributor": {"fullname": "McAuliffe"},"contributor":
        {"fullname": "Takahashi"},"contributor": {"fullname": "Orr"},"contributor":
        {"fullname": "Harris"},"contributor": {"fullname": "Lee"}},{"volume": "1","start-page":
        "16","year": "2018","ident": "bb0020","article-title": "A solution to the
        misrepresentations of CO","publication-title": "Clim. Atmos. Sci.","contributor":
        {"fullname": "Allen"},"contributor": {"fullname": "Shine"},"contributor":
        {"fullname": "Fuglestvedt"},"contributor": {"fullname": "Millar"},"contributor":
        {"fullname": "Cain"},"contributor": {"fullname": "Frame"},"contributor": {"fullname":
        "Macey"}},{"volume": "178","start-page": "279","year": "2015","end-page":
        "288","ident": "bb0075","article-title": "Comparing environmental impacts
        of beef production systems: a review of life cycle assessments","publication-title":
        "Livest. Sci.","contributor": {"fullname": "de Vries"},"contributor": {"fullname":
        "van Middelaar"},"contributor": {"fullname": "de Boer"}},{"volume": "356","start-page":
        "492","year": "2017","end-page": "493","ident": "bb0210","article-title":
        "Unmask temporal trade-offs in climate policy debates","publication-title":
        "Science","contributor": {"fullname": "Ocko"},"contributor": {"fullname":
        "Hamburg"},"contributor": {"fullname": "Jacob"},"contributor": {"fullname":
        "Keith"},"contributor": {"fullname": "Keohane"},"contributor": {"fullname":
        "Oppenheimer"},"contributor": {"fullname": "Roy-Mayhew"},"contributor": {"fullname":
        "Schrag"},"contributor": {"fullname": "Pacala"}},{"volume": "140","start-page":
        "766","year": "2017","end-page": "783","ident": "bb0060","article-title":
        "Systematic review of greenhouse gas emissions for different fresh food categories","publication-title":
        "J. Clean. Prod.","contributor": {"fullname": "Clune"},"contributor": {"fullname":
        "Crossin"},"contributor": {"fullname": "Verghese"}},{"volume": "64","start-page":
        "129","year": "2016","end-page": "140","ident": "bb0050","article-title":
        "Bridging the gap between impact assessment methods and climate science","publication-title":
        "Environ. Sci. Pol.","contributor": {"fullname": "Cherubini"},"contributor":
        {"fullname": "Fuglestvedt"},"contributor": {"fullname": "Gasser"},"contributor":
        {"fullname": "Reisinger"},"contributor": {"fullname": "Cavalett"},"contributor":
        {"fullname": "Huijbregts"},"contributor": {"fullname": "Johansson"},"contributor":
        {"fullname": "Jørgensen"},"contributor": {"fullname": "Raugei"},"contributor":
        {"fullname": "Schivley"},"contributor": {"fullname": "Strømman"},"contributor":
        {"fullname": "Tanaka"},"contributor": {"fullname": "Levasseur"}},{"volume":
        "12","start-page": "491","year": "2009","end-page": "503","ident": "bb0115","article-title":
        "Livestock-related greenhouse gas emissions: impacts and options for policy
        makers","publication-title": "Environ. Sci. Pol.","contributor": {"fullname":
        "Garnett"}},{"volume": "98","start-page": "561","year": "2014","end-page":
        "568","ident": "bb0135","article-title": "Meat consumption: trends and quality
        matters","publication-title": "Meat Sci.","contributor": {"fullname": "Henchion"},"contributor":
        {"fullname": "McCarthy"},"contributor": {"fullname": "Resconi"},"contributor":
        {"fullname": "Troy"}},{"volume": "90","start-page": "4641","year": "2012","end-page":
        "4655","ident": "bb0295","article-title": "Carbon footprint and ammonia emissions
        of California beef production systems","publication-title": "J. Anim. Sci.","contributor":
        {"fullname": "Stackhouse-Lawson"},"contributor": {"fullname": "Rotz"},"contributor":
        {"fullname": "Oltjen"},"contributor": {"fullname": "Mitloehner"}},{"volume":
        "515","start-page": "518","year": "2014","ident": "bb0305","article-title":
        "Global diets link environmental sustainability and human health","publication-title":
        "Nature","contributor": {"fullname": "Tilman"},"contributor": {"fullname":
        "Clark"}},{"volume": "2","start-page": "127","year": "2012","ident": "bb0040","article-title":
        "Is the grass always greener? Comparing the environmental impact of conventional,
        natural and grass-fed beef production systems","publication-title": "Animals","contributor":
        {"fullname": "Capper"}},{"volume": "143","start-page": "86","year": "2016","end-page":
        "96","ident": "bb0045","article-title": "Impact of the intensification of
        beef production in Brazil on greenhouse gas emissions and land use","publication-title":
        "Agric. Syst.","contributor": {"fullname": "Cardoso"},"contributor": {"fullname":
        "Berndt"},"contributor": {"fullname": "Leytem"},"contributor": {"fullname":
        "Alves"},"contributor": {"fullname": "De Carvalho"},"contributor": {"fullname":
        "De Barros Soares"},"contributor": {"fullname": "Urquiaga"},"contributor":
        {"fullname": "Boddey"}},{"volume": "12","year": "2017","ident": "bb0055","article-title":
        "Comparative analysis of environmental impacts of agricultural production
        systems, agricultural input efficiency, and food choice","publication-title":
        "Environ. Res. Lett.","contributor": {"fullname": "Clark"},"contributor":
        {"fullname": "Tilman"}},{"volume": "71","start-page": "163","year": "2016","end-page":
        "174","ident": "bb0165","article-title": "Enhancing life cycle impact assessment
        from climate science: review of recent findings and recommendations for application
        to LCA","publication-title": "Ecol. Indic.","contributor": {"fullname": "Levasseur"},"contributor":
        {"fullname": "Cavalett"},"contributor": {"fullname": "Fuglestvedt"},"contributor":
        {"fullname": "Gasser"},"contributor": {"fullname": "Johansson"},"contributor":
        {"fullname": "Jørgensen"},"contributor": {"fullname": "Raugei"},"contributor":
        {"fullname": "Reisinger"},"contributor": {"fullname": "Schivley"},"contributor":
        {"fullname": "Strømman"},"contributor": {"fullname": "Tanaka"},"contributor":
        {"fullname": "Cherubini"}},{"volume": "562","start-page": "519","year": "2018","end-page":
        "525","ident": "bb0290","article-title": "Options for keeping the food system
        within environmental limits","publication-title": "Nature","contributor":
        {"fullname": "Springmann"},"contributor": {"fullname": "Clark"},"contributor":
        {"fullname": "Mason-D''Croz"},"contributor": {"fullname": "Wiebe"},"contributor":
        {"fullname": "Bodirsky"},"contributor": {"fullname": "Lassaletta"},"contributor":
        {"fullname": "de Vries"},"contributor": {"fullname": "Vermeulen"},"contributor":
        {"fullname": "Herrero"},"contributor": {"fullname": "Carlson"},"contributor":
        {"fullname": "Jonell"},"contributor": {"fullname": "Troell"},"contributor":
        {"fullname": "DeClerck"},"contributor": {"fullname": "Gordon"},"contributor":
        {"fullname": "Zurayk"},"contributor": {"fullname": "Scarborough"},"contributor":
        {"fullname": "Rayner"},"contributor": {"fullname": "Loken"},"contributor":
        {"fullname": "Fanzo"},"contributor": {"fullname": "Godfray"},"contributor":
        {"fullname": "Tilman"},"contributor": {"fullname": "Rockström"},"contributor":
        {"fullname": "Willett"}},{"volume": "8","start-page": "235","year": "2017","end-page":
        "253","ident": "bb0120","article-title": "Accounting for the climate–carbon
        feedback in emission metrics","publication-title": "Earth Syst. Dynam.","contributor":
        {"fullname": "Gasser"},"contributor": {"fullname": "Peters"},"contributor":
        {"fullname": "Fuglestvedt"},"contributor": {"fullname": "Collins"},"contributor":
        {"fullname": "Shindell"},"contributor": {"fullname": "Ciais"}},{"volume":
        "209","start-page": "39","year": "2018","end-page": "45","ident": "bb0180","article-title":
        "Type and number of environmental impact categories used in livestock life
        cycle assessment: a systematic review","publication-title": "Livest. Sci.","contributor":
        {"fullname": "McClelland"},"contributor": {"fullname": "Arndt"},"contributor":
        {"fullname": "Gordon"},"contributor": {"fullname": "Thoma"}},{"volume": "98","start-page":
        "346","year": "2014","end-page": "354","ident": "bb0235","article-title":
        "Sustainability of meat production beyond carbon footprint: a synthesis of
        case studies from grazing systems in Uruguay","publication-title": "Meat Sci.","contributor":
        {"fullname": "Picasso"},"contributor": {"fullname": "Modernel"},"contributor":
        {"fullname": "Becoña"},"contributor": {"fullname": "Salvo"},"contributor":
        {"fullname": "Gutiérrez"},"contributor": {"fullname": "Astigarraga"}},{"volume":
        "158","start-page": "1","year": "2017","end-page": "13","ident": "bb0010","article-title":
        "Assessment of grazing management on farm greenhouse gas intensity of beef
        production systems in the Canadian Prairies using life cycle assessment","publication-title":
        "Agric. Syst.","contributor": {"fullname": "Alemu"},"contributor": {"fullname":
        "Janzen"},"contributor": {"fullname": "Little"},"contributor": {"fullname":
        "Hao"},"contributor": {"fullname": "Thompson"},"contributor": {"fullname":
        "Baron"},"contributor": {"fullname": "Iwaasa"},"contributor": {"fullname":
        "Beauchemin"},"contributor": {"fullname": "Kröbel"}},{"volume": "139","start-page":
        "460","year": "2016","end-page": "472","ident": "bb0130","article-title":
        "Apples to kangaroos: a framework for developing internationally comparable
        carbon emission factors for crop and livestock products","publication-title":
        "J. Clean. Prod.","contributor": {"fullname": "Hawkins"},"contributor": {"fullname":
        "Ma"},"contributor": {"fullname": "Schilizzi"},"contributor": {"fullname":
        "Zhang"}},{"volume": "105","start-page": "80","year": "2011","end-page": "89","ident":
        "bb0170","article-title": "Red meat from animals offered a grass diet increases
        plasma and platelet n-3 PUFA in healthy consumers","publication-title": "Br.
        J. Nutr.","contributor": {"fullname": "McAfee"},"contributor": {"fullname":
        "McSorley"},"contributor": {"fullname": "Cuskelly"},"contributor": {"fullname":
        "Fearon"},"contributor": {"fullname": "Moss"},"contributor": {"fullname":
        "Beattie"},"contributor": {"fullname": "Wallace"},"contributor": {"fullname":
        "Bonham"},"contributor": {"fullname": "Strain"}},{"volume": "140","start-page":
        "399","year": "2017","end-page": "409","ident": "bb0205","article-title":
        "The role of life cycle assessment in supporting sustainable Agri-food systems:
        a review of the challenges","publication-title": "J. Clean. Prod.","contributor":
        {"fullname": "Notarnicola"},"contributor": {"fullname": "Sala"},"contributor":
        {"fullname": "Anton"},"contributor": {"fullname": "McLaren"},"contributor":
        {"fullname": "Saouter"},"contributor": {"fullname": "Sonesson"}},{"volume":
        "146","start-page": "70","year": "2016","end-page": "79","ident": "bb0155","article-title":
        "Environmental and economic performance of beef farming systems with different
        feeding strategies in southern Brazil","publication-title": "Agric. Syst.","contributor":
        {"fullname": "Kamali"},"contributor": {"fullname": "van der Linden"},"contributor":
        {"fullname": "Meuwissen"},"contributor": {"fullname": "Malafaia"},"contributor":
        {"fullname": "Oude Lansink"},"contributor": {"fullname": "de Boer"}},{"volume":
        "58","start-page": "267","year": "2003","end-page": "331","ident": "bb0105","article-title":
        "Metrics of climate change: assessing radiative forcing and emission indices","publication-title":
        "Clim. Chang.","contributor": {"fullname": "Fuglestvedt"},"contributor": {"fullname":
        "Berntsen"},"contributor": {"fullname": "Godal"},"contributor": {"fullname":
        "Sausen"},"contributor": {"fullname": "Shine"},"contributor": {"fullname":
        "Skodvin"}},{"volume": "103","start-page": "41","year": "2010","end-page":
        "50","ident": "bb0320","article-title": "Energy consumption, greenhouse gas
        emissions and economic performance assessments in French Charolais suckler
        cattle farms: Model-based analysis and forecasts","publication-title": "Agric.
        Syst.","contributor": {"fullname": "Veysset"},"contributor": {"fullname":
        "Lherm"},"contributor": {"fullname": "Bébin"}},{"volume": "376","year": "2018","ident":
        "bb0110","article-title": "Implications of possible interpretations of ‘greenhouse
        gas balance’ in the Paris Agreement","publication-title": "Philos. Trans.
        R. Soc. A Math. Phys. Eng. Sci.","contributor": {"fullname": "Fuglestvedt"},"contributor":
        {"fullname": "Rogelj"},"contributor": {"fullname": "Millar"},"contributor":
        {"fullname": "Allen"},"contributor": {"fullname": "Boucher"},"contributor":
        {"fullname": "Cain"},"contributor": {"fullname": "Forster"},"contributor":
        {"fullname": "Kriegler"},"contributor": {"fullname": "Shindell"}},{"volume":
        "4","start-page": "3279","year": "2012","ident": "bb0080","article-title":
        "Carbon footprint of beef cattle","publication-title": "Sustainability","contributor":
        {"fullname": "Desjardins"},"contributor": {"fullname": "Worth"},"contributor":
        {"fullname": "Vergé"},"contributor": {"fullname": "Maxime"},"contributor":
        {"fullname": "Dyer"},"contributor": {"fullname": "Cerkowniak"}},{"volume":
        "576","start-page": "129","year": "2017","end-page": "137","ident": "bb0035","article-title":
        "Carbon footprint of conventional and organic beef production systems: an
        Italian case study","publication-title": "Sci. Total Environ.","contributor":
        {"fullname": "Buratti"},"contributor": {"fullname": "Fantozzi"},"contributor":
        {"fullname": "Barbanera"},"contributor": {"fullname": "Lascaro"},"contributor":
        {"fullname": "Chiorri"},"contributor": {"fullname": "Cecchini"}},{"volume":
        "202","start-page": "311","year": "2017","end-page": "319","ident": "bb0270","article-title":
        "Evaluation of allocation methods for calculation of carbon footprint of grass-based
        dairy production","publication-title": "J. Environ. Manag.","contributor":
        {"fullname": "Rice"},"contributor": {"fullname": "O''Brien"},"contributor":
        {"fullname": "Shalloo"},"contributor": {"fullname": "Holden"}},{"year": "2006","ident":
        "bb0145","article-title": "2006 IPCC Guidelines for National Greenhouse Gas
        Inventories","publication-title": "Prepared by the National Greenhouse Gas
        Inventories Programme","contributor": {"fullname": "IPCC"}},{"volume": "619-620","start-page":
        "127","year": "2018","end-page": "143","ident": "bb0225","article-title":
        "Can farmers mitigate environmental impacts through combined production of
        food, fuel and feed? A consequential life cycle assessment of integrated mixed
        crop-livestock system with a green biorefinery","publication-title": "Sci.
        Total Environ.","contributor": {"fullname": "Parajuli"},"contributor": {"fullname":
        "Dalgaard"},"contributor": {"fullname": "Birkved"}},{"volume": "43","start-page":
        "12,614","year": "2016","end-page": "612,623","ident": "bb0095","article-title":
        "Radiative forcing of carbon dioxide, methane, and nitrous oxide: a significant
        revision of the methane radiative forcing","publication-title": "Geophys.
        Res. Lett.","contributor": {"fullname": "Etminan"},"contributor": {"fullname":
        "Myhre"},"contributor": {"fullname": "Highwood"},"contributor": {"fullname":
        "Shine"}},{"volume": "10","year": "2015","ident": "bb0245","article-title":
        "Climate impact of beef: an analysis considering multiple time scales and
        production methods without use of global warming potentials","publication-title":
        "Environ. Res. Lett.","contributor": {"fullname": "Pierrehumbert"},"contributor":
        {"fullname": "Eshel"}},{"volume": "147","start-page": "119","year": "2017","end-page":
        "129","ident": "bb0100","article-title": "Carbon footprint and life cycle
        costing of beef cattle in the Brazilian midwest","publication-title": "J.
        Clean. Prod.","contributor": {"fullname": "Florindo"},"contributor": {"fullname":
        "de Medeiros Florindo"},"contributor": {"fullname": "Talamini"},"contributor":
        {"fullname": "da Costa"},"contributor": {"fullname": "Ruviaro"}},{"volume":
        "23","start-page": "2189","year": "2018","end-page": "2207","ident": "bb0150","article-title":
        "Global guidance on environmental life cycle impact assessment indicators:
        impacts of climate change, fine particulate matter formation, water consumption
        and land use","publication-title": "Int. J. Life Cycle Assess.","contributor":
        {"fullname": "Jolliet"},"contributor": {"fullname": "Antón"},"contributor":
        {"fullname": "Boulay"},"contributor": {"fullname": "Cherubini"},"contributor":
        {"fullname": "Fantke"},"contributor": {"fullname": "Levasseur"},"contributor":
        {"fullname": "McKone"},"contributor": {"fullname": "Michelsen"},"contributor":
        {"fullname": "Milà i Canals"},"contributor": {"fullname": "Motoshita"},"contributor":
        {"fullname": "Pfister"},"contributor": {"fullname": "Verones"},"contributor":
        {"fullname": "Vigon"},"contributor": {"fullname": "Frischknecht"}},{"volume":
        "172","start-page": "2513","year": "2018","end-page": "2520","ident": "bb0310","article-title":
        "Life-cycle impact assessment of organic and non-organic grass-fed beef production
        in Japan","publication-title": "J. Clean. Prod.","contributor": {"fullname":
        "Tsutsumi"},"contributor": {"fullname": "Ono"},"contributor": {"fullname":
        "Ogasawara"},"contributor": {"fullname": "Hojito"}},{"volume": "71","start-page":
        "41","year": "2018","end-page": "48","ident": "bb0005","article-title": "Improving
        carbon footprinting of agricultural systems: boundaries, tiers, and organic
        farming","publication-title": "Environ. Impact Assess. Rev.","contributor":
        {"fullname": "Adewale"},"contributor": {"fullname": "Reganold"},"contributor":
        {"fullname": "Higgins"},"contributor": {"fullname": "Evans"},"contributor":
        {"fullname": "Carpenter-Boggs"}},{"volume": "8","year": "2013","ident": "bb0260","article-title":
        "Impact of greenhouse gas metrics on the quantification of agricultural emissions
        and farm-scale mitigation strategies: a New Zealand case study","publication-title":
        "Environ. Res. Lett.","contributor": {"fullname": "Reisinger"},"contributor":
        {"fullname": "Ledgard"}},{"volume": "6","start-page": "773","year": "2016","ident":
        "bb0015","article-title": "New use of global warming potentials to compare
        cumulative and short-lived climate pollutants","publication-title": "Nat.
        Clim. Chang.","contributor": {"fullname": "Allen"},"contributor": {"fullname":
        "Fuglestvedt"},"contributor": {"fullname": "Shine"},"contributor": {"fullname":
        "Reisinger"},"contributor": {"fullname": "Pierrehumbert"},"contributor": {"fullname":
        "Forster"}},{"volume": "90","start-page": "283","year": "2008","end-page":
        "297","ident": "bb0025","article-title": "The millennial atmospheric lifetime
        of anthropogenic CO","publication-title": "Clim. Chang.","contributor": {"fullname":
        "Archer"},"contributor": {"fullname": "Brovkin"}},{"volume": "3","start-page":
        "6","year": "2013","end-page": "13","ident": "bb0285","article-title": "Beyond
        milk, meat, and eggs: role of livestock in food and nutrition security","publication-title":
        "Anim. Front.","contributor": {"fullname": "Smith"},"contributor": {"fullname":
        "Sones"},"contributor": {"fullname": "Grace"},"contributor": {"fullname":
        "MacMillan"},"contributor": {"fullname": "Tarawali"},"contributor": {"fullname":
        "Herrero"}},{"volume": "365","start-page": "2853","year": "2010","end-page":
        "2867","ident": "bb0300","article-title": "Livestock production: recent trends,
        future prospects","publication-title": "Philos. Trans. R. Soc. B: Biol. Sci.","contributor":
        {"fullname": "Thornton"}},{"volume": "127","start-page": "19","year": "2014","end-page":
        "27","ident": "bb0140","article-title": "Feeding high concentrations of corn
        dried distillers'' grains decreases methane, but increases nitrous oxide emissions
        from beef cattle production","publication-title": "Agric. Syst.","contributor":
        {"fullname": "Hünerberg"},"contributor": {"fullname": "Little"},"contributor":
        {"fullname": "Beauchemin"},"contributor": {"fullname": "McGinn"},"contributor":
        {"fullname": "O''Connor"},"contributor": {"fullname": "Okine"},"contributor":
        {"fullname": "Harstad"},"contributor": {"fullname": "Kröbel"},"contributor":
        {"fullname": "McAllister"}},{"year": "2015","ident": "bb0185","article-title":
        "Package ''Kendall''","contributor": {"fullname": "McLeod"}},{"volume": "128","start-page":
        "1","year": "2010","end-page": "11","ident": "bb0070","article-title": "Comparing
        environmental impacts for livestock products: a review of life cycle assessments","publication-title":
        "Livest. Sci.","contributor": {"fullname": "de Vries"},"contributor": {"fullname":
        "de Boer"}},{"volume": "96","start-page": "426","year": "2015","end-page":
        "434","ident": "bb0085","article-title": "Life cycle assessment of beef cattle
        production in two typical grassland systems of southern Brazil","publication-title":
        "J. Clean. Prod.","contributor": {"fullname": "Dick"},"contributor": {"fullname":
        "Abreu da Silva"},"contributor": {"fullname": "Dewes"}},{"year": "2013","ident":
        "bb0220","article-title": "Greenhouse Gas Emissions from Ruminant Supply Chains
        - a Global Life Cycle Assessment","contributor": {"fullname": "Opio"},"contributor":
        {"fullname": "Gerber"},"contributor": {"fullname": "Mottet"},"contributor":
        {"fullname": "Falcucci"},"contributor": {"fullname": "Tempio"},"contributor":
        {"fullname": "MacLeod"},"contributor": {"fullname": "Vellinga"},"contributor":
        {"fullname": "Henderson"},"contributor": {"fullname": "Steinfeld"}},{"volume":
        "24","start-page": "1749","year": "2018","end-page": "1761","ident": "bb0255","article-title":
        "How much do direct livestock emissions actually contribute to global warming?","publication-title":
        "Glob. Chang. Biol.","contributor": {"fullname": "Reisinger"},"contributor":
        {"fullname": "Clark"}},{"volume": "18","start-page": "252","year": "2013","end-page":
        "262","ident": "bb0195","article-title": "Accounting for greenhouse gas emissions
        from the degradation of chemicals in the environment","publication-title":
        "Int. J. Life Cycle Assess.","contributor": {"fullname": "Muñoz"},"contributor":
        {"fullname": "Rigarlsford"},"contributor": {"fullname": "i Canals"},"contributor":
        {"fullname": "King"}},{"volume": "44","start-page": "427","year": "2000","end-page":
        "443","ident": "bb0215","article-title": "The jury is still out on global
        warming potentials","publication-title": "Clim. Chang.","contributor": {"fullname":
        "O''Neill"}},{"volume": "10","year": "2015","ident": "bb0230","article-title":
        "Climate metrics and the carbon footprint of livestock products: where''s
        the beef?","publication-title": "Environ. Res. Lett.","contributor": {"fullname":
        "Persson"},"contributor": {"fullname": "Johansson"},"contributor": {"fullname":
        "Cederberg"},"contributor": {"fullname": "Hedenus"},"contributor": {"fullname":
        "Bryngelsson"}},{"year": "2013","ident": "bb0200","article-title": "Anthropogenic
        and natural radiative forcing","publication-title": "Climate Change 2013:
        The Physical Science Basis. Contribution of Working Group 1 to the Fifth Assessment
        Report of the Intergovernmental Panel on Climate Change","contributor": {"fullname":
        "Myhre"},"contributor": {"fullname": "Shindell"},"contributor": {"fullname":
        "Bréon"},"contributor": {"fullname": "Collins"},"contributor": {"fullname":
        "Fuglestvedt"},"contributor": {"fullname": "Huang"},"contributor": {"fullname":
        "Koch"},"contributor": {"fullname": "Larmarque"},"contributor": {"fullname":
        "Lee"},"contributor": {"fullname": "Mendoza"},"contributor": {"fullname":
        "Nakajima"},"contributor": {"fullname": "Robock"},"contributor": {"fullname":
        "Stephens"},"contributor": {"fullname": "Takemura"},"contributor": {"fullname":
        "Zhang"}},{"volume": "81","start-page": "74","year": "2017","end-page": "82","ident":
        "bb0265","article-title": "Sensitivity of the carbon footprint of New Zealand
        milk to greenhouse gas metrics","publication-title": "Ecol. Indic.","contributor":
        {"fullname": "Reisinger"},"contributor": {"fullname": "Ledgard"},"contributor":
        {"fullname": "Falconer"}},{"volume": "97","start-page": "3231","year": "2014","end-page":
        "3261","ident": "bb0160","article-title": "Invited review: enteric methane
        in dairy cattle production: quantifying the opportunities and impact of reducing
        emissions","publication-title": "J. Dairy Sci.","contributor": {"fullname":
        "Knapp"},"contributor": {"fullname": "Laur"},"contributor": {"fullname": "Vadas"},"contributor":
        {"fullname": "Weiss"},"contributor": {"fullname": "Tricarico"}},{"volume":
        "507","start-page": "32","year": "2014","end-page": "34","ident": "bb0090","article-title":
        "Agriculture: steps to sustainable livestock","publication-title": "Nature","contributor":
        {"fullname": "Eisler"},"contributor": {"fullname": "Lee"},"contributor": {"fullname":
        "Tarlton"},"contributor": {"fullname": "Martin"},"contributor": {"fullname":
        "Beddington"},"contributor": {"fullname": "Dungait"},"contributor": {"fullname":
        "Greathead"},"contributor": {"fullname": "Liu"},"contributor": {"fullname":
        "Mathew"},"contributor": {"fullname": "Miller"},"contributor": {"fullname":
        "Misselbrook"},"contributor": {"fullname": "Murray"},"contributor": {"fullname":
        "Vinod"},"contributor": {"fullname": "Van Saun"},"contributor": {"fullname":
        "Winter"}},{"volume": "2","start-page": "195","year": "2012","ident": "bb0030","article-title":
        "Greenhouse gas emissions from calf- and yearling-fed beef production systems,
        with and without the use of growth promotants","publication-title": "Animals","contributor":
        {"fullname": "Basarab"},"contributor": {"fullname": "Baron"},"contributor":
        {"fullname": "López-Campos"},"contributor": {"fullname": "Aalhus"},"contributor":
        {"fullname": "Haugen-Kozyra"},"contributor": {"fullname": "Okine"}},{"volume":
        "42","start-page": "341","year": "2014","end-page": "379","ident": "bb0240","article-title":
        "Short-Lived climate Pollution","publication-title": "Annu. Rev. Earth Planet.
        Sci.","contributor": {"fullname": "Pierrehumbert"}},{"year": "2018","ident":
        "bb0315","article-title": "U.S. Energy Information Administration Energy Conversion
        Calculators","contributor": {"fullname": "US EIA"}},{"year": "2018","ident":
        "bb0250","article-title": "R: A Language and Environment for Statistical Computing","contributor":
        {"fullname": "R Core Team"}}],"Snippet": ["...Agriculture is a significant
        source of anthropogenic greenhouse gas (GHG) emissions, and __BENTO_HL_START__beef__BENTO_HL_END__
        cattle are particularly emissions intensive...","... ( Garnett, 2009 ). __BENTO_HL_START__Beef__BENTO_HL_END__
        production is particularly emissions intensive, and __BENTO_HL_START__beef__BENTO_HL_END__
        is often highlighted as having one of the largest GHG footprints among common
        food..."],"PublicationTitle": ["Environmental Impact Assessment Review"],"ProviderPackageCode":
        ["AMFUW","AAQFI","SPC","AITUG","T5K","R2-","AAKOC","ABYKQ","AHHHB","J1W","SDF","AAOAW","SDG","BLECG","PC.","AGHFR","AOMHK","SDP","7-5","1B1","AEKER",".~1","ACDAQ","BLXMC","AFKWA","AAFTH","--K","--M","ABFYP","1RT","FIRID","GBLVA","9JM","9JN","SEN","9JO","AHIDL","SES","SEW","FDB","~G-","AAEDT","ACRLP","AKIFW","JARJE","AVARZ","AGUBO","G-Q","OAUVE","FGOYB","PRBVW","EO9","EO8","ABMMH","KCYFY","457","AAFJI","RPZ","AARJD","ABLST","AIKHN","HMC","1~.","BELTK","SSB","8P~","EP2","KOM","AFTJW","EP3","SSJ","AGYEJ","FNPLU","SSO","AFXIZ","AJOXV","SSR","Q38","P-8","4G.","SSZ","P-9","AJBFU","CITATION","AAYXX","BSHEE"],"Volume":
        ["76"],"Author_xml": [{"sequence": "1","givenname": "John","surname": "Lynch","fullname":
        "Lynch, John"}],"Abstract": ["Agriculture is a significant source of anthropogenic
        greenhouse gas (GHG) emissions, and beef cattle are particularly emissions
        intensive. GHG emissions are typically expressed as a carbon dioxide equivalent
        (CO e) ‘carbon footprint’ per unit output. The 100-year Global Warming Potential
        (GWP ) is the most commonly used CO e metric, but others have also been proposed,
        and there is no universal reason to prefer GWP over alternative metrics. The
        weightings assigned to non-CO GHGs can differ significantly depending on the
        metric used, and relying upon a single metric can obscure important differences
        in the climate impacts of different GHGs. This loss of detail is especially
        relevant to beef production systems, as the majority of GHG emissions (as
        conventionally reported) are in the form of methane (CH ) and nitrous oxide
        (N O), rather than CO . This paper presents a systematic literature review
        of harmonised cradle to farm-gate beef carbon footprints from bottom-up studies
        on individual or representative systems, collecting the emissions data for
        each separate GHG, rather than a single CO e value. Disaggregated GHG emissions
        could not be obtained for the majority of studies, highlighting the loss of
        information resulting from the standard reporting of total GWP CO e alone.
        Where individual GHG compositions were available, significant variation was
        found for all gases. A comparison of grass fed and non-grass fed beef production
        systems was used to illustrate dynamics that are not sufficiently captured
        through a single CO e footprint. Few clear trends emerged between the two
        dietary groups, but there was a non-significant indication that under GWP
        non-grass fed systems generally appear more emissions efficient, but under
        an alternative metric, the 100-year global temperature potential (GTP ), grass-fed
        beef had lower footprints. Despite recent focus on agricultural emissions,
        this review concludes there are insufficient data available to fully address
        important questions regarding the climate impacts of agricultural production,
        and calls for researchers to include separate GHG emissions in addition to
        aggregated CO e footprints."],"Keywords": ["methane","beef","carbon dioxide
        equivalent","Cattle","nitrous oxide","greenhouse gas"],"PublicationDate":
        ["May 2019","2019-May","2019-05-00","20190501","20190500"],"Genre": ["Journal
        Article"],"PMID": ["31388221"],"IsPeerReviewed": ["true"],"Audience": ["Academic"],"thumbnail_s":
        ["http://covers-cdn.summon.serialssolutions.com/index.aspx?isbn=/sc.gif&issn=0195-9255&client=summon"],"thumbnail_m":
        ["http://covers-cdn.summon.serialssolutions.com/index.aspx?isbn=/mc.gif&issn=0195-9255&client=summon"],"thumbnail_l":
        ["http://covers-cdn.summon.serialssolutions.com/index.aspx?isbn=/lc.gif&issn=0195-9255&client=summon"],"Database_xml":
        [{"sequence": "1","dbid": "NPM","name": "PubMed","url": "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=PubMed","sourceTypes":
        ["Index Database"]}],"link.rule.ids": ["222,307,801,802,805,907,3622"],"LinkModel":
        ["DirectLink"],"IEDL.DBID": ["FDB"],"BookMark": ["ePnHCXMwfV3bSsRADB1EcWX1FyQ_sLJzbSsiFFH8AH0e5tqtyO5CQfDvTXY6q_viUx8mSQtpe5KQnLAymFJ6qNLoiHOTd4UXU55h9tM2coUwKM7rokAMahe17m8w-r9kC8klRn6CX7Gh_3LjZ6Gs_oZdhjhObsBUlIpMEQZqTtlgjpxgcBPQijQqMk1AwxngU8oQDmTAsC8Eqnh4Dz380iRDGRG5ZhcZ_Z1u5uuSvb88vz29ruaVBCuuNH6OyqvOadGJptUhmS6axnHphYghmKy0iIiQXESfNAYCJuZuHTj3oW1i8CpmuWSPxe5JB6bdF2oJS2TPpyfbcXMgfTamVdLQeve7YoAAxNJbiGLBzc30u20iPifb66YhmpeWloGJolBh93iz2uD1YclPlvxk14LYQlHp9u9jHlWqY1DgoQhUBLczYhcktvhD_s_-D7AgpxE"],"DatabaseName":
        ["Elsevier:ScienceDirect:Open Access","Academic OneFile (A&I only)","PubMed
        Central (Full Participant titles)"],"ParticipantIDs": ["pubmedcentral_primary_oai_pubmedcentral_nih_gov_6684367","gale_infotracacademiconefile_A577388080","crossref_primary_10_1016_j_eiar_2019_02_003","pubmed_primary_31388221","elsevier_sciencedirect_doi_10_1016_j_eiar_2019_02_003"]}],"rollups":
        {"image": {},"reference": {},"newspaper": {}}}'
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:16:07 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.query=pub_date_facet:%5B2000%20TO%202015%5D&mm=1&q=Title:%20beef%20AND%20Title:%20100%25&qt=search&rows=0&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:16:13 GMT
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '921'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:14:32 GMT
      Etag:
      - '"OGNkMDVhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-088.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "responseHeader":{
            "zkConnected":true,
            "status":0,
            "QTime":156,
            "params":{
              "f.subject_content_facet.facet.limit":"6",
              "mm":"1",
              "f.author_facet.facet.limit":"6",
              "qt":"search",
              "f.fast_geo_facet.facet.limit":"6",
              "f.lc_alpha_facet.facet.limit":"6",
              "f.lc_callnum_facet.facet.limit":"-1",
              "sort":"score desc, pub_date_sort desc, title_sort asc",
              "f.location.facet.sort":"index",
              "rows":"0",
              "f.online.facet.limit":"3",
              "facet.query":["acquired_dt:[NOW-14DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-30DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-1YEAR TO NOW-7DAY]",
                "pub_date_facet:[1686 TO 1699]",
                "pub_date_facet:[1700 TO 1749]",
                "pub_date_facet:[1750 TO 1799]",
                "pub_date_facet:[1800 TO 1849]",
                "pub_date_facet:[1850 TO 1899]",
                "pub_date_facet:[1900 TO 1949]",
                "pub_date_facet:[1950 TO 1999]",
                "pub_date_facet:[2000 TO 2015]"],
              "f.location.facet.limit":"101",
              "q":"Title: beef AND Title: 100%",
              "defType":"edismax",
              "f.fast_era_facet.facet.limit":"6",
              "f.lc_callnum_facet.facet.sort":"count",
              "f.fast_topic_facet.facet.limit":"6",
              "f.fast_genre_facet.facet.limit":"6",
              "facet":"true",
              "wt":"json",
              "f.format.facet.limit":"11",
              "f.language_facet.facet.limit":"6"}},
          "response":{"numFound":417,"start":0,"maxScore":481691.25,"docs":[]
          },
          "facet_counts":{
            "facet_queries":{
              "acquired_dt:[NOW-1YEAR TO NOW-7DAY]":27,
              "pub_date_facet:[1686 TO 1699]":5,
              "pub_date_facet:[1700 TO 1749]":9,
              "pub_date_facet:[1750 TO 1799]":53,
              "pub_date_facet:[1800 TO 1849]":10,
              "pub_date_facet:[1850 TO 1899]":8,
              "pub_date_facet:[1900 TO 1949]":98,
              "pub_date_facet:[1950 TO 1999]":160,
              "pub_date_facet:[2000 TO 2015]":73},
            "facet_fields":{
              "format":[
                "Book",355,
                "Journal/Periodical",34,
                "Microform",15,
                "Video",13,
                "Thesis",12,
                "Musical Recording",7,
                "Computer File",5,
                "Manuscript/Archive",1,
                "Map",1,
                "Musical Score",1],
              "online":[
                "At the Library",225,
                "Online",202],
              "language_facet":[
                "English",355,
                "Spanish",7,
                "German",4,
                "French",2,
                "Russian",2,
                "Arabic",1],
              "location_facet":[
                "Library Annex",174,
                "Mann Library",23,
                "Olin Library",11,
                "Kroch Library Rare & Manuscripts",8,
                "Veterinary Library",4,
                "Kroch Library Asia",3,
                "Uris Library",3,
                "Africana Library",1,
                "ILR Library",1,
                "ILR Library Kheel Center",1]},
            "facet_ranges":{},
            "facet_intervals":{},
            "facet_heatmaps":{}}}
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:16:13 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&mm=1&q=(%20((%2Btitle:%22100%25%22)%20OR%20title_phrase:%22100%25%22)%20)&qt=search&rows=20&search_field=advanced&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:16:14 GMT
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:15:15 GMT
      Etag:
      - '"MzFiMWJhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-004.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:16:15 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.query=pub_date_facet:%5B2000%20TO%202020%5D&mm=1&q=(%20((%2Btitle:%22100%25%22)%20OR%20title_phrase:%22100%25%22)%20)&qt=search&rows=0&search_field=advanced&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:16:22 GMT
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '990'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:13:30 GMT
      Etag:
      - '"YTc0ZTFhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-004.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "responseHeader":{
            "zkConnected":true,
            "status":0,
            "QTime":60,
            "params":{
              "f.subject_content_facet.facet.limit":"6",
              "mm":"1",
              "f.author_facet.facet.limit":"6",
              "qt":"search",
              "f.fast_geo_facet.facet.limit":"6",
              "f.lc_alpha_facet.facet.limit":"6",
              "f.lc_callnum_facet.facet.limit":"-1",
              "sort":"score desc, pub_date_sort desc, title_sort asc",
              "f.location.facet.sort":"index",
              "rows":"0",
              "f.online.facet.limit":"3",
              "facet.query":["acquired_dt:[NOW-14DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-30DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-1YEAR TO NOW-7DAY]",
                "pub_date_facet:[1400 TO 1499]",
                "pub_date_facet:[1500 TO 1599]",
                "pub_date_facet:[1600 TO 1699]",
                "pub_date_facet:[1700 TO 1799]",
                "pub_date_facet:[1800 TO 1899]",
                "pub_date_facet:[1900 TO 1999]",
                "pub_date_facet:[2000 TO 2020]"],
              "f.location.facet.limit":"101",
              "q":"( ((+title:\"100%\") OR title_phrase:\"100%\") )",
              "defType":"edismax",
              "f.fast_era_facet.facet.limit":"6",
              "f.lc_callnum_facet.facet.sort":"count",
              "f.fast_topic_facet.facet.limit":"6",
              "f.fast_genre_facet.facet.limit":"6",
              "facet":"true",
              "wt":"json",
              "f.format.facet.limit":"11",
              "f.language_facet.facet.limit":"6",
              "search_field":"advanced"}},
          "response":{"numFound":14559,"start":0,"maxScore":195819.94,"docs":[]
          },
          "facet_counts":{
            "facet_queries":{
              "acquired_dt:[NOW-14DAY TO NOW-7DAY ]":7,
              "acquired_dt:[NOW-30DAY TO NOW-7DAY ]":10,
              "acquired_dt:[NOW-1YEAR TO NOW-7DAY]":603,
              "pub_date_facet:[1400 TO 1499]":3,
              "pub_date_facet:[1500 TO 1599]":12,
              "pub_date_facet:[1600 TO 1699]":304,
              "pub_date_facet:[1700 TO 1799]":115,
              "pub_date_facet:[1800 TO 1899]":541,
              "pub_date_facet:[1900 TO 1999]":8368,
              "pub_date_facet:[2000 TO 2020]":5119},
            "facet_fields":{
              "format":[
                "Book",13111,
                "Musical Recording",545,
                "Microform",400,
                "Map",330,
                "Musical Score",226,
                "Journal/Periodical",173,
                "Thesis",138,
                "Video",106,
                "Database",11,
                "Manuscript/Archive",10,
                "Computer File",9],
              "online":[
                "At the Library",11844,
                "Online",2861],
              "language_facet":[
                "English",8120,
                "German",1582,
                "Chinese",735,
                "Japanese",489,
                "Spanish",464,
                "French",442],
              "location_facet":[
                "Library Annex",4615,
                "Olin Library",2990,
                "Kroch Library Asia",2129,
                "Music Library",521,
                "Kroch Library Rare & Manuscripts",426,
                "Uris Library",322,
                "Law Library",319,
                "Fine Arts Library",313,
                "Mann Library",279,
                "ILR Library",184]},
            "facet_ranges":{},
            "facet_intervals":{},
            "facet_heatmaps":{}}}
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:16:22 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&mm=1&q=((Women%20OR%20female*%20OR%20gender%20OR%20feminis*)%20AND%20(literature%20OR%20cinema%20OR%20film%20OR%20television))%20&qt=search&rows=20&search_field=advanced&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:17:17 GMT
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:16:55 GMT
      Etag:
      - '"OWMwZDZhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-004.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:17:17 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&mm=1&q=(((%2Btitle:%22manual%22%20%2Btitle:%22of%22%20%2Btitle:%22the%22%20%2Btitle:%22trees%22%20%2Btitle:%22of%22%20%2Btitle:%22north%22%20%2Btitle:%22america%22%20%2Btitle:%22exclusive%22%20%2Btitle:%22of%22%20%2Btitle:%22mexico%22%20)%20OR%20(title_phrase:%22manual%20of%20the%20trees%20of%20north%20america%20exclusive%20of%20mexico%22))%20AND%20((%2B%22sargent,%22%20%2B%22charles%22%20%2B%22sprague%22%20)%20OR%20(phrase:%22sargent,%20charles%20sprague%22)))%20&qt=search&rows=20&search_field=advanced&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:18:07 GMT
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '2350'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:17:55 GMT
      Etag:
      - '"Y2Y0ZTFhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-004.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "responseHeader":{
            "zkConnected":true,
            "status":0,
            "QTime":313,
            "params":{
              "f.subject_content_facet.facet.limit":"6",
              "f.fast_geo_facet.facet.limit":"6",
              "f.lc_alpha_facet.facet.limit":"6",
              "f.location.facet.sort":"index",
              "f.online.facet.limit":"3",
              "facet.query":["acquired_dt:[NOW-14DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-30DAY TO NOW-7DAY ]",
                "acquired_dt:[NOW-1YEAR TO NOW-7DAY]"],
              "defType":"edismax",
              "f.lc_callnum_facet.facet.sort":"count",
              "stats":"true",
              "f.fast_genre_facet.facet.limit":"6",
              "wt":"json",
              "f.format.facet.limit":"11",
              "stats.field":"pub_date_facet",
              "mm":"1",
              "f.author_facet.facet.limit":"6",
              "facet.field":["online",
                "format",
                "author_facet",
                "pub_date_facet",
                "workid_facet",
                "language_facet",
                "fast_topic_facet",
                "fast_geo_facet",
                "fast_era_facet",
                "fast_genre_facet",
                "subject_content_facet",
                "lc_alpha_facet",
                "location",
                "hierarchy_facet",
                "authortitle_facet",
                "lc_callnum_facet",
                "collection"],
              "qt":"search",
              "f.lc_callnum_facet.facet.limit":"-1",
              "sort":"score desc, pub_date_sort desc, title_sort asc",
              "rows":"20",
              "f.location.facet.limit":"101",
              "q":"(((+title:\"manual\" +title:\"of\" +title:\"the\" +title:\"trees\" +title:\"of\" +title:\"north\" +title:\"america\" +title:\"exclusive\" +title:\"of\" +title:\"mexico\" ) OR (title_phrase:\"manual of the trees of north america exclusive of mexico\")) AND ((+\"sargent,\" +\"charles\" +\"sprague\" ) OR (phrase:\"sargent, charles sprague\"))) ",
              "f.fast_era_facet.facet.limit":"6",
              "f.fast_topic_facet.facet.limit":"6",
              "facet":"true",
              "f.language_facet.facet.limit":"6",
              "search_field":"advanced"}},
          "response":{"numFound":8,"start":0,"maxScore":86917.67,"docs":[
              {
                "author_display":"Sargent, Charles Sprague.",
                "title_display":"Manual Of The Trees Of North America (Exclusive Of Mexico)",
                "fulltitle_display":"Manual Of The Trees Of North America (Exclusive Of Mexico)",
                "subtitle_display":"",
                "pub_info_display":["[S.l.] : [s.n.], 1905."],
                "pub_date_display":["1905"],
                "id":"6466405",
                "url_access_display":["https://www.biodiversitylibrary.org/title/30438|Full text available from Biodiversity Heritage Library (BHL) Connect to text.",
                  "https://www.biodiversitylibrary.org/title/30439|Full text available from Biodiversity Heritage Library (BHL) Connect to text.",
                  "https://www.biodiversitylibrary.org/title/3586|Full text available from Biodiversity Heritage Library (BHL) Connect to text."],
                "url_access_json":["{\"providercode\":\"PRVHBD\",\"dbcode\":\"79B\",\"description\":\"Full text available from Biodiversity Heritage Library (BHL) Connect to text.\",\"ssid\":\"ssib002215901\",\"url\":\"https://www.biodiversitylibrary.org/title/30438\"}",
                  "{\"providercode\":\"PRVHBD\",\"dbcode\":\"79B\",\"description\":\"Full text available from Biodiversity Heritage Library (BHL) Connect to text.\",\"ssid\":\"ssib002215901\",\"url\":\"https://www.biodiversitylibrary.org/title/30439\"}",
                  "{\"providercode\":\"PRVHBD\",\"dbcode\":\"79B\",\"description\":\"Full text available from Biodiversity Heritage Library (BHL) Connect to text.\",\"ssid\":\"ssib002215901\",\"url\":\"https://www.biodiversitylibrary.org/title/3586\"}"],
                "acquired_dt":"2009-02-11T00:00:00Z",
                "oclc_id_display":["468445477"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":1905,
                "format":["Book"],
                "online":["Online"],
                "score":86917.67},
              {
                "author_display":"Sargent, Charles Sprague, 1841-1927.",
                "title_display":"Manual of the trees of North America (exclusive of Mexico)",
                "fulltitle_display":"Manual of the trees of North America (exclusive of Mexico)",
                "subtitle_display":"",
                "pub_info_display":["Boston and New York, Houghton Mifflin Company, [c1933]"],
                "pub_date_display":["[c1933]"],
                "language_display":["English."],
                "id":"4302249",
                "acquired_dt":"2002-07-10T00:00:00Z",
                "oclc_id_display":["1086987"],
                "availability_json":"{\"available\":true,\"availAt\":{\"Adelson Library (Lab of Ornithology)\":\"QK481 .S21 1933\"}}",
                "pub_date_facet":1933,
                "format":["Book"],
                "online":["At the Library"],
                "score":86023.805},
              {
                "author_display":"Sargent, Charles Sprague, 1841-1927.",
                "title_display":"Manual of the trees of North America (exclusive of Mexico)",
                "fulltitle_display":"Manual of the trees of North America (exclusive of Mexico)",
                "subtitle_display":"",
                "pub_info_display":["New York, Dover [1965]"],
                "pub_date_display":["[1965]"],
                "language_display":["English."],
                "id":"2086728",
                "edition_display":["2nd corr. ed."],
                "oclc_id_display":["552424"],
                "availability_json":"{\"available\":true,\"availAt\":{\"Mann Library\":\"QK481 .S21 1965a\"}}",
                "pub_date_facet":1922,
                "format":["Book"],
                "online":["At the Library"],
                "score":85810.91},
              {
                "author_display":"Sargent, Charles Sprague, 1841-1927.",
                "title_display":"Manual of the trees of North America (exclusive of Mexico)",
                "fulltitle_display":"Manual of the trees of North America (exclusive of Mexico)",
                "subtitle_display":"",
                "pub_info_display":["Boston, New York, Houghton Mifflin Co., 1922."],
                "pub_date_display":["1922"],
                "language_display":["English."],
                "id":"130786",
                "edition_display":["2d ed."],
                "oclc_id_display":["1485835"],
                "availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"QK481 .S21 1922\",\"Bailey Hortorium Reference (Non-Circulating)\":\"QK481 .S21 1922\"}}",
                "pub_date_facet":1922,
                "format":["Book"],
                "online":["At the Library"],
                "score":85740.27},
              {
                "author_display":"Sargent, Charles Sprague, 1841-1927.",
                "title_display":"Manual of the trees of North America (exclusive of Mexico)",
                "fulltitle_display":"Manual of the trees of North America (exclusive of Mexico)",
                "subtitle_display":"",
                "pub_info_display":["New York, Dover Publications [1961, c1949]"],
                "pub_date_display":["[1961, c1949]"],
                "language_display":["English."],
                "id":"648193",
                "edition_display":["2d corr. ed."],
                "oclc_id_display":["242397"],
                "availability_json":"{\"available\":true,\"availAt\":{\"Mann Library\":\"QK481 .S21 1961\",\"Bailey Hortorium Reference (Non-Circulating)\":\"QK481 .S21 1961\",\"Adelson Library (Lab of Ornithology)\":\"Field Guides QK481 .S21 1961\"}}",
                "pub_date_facet":1961,
                "format":["Book"],
                "online":["At the Library"],
                "score":85740.086},
              {
                "author_display":"Sargent, Charles Sprague, 1841-1927.",
                "title_display":"Manual of the trees of North America (exclusive of Mexico)",
                "fulltitle_display":"Manual of the trees of North America (exclusive of Mexico)",
                "subtitle_display":"",
                "pub_info_display":["Boston ; New York : Houghton, Mifflin and Co., 1905."],
                "pub_date_display":["1905"],
                "language_display":["English."],
                "id":"468196",
                "acquired_dt":"2019-03-01T00:00:00Z",
                "oclc_id_display":["1087155"],
                "availability_json":"{\"available\":true,\"availAt\":{\"Bailey Hortorium Reference (Non-Circulating)\":\"QK481 .S21\",\"Mann Library\":\"QK481 .S21\",\"Library Annex\":\"QK481 .S21 1905a\",\"Kroch Library Rare & Manuscripts (Non-Circulating)\":\"History of Science QK481 .S24\",\"Uris Library\":\"QK481 .S24\"}}",
                "pub_date_facet":1905,
                "format":["Book"],
                "online":["At the Library"],
                "score":85706.3},
              {
                "author_display":"Sargent, Charles Sprague, 1841-1927.",
                "title_display":"Manual of the trees of North America (exclusive of Mexico)",
                "fulltitle_display":"Manual of the trees of North America (exclusive of Mexico)",
                "subtitle_display":"",
                "pub_info_display":["New York, Dover Publications [1965]"],
                "pub_date_display":["[1965]"],
                "language_display":["English."],
                "id":"2056064",
                "edition_display":["2d corr. ed."],
                "oclc_id_display":["552424"],
                "availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"NP2177.N8 S24 1965\"}}",
                "pub_date_facet":1965,
                "format":["Book"],
                "online":["At the Library"],
                "score":85704.445},
              {
                "author_display":"Sargent, Charles Sprague, 1841-1927.",
                "title_display":"Manual of the trees of North America (exclusive of Mexico)",
                "fulltitle_display":"Manual of the trees of North America (exclusive of Mexico)",
                "subtitle_display":"",
                "pub_info_display":["Boston ; New York : Houghton, Mifflin and Co., 1905."],
                "pub_date_display":["1905"],
                "language_display":["English."],
                "id":"3076039",
                "url_access_display":["http://resolver.library.cornell.edu/chla/3076039|Connect to full text"],
                "url_access_json":["{\"description\":\"Connect to full text\",\"url\":\"http://resolver.library.cornell.edu/chla/3076039\"}"],
                "acquired_dt":"2000-12-12T00:00:00Z",
                "oclc_id_display":["62106083"],
                "availability_json":"{\"online\":true}",
                "pub_date_facet":1905,
                "format":["Book"],
                "online":["Online"],
                "score":85624.61}]
          },
          "facet_counts":{
            "facet_queries":{
              "acquired_dt:[NOW-1YEAR TO NOW-7DAY]":1},
            "facet_fields":{
              "online":[
                "At the Library",6,
                "Online",2],
              "format":[
                "Book",8],
              "author_facet":[
                "Faxon, Charles Edward, 1846-1918",7,
                "Sargent, Charles Sprague, 1841-1927",7,
                "Gill, Mary W.",5,
                "Faxon, Charles Edward",1,
                "Sargent, Charles Sprague",1],
              "pub_date_facet":[
                "1905",3,
                "1922",2,
                "1933",1,
                "1961",1,
                "1965",1],
              "workid_facet":[
                "491333",8],
              "language_facet":[
                "English",7],
              "fast_topic_facet":[
                "Trees",7],
              "fast_geo_facet":[
                "North America",7],
              "fast_era_facet":[],
              "fast_genre_facet":[],
              "subject_content_facet":[
                "Non-Fiction (books)",7],
              "lc_alpha_facet":[],
              "location":[
                "Adelson Library",2,
                "Adelson Library > Main Collection",2,
                "Bailey Hortorium",3,
                "Bailey Hortorium > Reference",3,
                "Kroch Library Rare & Manuscripts",1,
                "Kroch Library Rare & Manuscripts > Main Collection",1,
                "Library Annex",3,
                "Mann Library",3,
                "Mann Library > Main Collection",3,
                "Uris Library",1,
                "Uris Library > Main Collection",1],
              "hierarchy_facet":[],
              "authortitle_facet":[
                "Sargent, Charles Sprague, 1841-1927. | Manual of the trees of North America (exclusive of Mexico)",7,
                "Sargent, Charles Sprague. | Manual Of The Trees Of North America (Exclusive Of Mexico)",1],
              "lc_callnum_facet":[
                "Q - Science",6,
                "Q - Science:QK - Botany",6,
                "Q - Science:QK - Botany:QK474.8-495 - Spermatophyta.  Phanerogams",6,
                "N - Fine Arts",1],
              "collection":[]},
            "facet_ranges":{},
            "facet_intervals":{},
            "facet_heatmaps":{}},
          "stats":{
            "stats_fields":{
              "pub_date_facet":{
                "min":1905.0,
                "max":1965.0,
                "count":8,
                "missing":0,
                "sum":15418.0,
                "sumOfSquares":2.9718478E7,
                "mean":1927.25,
                "stddev":24.311960607310727}}}}
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:18:07 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&qt=search&rows=20&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:28:09 GMT
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:27:23 GMT
      Etag:
      - '"NWNjZTFhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-004.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:28:09 GMT
- request:
    method: get
    uri: http://da-solr.internal.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&mm=1&q=(%2B%22biology%22)%20OR%20phrase:%22biology%22&qt=search&rows=20&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Jan 2020 14:28:52 GMT
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '52326'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2020 14:27:43 GMT
      Etag:
      - '"N2RiNTVhMDAwMDAwMDAwMFNvbHI="'
      Via:
      - 1.1 aws-110-088.internal.library.cornell.edu
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:28:52 GMT
- request:
    method: get
    uri: http://www.worldcat.org/webservices/catalog/search/sru?maximumRecords=1&query=srw.kw%20=%20%22biology%22&recordSchema=info:srw/schema/1/dc&servicelevel=full&wskey=ydY1RXi9Lx7wmUjJVYi3QlCwUEXxDmJEO5Lrvwf9nLX9vn9dnX3OeHseVTPpxjjTWajSn3r4L70jpUW4
    body:
      encoding: UTF-8
      string: ''
    headers:
      User-Agent:
      - HTTPClient/1.0 (2.8.3, ruby 2.5.5 (2019-03-15))
      Accept:
      - "*/*"
      Date:
      - Fri, 17 Jan 2020 14:28:52 GMT
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      Content-Type:
      - text/xml;charset=utf-8
      Content-Length:
      - '2821'
      Date:
      - Fri, 17 Jan 2020 14:28:53 GMT
    body:
      encoding: UTF-8
      string: |
        <?xml version="1.0" encoding="UTF-8" standalone="no"?>
        <?xml-stylesheet type='text/xsl' href='/webservices/catalog/xsl/searchRetrieveResponse.xsl'?>

        <searchRetrieveResponse xmlns="http://www.loc.gov/zing/srw/" xmlns:oclcterms="http://purl.org/oclc/terms/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <version>1.1</version>
        <numberOfRecords>1126673</numberOfRecords>
        <records>
        <record>
        <recordSchema>info:srw/schema/1/dc</recordSchema>
        <recordPacking>xml</recordPacking>
        <recordData>
        <oclcdcs>
        <dc:contributor>Lodish, Harvey.</dc:contributor>
        <dc:date>cop. 2016</dc:date>
        <dc:description>8th ed.</dc:description>
        <dc:description>Incluye referencias bibliográficas. - Índice.</dc:description>
        <dc:format>1 v. (pag. var.) : il. col. ; 29 cm.</dc:format>
        <dc:identifier>1464183392</dc:identifier>
        <dc:identifier>9781464183393</dc:identifier>
        <dc:language xsi:type="http://purl.org/dc/terms/ISO639-2">eng</dc:language>
        <dc:publisher>W. H. Freeman and Co</dc:publisher>
        <dc:subject>Citología.</dc:subject>
        <dc:subject>Biología molecular.</dc:subject>
        <dc:subject>Genética molecular.</dc:subject>
        <dc:subject xsi:type="http://purl.org/dc/terms/UDC">577.2</dc:subject>
        <dc:subject xsi:type="http://purl.org/dc/terms/UDC">576.3</dc:subject>
        <dc:subject xsi:type="http://purl.org/dc/terms/UDC">576.32</dc:subject>
        <dc:title>Molecular cell biology </dc:title>
        <dc:type>Text</dc:type>
        <oclcterms:recordContentSource>ESUCM</oclcterms:recordContentSource>
        <oclcterms:recordCreationDate xsi:type="http://purl.org/oclc/terms/marc008date">161019</oclcterms:recordCreationDate>
        <oclcterms:recordIdentifier xsi:type="http://purl.org/oclc/terms/lccn">  2015957295</oclcterms:recordIdentifier>
        <oclcterms:recordIdentifier>1025972613</oclcterms:recordIdentifier>
        <oclcterms:languageOfCataloging xsi:type="http://purl.org/oclc/terms/iso639-2b">spa</oclcterms:languageOfCataloging>
        <oclcterms:recordOCLCControlNumberCross-Reference xsi:type="http://purl.org/oclc/terms/oclcmarc019">1055581760</oclcterms:recordOCLCControlNumberCross-Reference>
        <oclcterms:recordTranscribingAgency>ESUCM</oclcterms:recordTranscribingAgency>
        </oclcdcs>
        </recordData>
        </record>
        </records>
        <nextRecordPosition>2</nextRecordPosition>
        <resultSetIdleTime/>
        <echoedSearchRetrieveRequest xmlns:srw="http://www.loc.gov/zing/srw/">
        <version>1.1</version>
        <query>srw.kw = "biology"</query>
        <maximumRecords>1</maximumRecords>
        <recordSchema>info:srw/schema/1/dc</recordSchema>
        <recordPacking>xml</recordPacking>
        <startRecord>1</startRecord>
        <sortKeys>relevance</sortKeys>
        <wskey>ydY1RXi9Lx7wmUjJVYi3QlCwUEXxDmJEO5Lrvwf9nLX9vn9dnX3OeHseVTPpxjjTWajSn3r4L70jpUW4</wskey>
        <servicelevel>full</servicelevel>
        </echoedSearchRetrieveRequest>
        </searchRetrieveResponse>
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:28:53 GMT
- request:
    method: get
    uri: http://api.summon.serialssolutions.com/2.0.0/search?s.cmd=setHoldingsOnly(true)&s.he=__BENTO_HL_END__&s.hs=__BENTO_HL_START__&s.ps=1&s.q=biology
    body:
      encoding: UTF-8
      string: ''
    headers:
      User-Agent:
      - HTTPClient/1.0 (2.8.3, ruby 2.5.5 (2019-03-15))
      Accept:
      - application/json
      Date:
      - Fri, 17 Jan 2020 14:28:52 GMT
      Content-Type:
      - application/x-www-form-urlencoded; charset=utf8
      X-Summon-Date:
      - Fri, 17 Jan 2020 14:28:52 GMT
      Authorization:
      - Summon cornell;F2dI9+v/w5p03NQccmR6A8mRYZI=
      Host:
      - api.summon.serialssolutions.com:80
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 17 Jan 2020 14:28:53 GMT
      Datacenter:
      - DFW1
    body:
      encoding: UTF-8
      string: '{"version": "2.0.0","sessionId": "059441b5-c3f3-4990-9eb6-177e143b0c45","elapsedQueryTime":
        373,"queryTime": 357,"totalRequestTime": 381,"pageCount": 17481710,"recordCount":
        17481710,"query": {"queryString": "s.fvf=ContentType%2CNewspaper+Article%2Ct&s.hs=__BENTO_HL_START__&s.secure=f&s.link.rule.version=Default&s.dailyCatalog=t&s.q=biology&s.ho=t&s.ps=1&s.he=__BENTO_HL_END__","pageNumber":
        1,"pageSize": 1,"highlightStartDelimiter": "__BENTO_HL_START__","highlightEndDelimiter":
        "__BENTO_HL_END__","isHoldingsOnlyEnabled": true,"textQueries": [{"textQuery":
        "biology","removeCommand": "removeTextQuery(biology)"}],"searchTerms": [],"textFilters":
        [],"rangeFilters": [],"facetValueFilters": [{"fieldName": "ContentType","value":
        "Newspaper Article","isNegated": true,"removeCommand": "removeFacetValueFilter(ContentType,Newspaper
        Article)","negateCommand": "negateFacetValueFilter(ContentType,Newspaper Article)"}],"inclusiveFacetValueFilters":
        [],"facetValueGroupFilters": [],"facetFields": [],"rangeFacetFields": [],"sort":
        []},"facetFields": [],"rangeFacetFields": [],"didYouMeanSuggestions": [],"recommendationLists":
        {"database": [{"link": "http://cornell.summon.serialssolutions.com/2.0.0/link/dbrecommender/AAAkMDU5NDQxYjUtYzNmMy00OTkwLTllYjYtMTc3ZTE0M2IwYzQ1AQAKVlA1UVc0VUY1WAIAJWh0dHBzOi8vd3d3LmJpb21lZGNlbnRyYWwuY29tL3NlYXJjaC8DAAEwBAAZQmlvTWVkQ2VudHJhbCBPcGVuIEFjY2VzcwUACGRhdGFiYXNl","description":
        "","title": "BioMedCentral Open Access"},{"link": "http://cornell.summon.serialssolutions.com/2.0.0/link/dbrecommender/AAAkMDU5NDQxYjUtYzNmMy00OTkwLTllYjYtMTc3ZTE0M2IwYzQ1AQAKVlA1UVc0VUY1WAIASWh0dHA6Ly9wcm94eS5saWJyYXJ5LmNvcm5lbGwuZWR1L2xvZ2luP3VybD1odHRwczovL3dlYm9ma25vd2xlZGdlLmNvbS9CQ0kDAAEwBAAVQmlvc2lzIENpdGF0aW9uIEluZGV4BQAIZGF0YWJhc2U","description":
        "","title": "Biosis Citation Index"}]},"documents": [{"hasFullText": true,"isFullTextHit":
        false,"isPrint": false,"inHoldings": true,"openUrl": "ctx_ver=Z39.88-2004&ctx_enc=info%3Aofi%2Fenc%3AUTF-8&rfr_id=info%3Asid%2Fsummon.serialssolutions.com&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&rft.genre=article&rft.atitle=Synthetic+Biology-The+Synthesis+of+Biology&rft.jtitle=Angewandte+Chemie+International+Edition&rft.au=Ausl%C3%A4nder%2C+Simon&rft.au=Ausl%C3%A4nder%2C+David&rft.au=Fussenegger%2C+Martin&rft.date=2017-06-01&rft.issn=1433-7851&rft.eissn=1521-3773&rft.volume=56&rft.issue=23&rft.spage=6396&rft.epage=6419&rft_id=info:doi/10.1002%2Fanie.201609229&rft.externalDBID=n%2Fa&rft.externalDocID=10_1002_anie_201609229","link":
        "http://cornell.summon.serialssolutions.com/2.0.0/link/0/eLvHCXMwnV29TsMwELYQCMHCv6D8VBmQmCIcJ3GSsZRUIFUtqC2wWbYTSyxt1ZaBjYfgCXkS7uIkKmIAdbScSxTf2ffZvvuOkEukAAk8FbraN74LkJq6Sa6460VRDu5ZUV1UUXh6CB-fg1EnfCkP3DAXxvJD1AduODOK9RonuFTz8l6fXWP-NQZmcZowhvl7sDHAiD6v3673W2CaNrnI912sQV9xNv4S_-GTypW59kfLmLVwOp1dUl1A21CTOmJpMsPQlKVQ7IrTcfU_2yM7JTJ1WtaU9slaPj4gW-2qINwhmQ7exwAXodsR4ibtDfvirisGQ4DE0LZpL0sdae9WiK-PTzBEx0rOX-fOxPxf-IiMOumwfeeWBRtcHXgxKBiUG4F-M0k5VUnEgjiB_VVGqc6U1FmoVKx4bGicRVwrxQxTkiWw6CqWhaHyT4gjlUoMNxqTkAKuvSTneebJxGhjwEnQBrmqdCWmlpBDWOplJnDoRD108CSqUuBMXcyklmXCwWScI-eVaCEvIwf8xBvk2Gq7fiND3rwwYg3CCk398SnR6t2ndet0FaEzss0QMRQHPOdkfTF7yy_IZmlTzcKym2SjOxqmg2-35_ti","ExternalDocumentID":
        ["A492563176","10_1002_anie_201609229","27943572","ANIE201609229"],"Issue":
        ["23"],"DBID": ["CVF","NPM","EIF","CUY","ECM","CGR","CITATION","AAYXX","BSHEE"],"PublicationTitleAlternate":
        ["Angew Chem Int Ed Engl"],"Score": ["7.710108"],"PublicationPlace": ["Germany"],"ID":
        ["FETCH-LOGICAL-c4186-143b73b0da060b972489625d00cdbacd5bb8b68f08d76cbb2f2ba29153b2d55b3"],"DOI":
        ["10.1002/anie.201609229"],"Publisher": ["Wiley Subscription Services, Inc"],"Language":
        ["English"],"EISSN": ["1521-3773"],"ISSN": ["1433-7851"],"Cites_doi": ["10.1073/pnas.0703961104","10.1039/C4CS00351A","10.1002/cbic.200300685","10.1093/nar/gkr1191","10.1002/anie.200300646","10.1073/pnas.0504604102","10.1038/nature07616","10.3389/fmicb.2014.00565","10.1039/C5CS00361J","10.1093/nar/gkt002","10.1002/anie.201000826","10.1002/anie.200805311","10.1038/nature08187","10.1038/nchem.1781","10.1038/nmeth.3433","10.1021/sb4000417","10.1002/anie.201409470","10.1038/nchembio.1753","10.1002/bit.25693","10.1007/s11693-009-9040-9","10.1093/nar/gks668","10.1016/j.cell.2015.09.038","10.1038/nature04342","10.1038/nbt.2149","10.1002/ange.200805311","10.1073/pnas.1405220111","10.1038/nbt.2647","10.1038/msb.2011.55","10.1016/j.cell.2014.10.002","10.1016/j.cell.2016.01.012","10.1021/cb900041s","10.1038/nmeth.3585","10.1146/annurev-biochem-080411-124036","10.1038/nchembio.1659","10.1126/science.1067407","10.1016/j.chembiol.2014.08.011","10.1126/science.1178811","10.1002/wsbm.1345","10.1039/C5MB00763A","10.1016/j.cbpa.2012.05.198","10.7554/eLife.09771","10.1038/42264","10.1016/j.cell.2016.02.004","10.1146/annurev-biochem-072611-101825","10.1016/B978-0-12-407679-2.00004-1","10.1016/j.ymben.2013.11.003","10.1126/science.1160311","10.1002/anie.200907223","10.1038/nature13238","10.1126/science.1178817","10.1073/pnas.1111704108","10.1016/j.ymben.2012.04.004","10.1016/j.tcb.2011.07.005","10.1038/nmeth.3696","10.1016/j.ymeth.2015.05.020","10.1126/scitranslmed.aac4964","10.1186/1471-2199-9-23","10.1021/sb4001596","10.1016/j.jmb.2015.10.004","10.1038/nbt.3620","10.1093/nar/gku884","10.3389/fbioe.2016.00019","10.1038/ncomms6392","10.1038/msb.2010.99","10.1038/srep35082","10.1074/jbc.M402954200","10.1002/anie.201507978","10.1111/1462-2920.12214","10.1038/nature10761","10.1016/j.cell.2014.09.040","10.1038/nbt862","10.1126/science.1232033","10.1038/nature12466","10.1038/nchembio.98","10.1073/pnas.0911566106","10.1021/ja206915m","10.1021/sb200016s","10.1021/ar500076k","10.1002/ange.200907223","10.1002/ange.201207078","10.1002/biot.201400330","10.1126/science.1174251","10.1016/j.chembiol.2008.12.008","10.1101/gad.189035.112","10.1021/sb500314r","10.1002/ange.201507978","10.1126/science.1249252","10.1126/scitranslmed.3005568","10.1038/nmeth.2918","10.1038/nbt731","10.1016/j.tibtech.2012.11.006","10.1073/pnas.1216801110","10.1016/j.jmb.2011.01.004","10.1038/ncomms10624","10.1038/nrm3286","10.1002/anie.201412204","10.1016/j.jmb.2016.02.018","10.1016/j.copbio.2013.01.002","10.1002/bit.25198","10.1016/j.ab.2004.03.064","10.1126/science.1154413","10.1073/pnas.1208507109","10.1038/nbt1314","10.1038/nbt.2908","10.1126/science.1190719","10.1074/jbc.M312751200","10.1002/chem.201500971","10.1126/science.1205527","10.1038/nature12051","10.1016/j.copbio.2014.12.022","10.1002/1873-3468.12233","10.1038/nature14095","10.1016/j.cell.2013.12.001","10.1038/ncomms11463","10.1016/j.chembiol.2010.12.019","10.1126/science.1200520","10.1038/nbt.2689","10.1126/science.1192128","10.1038/nature08446","10.1016/j.copbio.2016.03.005","10.1126/science.aac9373","10.1038/nchem.2493","10.1038/nature09565","10.1038/nature10722","10.1021/cb400406x","10.1038/nature18930","10.1038/nchem.957","10.1038/nature10262","10.1038/nature07389","10.1038/nbt.2510","10.1126/science.1214081","10.1016/j.mib.2014.07.001","10.1093/nar/gks028","10.1016/j.copbio.2010.06.010","10.1021/sb500062p","10.1039/c2mb25091h","10.1038/ncomms10243","10.1126/science.1078395","10.1126/science.2047876","10.1126/scisignal.2001449","10.1016/j.tibtech.2014.11.010","10.1038/nm.4030","10.1021/ja3065667","10.1126/science.aad8559","10.1038/nature11117","10.1111/1751-7915.12398","10.1073/pnas.1522985113","10.1038/nchembio.273","10.1016/j.mib.2016.07.009","10.1038/nature09679","10.1093/nar/gkw108","10.1038/nrn3293","10.1126/science.1217622","10.1002/ange.200300646","10.1093/nar/gkr1251","10.1016/j.coi.2015.06.015","10.1021/ar2000293","10.1073/pnas.91.3.883","10.1038/nrg3197","10.1016/j.cell.2013.08.021","10.1002/ange.201502868","10.1073/pnas.1514383113","10.1016/j.cell.2016.01.011","10.1016/j.sbi.2016.06.012","10.1093/nar/gkh321","10.3389/fchem.2014.00015","10.1002/anie.201507634","10.1016/j.copbio.2013.02.001","10.1016/j.cbpa.2012.10.020","10.1038/nrg3927","10.1038/nrm3738","10.1038/35002125","10.1146/annurev-chembioeng-061312-103312","10.1016/j.ymben.2011.06.003","10.1016/j.cell.2014.10.004","10.1038/ncomms5408","10.1016/j.devcel.2015.12.011","10.1038/ncomms12137","10.1038/nbt.3026","10.1126/scitranslmed.aaa3601","10.1038/msb.2012.71","10.1038/nmeth.1398","10.1038/nchembio.580","10.1016/j.ymben.2015.03.016","10.1038/nbt.3198","10.1021/ja905596t","10.1002/ange.201409470","10.1038/nchembio.1890","10.1038/nature08817","10.1016/j.febslet.2012.02.038","10.1038/nbt.2675","10.1371/journal.pone.0000440","10.1186/s12915-015-0146-0","10.1016/j.ymben.2011.09.002","10.1038/nature19114","10.1038/nnano.2009.457","10.1002/anie.201305267","10.1016/j.cell.2009.04.048","10.1016/j.tibtech.2012.08.002","10.1038/ncomms11163","10.1093/nar/gkw117","10.1002/bit.20142","10.1038/nbt.3199","10.1038/nchem.1869","10.1038/nbt.3033","10.1126/science.1225829","10.1126/science.1227268","10.1016/j.tibtech.2015.05.001","10.1126/science.1232758","10.1039/c2cc35028a","10.1073/pnas.0401517101","10.3390/life4041092","10.1126/science.1225624","10.1126/science.1258096","10.15252/msb.20145558","10.1038/nbt.2351","10.1016/j.cell.2016.04.059","10.1038/35002131","10.1002/anie.201502868","10.1038/90802","10.1016/j.tig.2012.11.001","10.1093/nar/gkq954","10.1038/nature04640","10.1021/acs.accounts.6b00235","10.1021/acschembio.6b00234","10.1126/science.1205822","10.1111/1751-7915.12384","10.1073/pnas.1508521112","10.1038/nchembio.2177","10.1073/pnas.1406401111","10.1093/nar/gkn369","10.1038/81208","10.1038/nbt.3467","10.1093/nar/gkr829","10.1038/nbt.2884","10.1038/nature11149","10.1016/j.chembiol.2013.03.005","10.1038/nbt1155","10.1038/nature11516","10.1038/nrc.2016.97","10.1038/nbt.1791","10.1126/science.aac7341","10.1002/anie.201207078","10.1038/nrm2698","10.1093/nar/gks549","10.1073/pnas.1312414110","10.1038/nature14136","10.1002/ange.201507634","10.1126/science.1256272","10.1038/ncomms5729","10.1038/nature02551","10.1126/science.1211701","10.4161/rna.24482","10.1074/jbc.R109.091306","10.1038/nature13314","10.1073/pnas.2135496100","10.1126/science.7694365","10.1089/hum.2015.29002.fzh","10.1038/srep02854","10.1146/annurev-pharmtox-010611-134654","10.1146/annurev-biochem-060308-102244","10.1038/nbt.3609","10.1080/10409230903074549","10.1038/nbt.2909","10.1021/acs.nanolett.6b00507","10.1517/14712598.2015.1046430","10.1126/science.1167856","10.1038/nature13982","10.1042/BST20160076","10.1038/ncomms3825","10.1038/nbt.3481","10.1126/science.1241459","10.1039/c2cc34379g","10.1021/ja0284153","10.15252/emmm.201606541","10.1038/ncomms11247","10.1021/cb4001662","10.1038/nchembio.541","10.1016/j.cell.2014.06.034","10.1002/ange.201103010","10.1016/j.ymben.2008.12.001","10.1073/pnas.1015741108","10.1002/anie.200900851","10.1038/nmeth.1524","10.1073/pnas.141230798","10.3390/molecules19011004","10.1126/science.1231143","10.1038/nature15536","10.1038/nmeth.2926","10.1093/nar/gkm425","10.7554/eLife.03949","10.1038/nchembio.2179","10.1038/nrmicro.2015.24","10.1093/nar/gkq139","10.1038/nmeth.1401","10.1038/nmeth.3136","10.1021/sb500270h","10.1016/j.copbio.2010.08.008","10.1002/ange.201000826","10.1126/science.1200752","10.1016/j.tig.2014.09.004","10.1021/cr0306743","10.1038/nbt1307","10.1126/scitranslmed.aaa3519","10.1261/rna.045047.114","10.1016/j.molcel.2014.06.007","10.1038/nbt.2808","10.1016/j.copbio.2013.03.007","10.1038/nbt.1617","10.3390/molecules200916643","10.1016/j.drudis.2014.09.004","10.1016/j.chembiol.2010.02.012","10.1002/ange.201412204","10.1016/j.cell.2014.09.014","10.1038/nmeth.1892","10.1038/nature08753","10.1038/nmeth.2649","10.1002/ange.200900851","10.1038/nmeth.2184","10.1038/nrmicro751","10.1038/nature14862","10.1038/nature14299","10.1006/bbrc.1997.7124","10.1146/annurev-biochem-060713-035737","10.1002/anie.201103010","10.7554/eLife.00471","10.1038/nbt1226","10.1126/science.1191652","10.1073/pnas.89.12.5547","10.1038/nchembio.1554","10.1073/pnas.0901501106","10.1038/nbt.1568","10.1002/ange.201305267","10.1016/j.copbio.2003.08.005","10.1126/science.aad6253","10.1021/sb400077j","10.1021/ja900149e","10.1126/science.aab4077","10.1038/nchembio.586","10.1038/nm.3793","10.1128/MMBR.68.3.518-537.2004"],"IsScholarly":
        ["true"],"SubjectTerms": ["synthetic biology","metabolic engineering","chemical
        biology","genome engineering","bioengineering","Synthetic Biology","Animals","Genetic
        Engineering","Interdisciplinary Studies","Cell-Free System","Humans","Biocompatible
        Materials","Cell Engineering","Cell- and Tissue-Based Therapy","Biofuels","Genome","Chemical
        synthesis","Fine chemicals","Biological products"],"Discipline": ["Chemistry"],"ContentType":
        ["Journal Article"],"References": ["2016; 428","2009 2009; 48 121","2008;
        36","2012; 16","2012; 14","2012; 13","2016; 39","2016; 36","2011; 475","2016;
        34","2016; 33","2004; 32","2004; 330","2000; 18","2000; 403","2016; 42","2006;
        440","2013; 110","2012; 26","2016; 49","2010; 5","2010; 7","2010; 6","2016;
        44","2004 2004; 43 116","2013; 342","2010; 285","2013; 340","2011; 4","2011;
        3","2016; 16","2016; 14","2011; 133","2016; 13","2011; 7","2012; 30","2016;
        12","2016; 11","2004; 429","2015; 350","2016; 4","2016; 6","2016; 7","2013;
        339","2015; 112","2013; 82","2012; 48","2016; 8","2016; 9","2012; 40","2016;
        22","2013; 29","2013; 24","2013; 20","2004; 68","2008; 9","2008; 4","2007;
        35","2013 2013; 52 125","2014; 5","2013; 15","2014; 4","2014; 3","2014; 2","2013;
        10","2016; 113","2001; 19","2003; 4","2016; 353","2016; 352","2003; 1","2012;
        335","2012; 336","1992; 89","2012; 337","2014; 6","2016; 351","2012; 338","2009;
        323","2014; 55","2007; 25","2009; 325","2009; 326","2016; 590","2004; 87","2015;
        163","2011; 333","2015; 4","2010; 79","2013; 41","1993; 262","2008; 322","2008;
        320","2014; 83","2015; 7","2011; 332","2011; 108","2014; 508","2011; 469","2002;
        20","2014; 509","2013; 31","2009; 6","2008; 456","2009; 4","2009; 3","2003;
        300","2007; 104","2012; 481","2013; 3","2007; 107","2012; 485","2013; 4","2013;
        2","2012; 487","2010; 17","2010; 464","2010; 463","2013; 8","2013; 5","2014;
        21","2013; 9","2014; 20","1997; 388","2012; 491","2009; 11","2010; 21","2009;
        10","2012; 134","2006; 24","2010; 28","2011; 407","2005; 102","2015; 86","2014;
        15","2014; 19","2007; 2","2009; 16","2014; 11","2014; 10","2010; 38","2010;
        329","2012; 586","2015; 520","2013; 500","2015; 55","2014; 47","2016; 165","2015;
        527","2015; 524","2016; 164","2014; 158","2014; 159","2012; 109","2009; 457","2014;
        42","2004; 279","2010; 330","2015; 518","2015; 517","2011 2011; 50 123","2009;
        460","2009; 461","2014; 30","1994; 91","2003; 100","2003; 21","2014; 32","2009;
        106","2015; 35","2009; 44","2015; 34","1997; 237","2015; 33","2003; 14","2015;
        349","2011; 18","2005; 23","2015; 44","2013; 155","2015 2015; 54 127","2011;
        21","2013; 154","2003; 125","2011; 29","2001; 98","2004; 101","2015; 13","1991;
        252","2015; 12","2015; 15","2015; 16","2002; 296","2015; 11","2015; 10","2005;
        438","2009; 131","2011; 39","2014; 111","2009; 27","2009; 137","2015; 26","2016
        2016; 55 128","2015; 29","2012; 1","2016; 537","2016; 536","2015; 20","2015;
        21","2013; 496","2011; 44","2014; 346","2012; 8","2012; 9","2014; 344","10.1002/anie.201609229-BIB0006|anie201609229-cit-0027","Isaacs
        (10.1002/anie.201609229-BIB0102|anie201609229-cit-0267) 2011; 333","Toure
        (10.1002/anie.201609229-BIB0043b|anie201609229-cit-0167) 2016; 55","Biner
        (10.1002/anie.201609229-BIB0183|anie201609229-cit-0398) 2016; 590","Beisel
        (10.1002/anie.201609229-BIB0032b|anie201609229-cit-0145) 2011; 39","Hsu (10.1002/anie.201609229-BIB0088c|anie201609229-cit-0240)
        2013; 31","Guet (10.1002/anie.201609229-BIB0124|anie201609229-cit-0310) 2002;
        296","Bradley (10.1002/anie.201609229-BIB0002e|anie201609229-cit-0009) 2016;
        428","Ma (10.1002/anie.201609229-BIB0075|anie201609229-cit-0210) 2014; 19","10.1002/anie.201609229-BIB0117|anie201609229-cit-0300","Heinisch
        (10.1002/anie.201609229-BIB0061|anie201609229-cit-0191) 2016; 49","Krishnan
        (10.1002/anie.201609229-BIB0018b|anie201609229-cit-0081) 2011; 50","Tigges
        (10.1002/anie.201609229-BIB0136|anie201609229-cit-0330) 2009; 457","Endy (10.1002/anie.201609229-BIB0001a|anie201609229-cit-0002)
        2005; 438","Turan (10.1002/anie.201609229-BIB0078|anie201609229-cit-0215)
        2011; 407","(10.1002/anie.201609229-BIB0035.2|anie201609229-cit-0153) 2009;
        121","10.1002/anie.201609229-BIB0088|anie201609229-cit-0237","Schwille (10.1002/anie.201609229-BIB0017b|anie201609229-cit-0075)
        2009; 44","Kim (10.1002/anie.201609229-BIB0020j|anie201609229-cit-0102) 2015;
        29","Wieland (10.1002/anie.201609229-BIB0034a|anie201609229-cit-0150) 2010;
        21","10.1002/anie.201609229-BIB0060|anie201609229-cit-0188","Stricker (10.1002/anie.201609229-BIB0135|anie201609229-cit-0329)
        2008; 456","Fernandes (10.1002/anie.201609229-BIB0146|anie201609229-cit-0346)
        2010; 5","Kim (10.1002/anie.201609229-BIB0082a|anie201609229-cit-0220) 1994;
        91","Griss (10.1002/anie.201609229-BIB0056|anie201609229-cit-0184) 2014; 10","Gardner
        (10.1002/anie.201609229-BIB0009|anie201609229-cit-0045) 2000; 403","(10.1002/anie.201609229-BIB0008e.2|anie201609229-cit-0044)
        2004; 116","Schwille (10.1002/anie.201609229-BIB0017a|anie201609229-cit-0074)
        2011; 333","Ausländer (10.1002/anie.201609229-BIB0131|anie201609229-cit-0323)
        2014; 11","Guye (10.1002/anie.201609229-BIB0156|anie201609229-cit-0359) 2016;
        7","10.1002/anie.201609229-BIB0017|anie201609229-cit-0073","Doroghazi (10.1002/anie.201609229-BIB0117c|anie201609229-cit-0303)
        2014; 10","Hartner (10.1002/anie.201609229-BIB0110b|anie201609229-cit-0286)
        2008; 36","Stano (10.1002/anie.201609229-BIB0017e|anie201609229-cit-0078)
        2013; 24","Stojanovic (10.1002/anie.201609229-BIB0176|anie201609229-cit-0387)
        2003; 21","Suess (10.1002/anie.201609229-BIB0020k|anie201609229-cit-0103)
        2004; 32","Hodgman (10.1002/anie.201609229-BIB0016c|anie201609229-cit-0071)
        2012; 14","Grabow (10.1002/anie.201609229-BIB0018a|anie201609229-cit-0080)
        2014; 47","Zieske (10.1002/anie.201609229-BIB0188|anie201609229-cit-0406)
        2014; 3","Cellitti (10.1002/anie.201609229-BIB0077a|anie201609229-cit-0213)
        2011; 7","Douglas (10.1002/anie.201609229-BIB0180|anie201609229-cit-0395)
        2012; 335","Wu (10.1002/anie.201609229-BIB0027e|anie201609229-cit-0129) 2015;
        350","Polstein (10.1002/anie.201609229-BIB0024d|anie201609229-cit-0121) 2015;
        11","Levskaya (10.1002/anie.201609229-BIB0045b|anie201609229-cit-0173) 2009;
        461","10.1002/anie.201609229-BIB0077|anie201609229-cit-0212","Hwang (10.1002/anie.201609229-BIB0148|anie201609229-cit-0348)
        2014; 3","Aw (10.1002/anie.201609229-BIB0167b|anie201609229-cit-0374) 2016;
        44","Renata (10.1002/anie.201609229-BIB0004e|anie201609229-cit-0020) 2015;
        54","10.1002/anie.201609229-BIB0100|anie201609229-cit-0262","Bhadra (10.1002/anie.201609229-BIB0167c|anie201609229-cit-0375)
        2014; 20","Janse (10.1002/anie.201609229-BIB0041a|anie201609229-cit-0162)
        2004; 279","Rogers (10.1002/anie.201609229-BIB0011e|anie201609229-cit-0052)
        2016; 42","(10.1002/anie.201609229-BIB0029a.2|anie201609229-cit-0135) 2015;
        127","Klauser (10.1002/anie.201609229-BIB0128b|anie201609229-cit-0316) 2012;
        8","Yim (10.1002/anie.201609229-BIB0116|anie201609229-cit-0299) 2011; 7","Forlin
        (10.1002/anie.201609229-BIB0017d|anie201609229-cit-0077) 2012; 16","Edwards
        (10.1002/anie.201609229-BIB0079|anie201609229-cit-0216) 2009; 4","Feil (10.1002/anie.201609229-BIB0080|anie201609229-cit-0217)
        1997; 237","Ausländer (10.1002/anie.201609229-BIB0129a|anie201609229-cit-0318)
        2012; 487","Slomovic (10.1002/anie.201609229-BIB0023c|anie201609229-cit-0115)
        2015; 12","Cabantous (10.1002/anie.201609229-BIB0057|anie201609229-cit-0185)
        2013; 3","Brun (10.1002/anie.201609229-BIB0055|anie201609229-cit-0183) 2009;
        131","Billerbeck (10.1002/anie.201609229-BIB0016a|anie201609229-cit-0069)
        2013; 24","Courbet (10.1002/anie.201609229-BIB0161|anie201609229-cit-0364)
        2015; 7","Ye (10.1002/anie.201609229-BIB0021d|anie201609229-cit-0108) 2013;
        110","Kim (10.1002/anie.201609229-BIB0030b|anie201609229-cit-0141) 2008; 9","Li
        (10.1002/anie.201609229-BIB0119|anie201609229-cit-0305) 2016; 7","Gibson (10.1002/anie.201609229-BIB0015a|anie201609229-cit-0066)
        2010; 329","Muller (10.1002/anie.201609229-BIB0024b|anie201609229-cit-0119)
        2013; 41","Florea (10.1002/anie.201609229-BIB0123|anie201609229-cit-0309)
        2016; 113","Dimitrov (10.1002/anie.201609229-BIB0052|anie201609229-cit-0180)
        2007; 2","10.1002/anie.201609229-BIB0013|anie201609229-cit-0054","Liu (10.1002/anie.201609229-BIB0092|anie201609229-cit-0250)
        2016; 12","10.1002/anie.201609229-BIB0023|anie201609229-cit-0112","Schaerli
        (10.1002/anie.201609229-BIB0046|anie201609229-cit-0174) 2014; 42","Mali (10.1002/anie.201609229-BIB0090a|anie201609229-cit-0245)
        2013; 31","10.1002/anie.201609229-BIB0003|anie201609229-cit-0010","Salis (10.1002/anie.201609229-BIB0111|anie201609229-cit-0291)
        2009; 27","Malyshev (10.1002/anie.201609229-BIB0069|anie201609229-cit-0201)
        2014; 509","10.1002/anie.201609229-BIB0178|anie201609229-cit-0389","Weigand
        (10.1002/anie.201609229-BIB0030a|anie201609229-cit-0140) 2007; 35","Klauser
        (10.1002/anie.201609229-BIB0019d|anie201609229-cit-0090) 2015; 4","10.1002/anie.201609229-BIB0084|anie201609229-cit-0225","Hutchison
        (10.1002/anie.201609229-BIB0015b|anie201609229-cit-0067) 2016; 351","Knopfel
        (10.1002/anie.201609229-BIB0049|anie201609229-cit-0177) 2012; 13","10.1002/anie.201609229-BIB0027|anie201609229-cit-0124","Fesnak
        (10.1002/anie.201609229-BIB0157|anie201609229-cit-0360) 2016; 16","Blain (10.1002/anie.201609229-BIB0017c|anie201609229-cit-0076)
        2014; 83","van Roekel (10.1002/anie.201609229-BIB0162a|anie201609229-cit-0366)
        2015; 44","Din (10.1002/anie.201609229-BIB0139|anie201609229-cit-0335) 2016;
        536","(10.1002/anie.201609229-BIB0004e.2|anie201609229-cit-0021) 2015; 127","Takahashi
        (10.1002/anie.201609229-BIB0171|anie201609229-cit-0382) 2015; 86","10.1002/anie.201609229-BIB0087|anie201609229-cit-0233","Banala
        (10.1002/anie.201609229-BIB0058|anie201609229-cit-0186) 2013; 8","Kramer (10.1002/anie.201609229-BIB0125|anie201609229-cit-0311)
        2004; 87","Wang (10.1002/anie.201609229-BIB0173|anie201609229-cit-0384) 2011;
        18","10.1002/anie.201609229-BIB0032|anie201609229-cit-0143","Kashida (10.1002/anie.201609229-BIB0032a|anie201609229-cit-0144)
        2012; 40","Kemmer (10.1002/anie.201609229-BIB0020c|anie201609229-cit-0094)
        2010; 28","Nakamura (10.1002/anie.201609229-BIB0115|anie201609229-cit-0298)
        2003; 14","Medema (10.1002/anie.201609229-BIB0117a|anie201609229-cit-0301)
        2015; 11","Nissim (10.1002/anie.201609229-BIB0027a|anie201609229-cit-0125)
        2010; 6","Charpentier (10.1002/anie.201609229-BIB0106a|anie201609229-cit-0277)
        2014; 19","Prochazka (10.1002/anie.201609229-BIB0142b|anie201609229-cit-0342)
        2014; 5","Lluch-Senar (10.1002/anie.201609229-BIB0100b|anie201609229-cit-0264)
        2015; 11","Wittmann (10.1002/anie.201609229-BIB0034b|anie201609229-cit-0151)
        2012; 586","Weber (10.1002/anie.201609229-BIB0151|anie201609229-cit-0351)
        2009; 11","Laos (10.1002/anie.201609229-BIB0007b|anie201609229-cit-0033) 2014;
        5","Regot (10.1002/anie.201609229-BIB0129b|anie201609229-cit-0319) 2011; 469","Gasiunas
        (10.1002/anie.201609229-BIB0084a|anie201609229-cit-0226) 2012; 109","Meyer
        (10.1002/anie.201609229-BIB0039|anie201609229-cit-0159) 2016; 113","Saxena
        (10.1002/anie.201609229-BIB0155|anie201609229-cit-0358) 2016; 7","Roquet (10.1002/anie.201609229-BIB0134|anie201609229-cit-0328)
        2016; 353","Courbet (10.1002/anie.201609229-BIB0109a|anie201609229-cit-0282)
        2016; 8","Chen (10.1002/anie.201609229-BIB0067|anie201609229-cit-0197) 2016;
        8","Porteus (10.1002/anie.201609229-BIB0082b|anie201609229-cit-0221) 2003;
        300","Chakravarti (10.1002/anie.201609229-BIB0013b|anie201609229-cit-0056)
        2015; 33","Seeman (10.1002/anie.201609229-BIB0018d|anie201609229-cit-0084)
        2010; 79","10.1002/anie.201609229-BIB0043|anie201609229-cit-0165","Borkowski
        (10.1002/anie.201609229-BIB0107|anie201609229-cit-0279) 2016; 33","Bailey
        (10.1002/anie.201609229-BIB0011a|anie201609229-cit-0048) 1991; 252","Rezania
        (10.1002/anie.201609229-BIB0153c|anie201609229-cit-0356) 2014; 32","10.1002/anie.201609229-BIB0140|anie201609229-cit-0336","Prindle
        (10.1002/anie.201609229-BIB0138|anie201609229-cit-0334) 2014; 508","Elowitz
        (10.1002/anie.201609229-BIB0170|anie201609229-cit-0381) 2000; 403","Buckley
        (10.1002/anie.201609229-BIB0045a|anie201609229-cit-0172) 2016; 36","Weber
        (10.1002/anie.201609229-BIB0019b|anie201609229-cit-0088) 2002; 20","Lienert
        (10.1002/anie.201609229-BIB0013d|anie201609229-cit-0058) 2014; 15","10.1002/anie.201609229-BIB0021|anie201609229-cit-0104","Pinheiro
        (10.1002/anie.201609229-BIB0068b|anie201609229-cit-0200) 2012; 336","Siegmund
        (10.1002/anie.201609229-BIB0066|anie201609229-cit-0196) 2012; 48","Folcher
        (10.1002/anie.201609229-BIB0029b|anie201609229-cit-0136) 2014; 5","Auslander
        (10.1002/anie.201609229-BIB0033b|anie201609229-cit-0148) 2011; 39","Cimermancic
        (10.1002/anie.201609229-BIB0117b|anie201609229-cit-0302) 2014; 158","Juhas
        (10.1002/anie.201609229-BIB0014c|anie201609229-cit-0063) 2011; 21","Purnick
        (10.1002/anie.201609229-BIB0001b|anie201609229-cit-0003) 2009; 10","10.1002/anie.201609229-BIB0169|anie201609229-cit-0377","Zhu
        (10.1002/anie.201609229-BIB0174|anie201609229-cit-0385) 2014; 111","Guilinger
        (10.1002/anie.201609229-BIB0089a|anie201609229-cit-0242) 2014; 32","Pardee
        (10.1002/anie.201609229-BIB0023b|anie201609229-cit-0114) 2016; 165","Wieland
        (10.1002/anie.201609229-BIB0038|anie201609229-cit-0158) 2010; 17","Danchin
        (10.1002/anie.201609229-BIB0098|anie201609229-cit-0260) 2016; 9","Zhang (10.1002/anie.201609229-BIB0106b|anie201609229-cit-0278)
        2015; 26","10.1002/anie.201609229-BIB0018|anie201609229-cit-0079","Beilstein
        (10.1002/anie.201609229-BIB0036a|anie201609229-cit-0155) 2015; 4","10.1002/anie.201609229-BIB0036|anie201609229-cit-0154","Karig
        (10.1002/anie.201609229-BIB0169a|anie201609229-cit-0378) 2012; 40","Acevedo-Rocha
        (10.1002/anie.201609229-BIB0014a|anie201609229-cit-0061) 2013; 29","Doench
        (10.1002/anie.201609229-BIB0088a|anie201609229-cit-0238) 2014; 32","Pfleger
        (10.1002/anie.201609229-BIB0110d|anie201609229-cit-0288) 2006; 24","Tsai (10.1002/anie.201609229-BIB0089b|anie201609229-cit-0243)
        2014; 32","Marliere (10.1002/anie.201609229-BIB0105a|anie201609229-cit-0271)
        2009; 3","Platt (10.1002/anie.201609229-BIB0095|anie201609229-cit-0257) 2014;
        159","Akter (10.1002/anie.201609229-BIB0167a|anie201609229-cit-0373) 2015;
        4","Rinaudo (10.1002/anie.201609229-BIB0141|anie201609229-cit-0339) 2007;
        25","Chin (10.1002/anie.201609229-BIB0008a|anie201609229-cit-0039) 2014; 83","Noireaux
        (10.1002/anie.201609229-BIB0016d|anie201609229-cit-0072) 2003; 100","Danino
        (10.1002/anie.201609229-BIB0160|anie201609229-cit-0363) 2015; 7","Polstein
        (10.1002/anie.201609229-BIB0024c|anie201609229-cit-0120) 2012; 134","Winkler
        (10.1002/anie.201609229-BIB0020d|anie201609229-cit-0095) 2003; 4","Spencer
        (10.1002/anie.201609229-BIB0027c|anie201609229-cit-0127) 1993; 262","10.1002/anie.201609229-BIB0024|anie201609229-cit-0117","Paddon
        (10.1002/anie.201609229-BIB0120|anie201609229-cit-0306) 2013; 496","Niopek
        (10.1002/anie.201609229-BIB0028b|anie201609229-cit-0132) 2016; 7","Smanski
        (10.1002/anie.201609229-BIB0011c|anie201609229-cit-0050) 2016; 14","Acevedo-Rocha
        (10.1002/anie.201609229-BIB0105c|anie201609229-cit-0273) 2011; 50","Pardee
        (10.1002/anie.201609229-BIB0165|anie201609229-cit-0370) 2014; 159","10.1002/anie.201609229-BIB0162|anie201609229-cit-0365","10.1002/anie.201609229-BIB0083|anie201609229-cit-0222","Pagliuca
        (10.1002/anie.201609229-BIB0153b|anie201609229-cit-0355) 2014; 159","10.1002/anie.201609229-BIB0014|anie201609229-cit-0060","Young
        (10.1002/anie.201609229-BIB0008d|anie201609229-cit-0042) 2010; 285","Lajoie
        (10.1002/anie.201609229-BIB0103|anie201609229-cit-0268) 2013; 342","Ausländer
        (10.1002/anie.201609229-BIB0013a|anie201609229-cit-0055) 2012; 14","10.1002/anie.201609229-BIB0091|anie201609229-cit-0247","10.1002/anie.201609229-BIB0128|anie201609229-cit-0314","Neumann
        (10.1002/anie.201609229-BIB0073|anie201609229-cit-0208) 2010; 464","Ro (10.1002/anie.201609229-BIB0108|anie201609229-cit-0280)
        2006; 440","Anderson (10.1002/anie.201609229-BIB0071a|anie201609229-cit-0205)
        2004; 101","Tian (10.1002/anie.201609229-BIB0053|anie201609229-cit-0181) 2009;
        6","Gitzinger (10.1002/anie.201609229-BIB0020a|anie201609229-cit-0092) 2009;
        106","Alper (10.1002/anie.201609229-BIB0110a|anie201609229-cit-0285) 2005;
        102","Heidebrecht (10.1002/anie.201609229-BIB0122|anie201609229-cit-0308)
        2013; 82","Tizei (10.1002/anie.201609229-BIB0006b|anie201609229-cit-0029)
        2016; 44","Rössger (10.1002/anie.201609229-BIB0020g|anie201609229-cit-0099)
        2014; 21","10.1002/anie.201609229-BIB0028|anie201609229-cit-0130","10.1002/anie.201609229-BIB0002|anie201609229-cit-0004","Boch
        (10.1002/anie.201609229-BIB0083a|anie201609229-cit-0223) 2009; 326","Pinheiro
        (10.1002/anie.201609229-BIB0007c|anie201609229-cit-0034) 2012; 16","Wong (10.1002/anie.201609229-BIB0129c|anie201609229-cit-0320)
        2015; 13","(10.1002/anie.201609229-BIB0004d.2|anie201609229-cit-0019) 2011;
        123","Slomovic (10.1002/anie.201609229-BIB0109b|anie201609229-cit-0283) 2015;
        112","Dietz (10.1002/anie.201609229-BIB0179b|anie201609229-cit-0394) 2009;
        325","Attwater (10.1002/anie.201609229-BIB0189a|anie201609229-cit-0408) 2013;
        5","Kosuri (10.1002/anie.201609229-BIB0097|anie201609229-cit-0259) 2014; 11","Famulok
        (10.1002/anie.201609229-BIB0006c|anie201609229-cit-0030) 2011; 44","(10.1002/anie.201609229-BIB0044.2|anie201609229-cit-0170)
        2016; 128","Rovner (10.1002/anie.201609229-BIB0104|anie201609229-cit-0269)
        2015; 518","Davis (10.1002/anie.201609229-BIB0008b|anie201609229-cit-0040)
        2012; 13","Bacchus (10.1002/anie.201609229-BIB0143|anie201609229-cit-0343)
        2012; 30","(10.1002/anie.201609229-BIB0043b.2|anie201609229-cit-0168) 2016;
        128","Nern (10.1002/anie.201609229-BIB0081|anie201609229-cit-0218) 2011; 108","Ye
        (10.1002/anie.201609229-BIB0100c|anie201609229-cit-0265) 2016; 6","Ran (10.1002/anie.201609229-BIB0090b|anie201609229-cit-0246)
        2013; 154","Hilvert (10.1002/anie.201609229-BIB0004c|anie201609229-cit-0017)
        2013; 82","Gossen (10.1002/anie.201609229-BIB0019c|anie201609229-cit-0089)
        1992; 89","Doudna (10.1002/anie.201609229-BIB0003b|anie201609229-cit-0012)
        2014; 346","(10.1002/anie.201609229-BIB0020e.2|anie201609229-cit-0097) 2009;
        121","Ausländer (10.1002/anie.201609229-BIB0002a|anie201609229-cit-0005) 2013;
        31","Mali (10.1002/anie.201609229-BIB0085c|anie201609229-cit-0231) 2013; 339","Koonin
        (10.1002/anie.201609229-BIB0014d|anie201609229-cit-0064) 2003; 1","10.1002/anie.201609229-BIB0137|anie201609229-cit-0331","Acevedo-Rocha
        (10.1002/anie.201609229-BIB0105d|anie201609229-cit-0275) 2016; 9","Saragliadis
        (10.1002/anie.201609229-BIB0025|anie201609229-cit-0122) 2013; 10","Jiménez
        (10.1002/anie.201609229-BIB0182|anie201609229-cit-0397) 2013; 15","Sakamoto
        (10.1002/anie.201609229-BIB0043a|anie201609229-cit-0166) 2001; 98","Annaluru
        (10.1002/anie.201609229-BIB0099|anie201609229-cit-0261) 2014; 344","(10.1002/anie.201609229-BIB0187.2|anie201609229-cit-0405)
        2013; 125","Benenson (10.1002/anie.201609229-BIB0175|anie201609229-cit-0386)
        2004; 429","Reetz (10.1002/anie.201609229-BIB0004d|anie201609229-cit-0018)
        2011; 50","Mali (10.1002/anie.201609229-BIB0003c|anie201609229-cit-0013) 2013;
        10","10.1002/anie.201609229-BIB0033|anie201609229-cit-0146","Lai (10.1002/anie.201609229-BIB0044|anie201609229-cit-0169)
        2016; 55","10.1002/anie.201609229-BIB0109|anie201609229-cit-0281","Wang (10.1002/anie.201609229-BIB0072|anie201609229-cit-0207)
        2007; 25","Plückthun (10.1002/anie.201609229-BIB0060b|anie201609229-cit-0190)
        2015; 55","Gil (10.1002/anie.201609229-BIB0100a|anie201609229-cit-0263) 2004;
        68","Gitzinger (10.1002/anie.201609229-BIB0020b|anie201609229-cit-0093) 2012;
        40","10.1002/anie.201609229-BIB0029|anie201609229-cit-0133","Renicke (10.1002/anie.201609229-BIB0041b|anie201609229-cit-0163)
        2013; 20","10.1002/anie.201609229-BIB0008|anie201609229-cit-0038","Miyawaki
        (10.1002/anie.201609229-BIB0050|anie201609229-cit-0178) 1997; 388","Burrill
        (10.1002/anie.201609229-BIB0140a|anie201609229-cit-0337) 2012; 26","Kim (10.1002/anie.201609229-BIB0029a|anie201609229-cit-0134)
        2015; 54","Guinn (10.1002/anie.201609229-BIB0129d|anie201609229-cit-0321)
        2014; 3","Wu (10.1002/anie.201609229-BIB0013e|anie201609229-cit-0059) 2015;
        35","Ajikumar (10.1002/anie.201609229-BIB0118|anie201609229-cit-0304) 2010;
        330","Zetsche (10.1002/anie.201609229-BIB0087a|anie201609229-cit-0234) 2015;
        163","Gordley (10.1002/anie.201609229-BIB0002d|anie201609229-cit-0008) 2016;
        39","Wieland (10.1002/anie.201609229-BIB0020e|anie201609229-cit-0096) 2009;
        48","Raman (10.1002/anie.201609229-BIB0005c|anie201609229-cit-0025) 2014;
        30","(10.1002/anie.201609229-BIB0105c.2|anie201609229-cit-0274) 2011; 123","Benenson
        (10.1002/anie.201609229-BIB0002b|anie201609229-cit-0006) 2012; 13","Shimizu
        (10.1002/anie.201609229-BIB0163|anie201609229-cit-0368) 2001; 19","10.1002/anie.201609229-BIB0019|anie201609229-cit-0086","Qian
        (10.1002/anie.201609229-BIB0178a|anie201609229-cit-0390) 2011; 332","Morsut
        (10.1002/anie.201609229-BIB0029d|anie201609229-cit-0138) 2016; 164","Prindle
        (10.1002/anie.201609229-BIB0137a|anie201609229-cit-0332) 2012; 481","Tamsir
        (10.1002/anie.201609229-BIB0132|anie201609229-cit-0324) 2011; 469","Zhang
        (10.1002/anie.201609229-BIB0110e|anie201609229-cit-0289) 2012; 30","Green
        (10.1002/anie.201609229-BIB0023a|anie201609229-cit-0113) 2014; 159","Jeschek
        (10.1002/anie.201609229-BIB0110c|anie201609229-cit-0287) 2016; 7","Stein (10.1002/anie.201609229-BIB0005d|anie201609229-cit-0026)
        2014; 111","Moon (10.1002/anie.201609229-BIB0130|anie201609229-cit-0322) 2012;
        491","Konermann (10.1002/anie.201609229-BIB0024a|anie201609229-cit-0118) 2013;
        500","Navarro (10.1002/anie.201609229-BIB0042|anie201609229-cit-0164) 2016;
        11","Nishimura (10.1002/anie.201609229-BIB0020f|anie201609229-cit-0098) 2009;
        6","Reichheld (10.1002/anie.201609229-BIB0026|anie201609229-cit-0123) 2009;
        106","Farzadfard (10.1002/anie.201609229-BIB0140b|anie201609229-cit-0338)
        2014; 346","Saeidi (10.1002/anie.201609229-BIB0144|anie201609229-cit-0344)
        2011; 7","Wu (10.1002/anie.201609229-BIB0147|anie201609229-cit-0347) 2013;
        9","Lucks (10.1002/anie.201609229-BIB0023d|anie201609229-cit-0116) 2011; 108","Hoesl
        (10.1002/anie.201609229-BIB0070|anie201609229-cit-0202) 2015; 54","10.1002/anie.201609229-BIB0094|anie201609229-cit-0254","Brophy
        (10.1002/anie.201609229-BIB0002c|anie201609229-cit-0007) 2014; 11","Niederholtmeyer
        (10.1002/anie.201609229-BIB0169b|anie201609229-cit-0379) 2015; 4","10.1002/anie.201609229-BIB0015|anie201609229-cit-0065","Venayak
        (10.1002/anie.201609229-BIB0112b|anie201609229-cit-0294) 2015; 34","10.1002/anie.201609229-BIB0186|anie201609229-cit-0401","Cox
        (10.1002/anie.201609229-BIB0003a|anie201609229-cit-0011) 2015; 21","Zhang
        (10.1002/anie.201609229-BIB0018e|anie201609229-cit-0085) 2011; 3","10.1002/anie.201609229-BIB0001|anie201609229-cit-0001","Chmielewski
        (10.1002/anie.201609229-BIB0159|anie201609229-cit-0362) 2015; 15","10.1002/anie.201609229-BIB0082|anie201609229-cit-0219","Jinek
        (10.1002/anie.201609229-BIB0084b|anie201609229-cit-0227) 2012; 337","Schukur
        (10.1002/anie.201609229-BIB0149|anie201609229-cit-0349) 2016; 8","Roybal (10.1002/anie.201609229-BIB0158|anie201609229-cit-0361)
        2016; 164","Cong (10.1002/anie.201609229-BIB0085a|anie201609229-cit-0229)
        2013; 339","10.1002/anie.201609229-BIB0011|anie201609229-cit-0047","Karpinski
        (10.1002/anie.201609229-BIB0063|anie201609229-cit-0193) 2016; 34","Win (10.1002/anie.201609229-BIB0036b|anie201609229-cit-0156)
        2007; 104","Lambertz (10.1002/anie.201609229-BIB0186b|anie201609229-cit-0403)
        2016; 16","Michener (10.1002/anie.201609229-BIB0113|anie201609229-cit-0296)
        2012; 14","Ke (10.1002/anie.201609229-BIB0179a|anie201609229-cit-0393) 2012;
        338","Winnacker (10.1002/anie.201609229-BIB0007e|anie201609229-cit-0036) 2013;
        52","Linko (10.1002/anie.201609229-BIB0018c|anie201609229-cit-0083) 2013;
        24","Nakayama (10.1002/anie.201609229-BIB0166|anie201609229-cit-0371) 2012;
        48","Weitz (10.1002/anie.201609229-BIB0184|anie201609229-cit-0399) 2014; 6","Vater
        (10.1002/anie.201609229-BIB0007d|anie201609229-cit-0035) 2015; 20","Mehl (10.1002/anie.201609229-BIB0076|anie201609229-cit-0211)
        2003; 125","Ran (10.1002/anie.201609229-BIB0086|anie201609229-cit-0232) 2015;
        520","10.1002/anie.201609229-BIB0133|anie201609229-cit-0325","10.1002/anie.201609229-BIB0071|anie201609229-cit-0204","10.1002/anie.201609229-BIB0110|anie201609229-cit-0284","Vegas
        (10.1002/anie.201609229-BIB0154|anie201609229-cit-0357) 2016; 22","Niu (10.1002/anie.201609229-BIB0071b|anie201609229-cit-0206)
        2013; 8","Skjoedt (10.1002/anie.201609229-BIB0114|anie201609229-cit-0297)
        2016; 12","10.1002/anie.201609229-BIB0005|anie201609229-cit-0022","Shechner
        (10.1002/anie.201609229-BIB0093a|anie201609229-cit-0252) 2015; 12","10.1002/anie.201609229-BIB0090|anie201609229-cit-0244","10.1002/anie.201609229-BIB0106|anie201609229-cit-0276","Rossger
        (10.1002/anie.201609229-BIB0020i|anie201609229-cit-0101) 2013; 110","Shin
        (10.1002/anie.201609229-BIB0169c|anie201609229-cit-0380) 2012; 1","Ausländer
        (10.1002/anie.201609229-BIB0029c|anie201609229-cit-0137) 2014; 5","Grunberg
        (10.1002/anie.201609229-BIB0005b|anie201609229-cit-0024) 2010; 38","Hunsicker
        (10.1002/anie.201609229-BIB0033a|anie201609229-cit-0147) 2009; 16","Saito
        (10.1002/anie.201609229-BIB0031|anie201609229-cit-0142) 2010; 6","Pellinen
        (10.1002/anie.201609229-BIB0164|anie201609229-cit-0369) 2004; 330","10.1002/anie.201609229-BIB0129|anie201609229-cit-0317","10.1002/anie.201609229-BIB0007|anie201609229-cit-0031","Taylor
        (10.1002/anie.201609229-BIB0068a|anie201609229-cit-0199) 2015; 518","Mandell
        (10.1002/anie.201609229-BIB0105b|anie201609229-cit-0272) 2015; 527","Ausländer
        (10.1002/anie.201609229-BIB0021a|anie201609229-cit-0105) 2014; 55","Brun (10.1002/anie.201609229-BIB0054|anie201609229-cit-0182)
        2011; 133","10.1002/anie.201609229-BIB0112|anie201609229-cit-0292","10.1002/anie.201609229-BIB0167|anie201609229-cit-0372","Du
        (10.1002/anie.201609229-BIB0110f|anie201609229-cit-0290) 2012; 40","Jinek
        (10.1002/anie.201609229-BIB0085b|anie201609229-cit-0230) 2013; 2","Diafa (10.1002/anie.201609229-BIB0007a|anie201609229-cit-0032)
        2015; 20","10.1002/anie.201609229-BIB0189|anie201609229-cit-0407","10.1002/anie.201609229-BIB0089|anie201609229-cit-0241","Liu
        (10.1002/anie.201609229-BIB0128a|anie201609229-cit-0315) 2012; 9","Dudley
        (10.1002/anie.201609229-BIB0016b|anie201609229-cit-0070) 2015; 10","Chu (10.1002/anie.201609229-BIB0091a|anie201609229-cit-0248)
        2015; 33","Stein (10.1002/anie.201609229-BIB0048|anie201609229-cit-0176) 2015;
        33","10.1002/anie.201609229-BIB0034|anie201609229-cit-0149","Woolston (10.1002/anie.201609229-BIB0011d|anie201609229-cit-0051)
        2013; 4","(10.1002/anie.201609229-BIB0018b.2|anie201609229-cit-0082) 2011;
        123","Wong (10.1002/anie.201609229-BIB0047|anie201609229-cit-0175) 2015; 10","Kim
        (10.1002/anie.201609229-BIB0087b|anie201609229-cit-0235) 2016; 34","Schmitt
        (10.1002/anie.201609229-BIB0185|anie201609229-cit-0400) 2016; 4","Richardson
        (10.1002/anie.201609229-BIB0091b|anie201609229-cit-0249) 2016; 34","Currin
        (10.1002/anie.201609229-BIB0004b|anie201609229-cit-0016) 2015; 44","Ausländer
        (10.1002/anie.201609229-BIB0168|anie201609229-cit-0376) 2016; 44","Fussenegger
        (10.1002/anie.201609229-BIB0019a|anie201609229-cit-0087) 2000; 18","10.1002/anie.201609229-BIB0068|anie201609229-cit-0198","Juhas
        (10.1002/anie.201609229-BIB0014b|anie201609229-cit-0062) 2012; 30","Langecker
        (10.1002/anie.201609229-BIB0181|anie201609229-cit-0396) 2012; 338","Culler
        (10.1002/anie.201609229-BIB0022a|anie201609229-cit-0110) 2010; 330","10.1002/anie.201609229-BIB0041|anie201609229-cit-0161","Siuti
        (10.1002/anie.201609229-BIB0133a|anie201609229-cit-0326) 2013; 31","Taylor
        (10.1002/anie.201609229-BIB0064|anie201609229-cit-0194) 2016; 13","Konermann
        (10.1002/anie.201609229-BIB0094b|anie201609229-cit-0256) 2015; 517","10.1002/anie.201609229-BIB0016|anie201609229-cit-0068","Bradbury
        (10.1002/anie.201609229-BIB0060a|anie201609229-cit-0189) 2011; 29","Goodey
        (10.1002/anie.201609229-BIB0005a|anie201609229-cit-0023) 2008; 4","Galanie
        (10.1002/anie.201609229-BIB0121|anie201609229-cit-0307) 2015; 349","(10.1002/anie.201609229-BIB0070.2|anie201609229-cit-0203)
        2015; 127","Rakhit (10.1002/anie.201609229-BIB0040|anie201609229-cit-0160)
        2014; 21","Qian (10.1002/anie.201609229-BIB0178b|anie201609229-cit-0391) 2011;
        475","10.1002/anie.201609229-BIB0105|anie201609229-cit-0270","Win (10.1002/anie.201609229-BIB0127|anie201609229-cit-0313)
        2008; 322","Heim (10.1002/anie.201609229-BIB0051|anie201609229-cit-0179) 2004;
        279","Ding (10.1002/anie.201609229-BIB0162b|anie201609229-cit-0367) 2014;
        4","10.1002/anie.201609229-BIB0142|anie201609229-cit-0340","Gupta (10.1002/anie.201609229-BIB0145|anie201609229-cit-0345)
        2013; 2","Jäckel (10.1002/anie.201609229-BIB0059|anie201609229-cit-0187) 2010;
        21","Nielsen (10.1002/anie.201609229-BIB0011b|anie201609229-cit-0049) 2016;
        164","Goldfless (10.1002/anie.201609229-BIB0022b|anie201609229-cit-0111) 2012;
        40","Jeschek (10.1002/anie.201609229-BIB0062|anie201609229-cit-0192) 2016;
        537","(10.1002/anie.201609229-BIB0007e.2|anie201609229-cit-0037) 2013; 125","Kleinstiver
        (10.1002/anie.201609229-BIB0087c|anie201609229-cit-0236) 2016; 34","Chen (10.1002/anie.201609229-BIB0093b|anie201609229-cit-0253)
        2013; 155","Penchovsky (10.1002/anie.201609229-BIB0177|anie201609229-cit-0388)
        2005; 23","Tabor (10.1002/anie.201609229-BIB0126|anie201609229-cit-0312) 2009;
        137","Wang (10.1002/anie.201609229-BIB0027d|anie201609229-cit-0128) 2012;
        9","Hilton (10.1002/anie.201609229-BIB0094a|anie201609229-cit-0255) 2015;
        33","10.1002/anie.201609229-BIB0153|anie201609229-cit-0353","Loose (10.1002/anie.201609229-BIB0186a|anie201609229-cit-0402)
        2008; 320","Wochner (10.1002/anie.201609229-BIB0189c|anie201609229-cit-0410)
        2011; 332","Berschneider (10.1002/anie.201609229-BIB0035|anie201609229-cit-0152)
        2009; 48","Nielsen (10.1002/anie.201609229-BIB0010|anie201609229-cit-0046)
        2016; 352","10.1002/anie.201609229-BIB0093|anie201609229-cit-0251","Robinton
        (10.1002/anie.201609229-BIB0152|anie201609229-cit-0352) 2012; 481","10.1002/anie.201609229-BIB0022|anie201609229-cit-0109","Xu
        (10.1002/anie.201609229-BIB0112c|anie201609229-cit-0295) 2014; 111","Wals
        (10.1002/anie.201609229-BIB0008c|anie201609229-cit-0041) 2014; 2","Ehrlich
        (10.1002/anie.201609229-BIB0077b|anie201609229-cit-0214) 2015; 21","Rossger
        (10.1002/anie.201609229-BIB0150|anie201609229-cit-0350) 2013; 4","Yin (10.1002/anie.201609229-BIB0096|anie201609229-cit-0258)
        2014; 32","Bujara (10.1002/anie.201609229-BIB0172|anie201609229-cit-0383)
        2011; 7","Famulok (10.1002/anie.201609229-BIB0065|anie201609229-cit-0195)
        2007; 107","Bornscheuer (10.1002/anie.201609229-BIB0004a|anie201609229-cit-0015)
        2012; 485","10.1002/anie.201609229-BIB0045|anie201609229-cit-0171","Schukur
        (10.1002/anie.201609229-BIB0021c|anie201609229-cit-0107) 2015; 7","10.1002/anie.201609229-BIB0020|anie201609229-cit-0091","Zieske
        (10.1002/anie.201609229-BIB0187|anie201609229-cit-0404) 2013; 52","Liang (10.1002/anie.201609229-BIB0020h|anie201609229-cit-0100)
        2011; 4","Orelle (10.1002/anie.201609229-BIB0074|anie201609229-cit-0209) 2015;
        524","Packer (10.1002/anie.201609229-BIB0006a|anie201609229-cit-0028) 2015;
        16","10.1002/anie.201609229-BIB0179|anie201609229-cit-0392","Kennedy (10.1002/anie.201609229-BIB0027b|anie201609229-cit-0126)
        2010; 7","Lincoln (10.1002/anie.201609229-BIB0189b|anie201609229-cit-0409)
        2009; 323","Fu (10.1002/anie.201609229-BIB0088b|anie201609229-cit-0239) 2014;
        32","Juillot (10.1002/anie.201609229-BIB0028a|anie201609229-cit-0131) 2016;
        12","Millman (10.1002/anie.201609229-BIB0153a|anie201609229-cit-0354) 2016;
        7","Bonnet (10.1002/anie.201609229-BIB0133b|anie201609229-cit-0327) 2013;
        340","Danino (10.1002/anie.201609229-BIB0137b|anie201609229-cit-0333) 2010;
        463","Saxena (10.1002/anie.201609229-BIB0021b|anie201609229-cit-0106) 2016;
        113","Moscou (10.1002/anie.201609229-BIB0083b|anie201609229-cit-0224) 2009;
        326","Kumar (10.1002/anie.201609229-BIB0037|anie201609229-cit-0157) 2009;
        131","10.1002/anie.201609229-BIB0004|anie201609229-cit-0014","Xie (10.1002/anie.201609229-BIB0142a|anie201609229-cit-0341)
        2011; 333","Fischbach (10.1002/anie.201609229-BIB0013c|anie201609229-cit-0057)
        2013; 5","Dahl (10.1002/anie.201609229-BIB0112a|anie201609229-cit-0293) 2013;
        31","10.1002/anie.201609229-BIB0030|anie201609229-cit-0139","Wang (10.1002/anie.201609229-BIB0101|anie201609229-cit-0266)
        2009; 460","10.1002/anie.201609229-BIB0085|anie201609229-cit-0228","Ma (10.1002/anie.201609229-BIB0012|anie201609229-cit-0053)
        2016; 428","Budisa (10.1002/anie.201609229-BIB0008e|anie201609229-cit-0043)
        2004; 43"],"SourceType": ["Aggregation Database","Index Database","Publisher"],"PublicationYear":
        ["2017"],"StartPage": ["6396"],"SourceID": ["gale","crossref","pubmed","wiley"],"Copyright_xml":
        [{"notice": "2017 Wiley‐VCH Verlag GmbH & Co. KGaA, Weinheim"},{"notice":
        "2017 Wiley-VCH Verlag GmbH & Co. KGaA, Weinheim."},{"notice": "COPYRIGHT
        2017 Wiley Subscription Services, Inc."}],"SSID": ["ssj0028806"],"Title":
        ["Synthetic __BENTO_HL_START__Biology__BENTO_HL_END__—The Synthesis of __BENTO_HL_START__Biology__BENTO_HL_END__"],"CitedBy_id":
        ["crossref_primary_10_1039_C8SC02730G","crossref_primary_10_1002_ange_201700665","crossref_primary_10_1002_adhm_201700789","crossref_primary_10_1038_nchembio_2498","crossref_primary_10_1038_s41580_018_0024_z","crossref_primary_10_1002_anie_201700665","crossref_primary_10_1038_s41467_018_03733_8","crossref_primary_10_1002_cbic_201700411","crossref_primary_10_1186_s40504_018_0087_9","crossref_primary_10_1038_s41467_018_04440_0","crossref_primary_10_1007_s10295_018_2027_3","crossref_primary_10_1073_pnas_1804992115","crossref_primary_10_1002_advs_201800952","crossref_primary_10_1038_s41551_018_0215_0","crossref_primary_10_1002_biot_201700160","crossref_primary_10_1242_dev_148874","crossref_primary_10_1002_cbdv_201700315","crossref_primary_10_1098_rstb_2017_0104","crossref_primary_10_1002_aic_16365","crossref_primary_10_1002_ange_201705180","crossref_primary_10_1038_s41467_018_04744_1","crossref_primary_10_1002_advs_201801320","crossref_primary_10_1002_anie_201705180"],"PageCount":
        ["24"],"DatabaseTitle": ["MEDLINE","Medline Complete","MEDLINE with Full Text","PubMed","MEDLINE
        (Ovid)","CrossRef"],"EndPage": ["6419"],"MergedId": ["FETCHMERGED-LOGICAL-c4186-143b73b0da060b972489625d00cdbacd5bb8b68f08d76cbb2f2ba29153b2d55b3"],"Copyright":
        ["2017 Wiley‐VCH Verlag GmbH & Co. KGaA, Weinheim","2017 Wiley-VCH Verlag
        GmbH & Co. KGaA, Weinheim.","COPYRIGHT 2017 Wiley Subscription Services, Inc."],"License":
        ["2017 Wiley-VCH Verlag GmbH & Co. KGaA, Weinheim."],"IngestDate": ["Tue Aug
        06 04:06:09 EDT 2019","Mon Nov 04 15:54:25 EST 2019","Mon Nov 04 10:08:47
        EST 2019","Sat Dec 28 22:03:57 EST 2019"],"PublicationDate_xml": [{"month":
        "06","year": "2017","text": "June 1, 2017","day": "01"}],"DatabaseTitleList":
        ["","MEDLINE",""],"URI": ["https://onlinelibrary.wiley.com/doi/abs/10.1002/anie.201609229","https://www.ncbi.nlm.nih.gov/pubmed/27943572"],"PublicationPlace_xml":
        [{"name": "Germany"}],"Publisher_xml": [{"name": "Wiley Subscription Services,
        Inc"}],"AbstractList": ["Synthetic biology concerns the engineering of man‐made
        living biomachines from standardized components that can perform predefined
        functions in a (self‐)controlled manner. Different research strategies and
        interdisciplinary efforts are pursued to implement engineering principles
        to biology. The “top‐down” strategy exploits nature''s incredible diversity
        of existing, natural parts to construct synthetic compositions of genetic,
        metabolic, or signaling networks with predictable and controllable properties.
        This mainly application‐driven approach results in living factories that produce
        drugs, biofuels, biomaterials, and fine chemicals, and results in living pills
        that are based on engineered cells with the capacity to autonomously detect
        and treat disease states in vivo. In contrast, the “bottom‐up” strategy seeks
        to be independent of existing living systems by designing biological systems
        from scratch and synthesizing artificial biological entities not found in
        nature. This more knowledge‐driven approach investigates the reconstruction
        of minimal biological systems that are capable of performing basic biological
        phenomena, such as self‐organization, self‐replication, and self‐sustainability.
        Moreover, the syntheses of artificial biological units, such as synthetic
        nucleotides or amino acids, and their implementation into polymers inside
        living cells currently set the boundaries between natural and artificial biological
        systems. In particular, the in vitro design, synthesis, and transfer of complete
        genomes into host cells point to the future of synthetic biology: the creation
        of designer cells with tailored desirable properties for biomedicine and biotechnology.
        Exciting times for synthetic biology: Cells are being engineered to produce
        drugs and biofuels, entire genomes are being synthesized from scratch, proteins
        and DNA molecules are being equipped with unnatural functions, and recent
        progress in genome engineering promises to revolutionize biomedicine and biotechnology.
        This Review gives a comprehensive overview of different research areas in
        synthetic biology.","Synthetic biology concerns the engineering of man-made
        living biomachines from standardized components that can perform predefined
        functions in a (self-)controlled manner. Different research strategies and
        interdisciplinary efforts are pursued to implement engineering principles
        to biology. The \"top-down\" strategy exploits nature''s incredible diversity
        of existing, natural parts to construct synthetic compositions of genetic,
        metabolic, or signaling networks with predictable and controllable properties.
        This mainly application-driven approach results in living factories that produce
        drugs, biofuels, biomaterials, and fine chemicals, and results in living pills
        that are based on engineered cells with the capacity to autonomously detect
        and treat disease states in vivo. In contrast, the \"bottom-up\" strategy
        seeks to be independent of existing living systems by designing biological
        systems from scratch and synthesizing artificial biological entities not found
        in nature. This more knowledge-driven approach investigates the reconstruction
        of minimal biological systems that are capable of performing basic biological
        phenomena, such as self-organization, self-replication, and self-sustainability.
        Moreover, the syntheses of artificial biological units, such as synthetic
        nucleotides or amino acids, and their implementation into polymers inside
        living cells currently set the boundaries between natural and artificial biological
        systems. In particular, the in vitro design, synthesis, and transfer of complete
        genomes into host cells point to the future of synthetic biology: the creation
        of designer cells with tailored desirable properties for biomedicine and biotechnology.","Synthetic
        biology concerns the engineering of man-made living biomachines from standardized
        components that can perform predefined functions in a (self-)controlled manner.
        Different research strategies and interdisciplinary efforts are pursued to
        implement engineering principles to biology. The \"top-down\" strategy exploits
        nature''s incredible diversity of existing, natural parts to construct synthetic
        compositions of genetic, metabolic, or signaling networks with predictable
        and controllable properties. This mainly application-driven approach results
        in living factories that produce drugs, biofuels, biomaterials, and fine chemicals,
        and results in living pills that are based on engineered cells with the capacity
        to autonomously detect and treat disease states in vivo. In contrast, the
        \"bottom-up\" strategy seeks to be independent of existing living systems
        by designing biological systems from scratch and synthesizing artificial biological
        entities not found in nature. This more knowledge-driven approach investigates
        the reconstruction of minimal biological systems that are capable of performing
        basic biological phenomena, such as self-organization, self-replication, and
        self-sustainability. Moreover, the syntheses of artificial biological units,
        such as synthetic nucleotides or amino acids, and their implementation into
        polymers inside living cells currently set the boundaries between natural
        and artificial biological systems. In particular, the in vitro design, synthesis,
        and transfer of complete genomes into host cells point to the future of synthetic
        biology: the creation of designer cells with tailored desirable properties
        for biomedicine and biotechnology."],"Author": ["Fussenegger, Martin","Ausländer,
        David","Ausländer, Simon"],"PublicationCentury": ["2000"],"PublicationDecade":
        ["2010"],"GrantInformation_xml": [{"fundername": "European Research Council","funderid":
        "321381"},{"fundername": "Schweizerischer Nationalfonds zur Förderung der
        Wissenschaftlichen Forschung","funderid": "NCCR Molecular Systems Engineering"}],"References_xml":
        [{"volume": "112","start-page": "14429","year": "2015","end-page": "14435","publication-title":
        "Proc. Natl. Acad. Sci. USA"},{"volume": "10","start-page": "963","year":
        "2014","end-page": "968","publication-title": "Nat. Chem. Biol."},{"volume":
        "86","start-page": "60","year": "2015","end-page": "72","publication-title":
        "Methods"},{"volume": "30","start-page": "601","year": "2012","end-page":
        "607","publication-title": "Trends Biotechnol."},{"volume": "33","start-page":
        "543","year": "2015","end-page": "548","publication-title": "Nat. Biotechnol."},{"volume":
        "330","start-page": "70","year": "2010","end-page": "74","publication-title":
        "Science"},{"volume": "13","start-page": "687","year": "2012","end-page":
        "700","publication-title": "Nat. Rev. Neurosci."},{"volume": "13","start-page":
        "455","year": "2012","end-page": "468","publication-title": "Nat. Rev. Genet."},{"volume":
        "48","start-page": "9059","year": "2012","end-page": "9061","publication-title":
        "Chem. Commun."},{"volume": "3","start-page": "627","year": "2014","end-page":
        "633","publication-title": "ACS Synth. Biol."},{"volume": "12","start-page":
        "664","year": "2015","end-page": "670","publication-title": "Nat. Methods"},{"volume":
        "9","start-page": "266","year": "2012","end-page": "269","publication-title":
        "Nat. Methods"},{"volume": "346","start-page": "1256272","year": "2014","publication-title":
        "Science"},{"volume": "496","start-page": "528","year": "2013","end-page":
        "532","publication-title": "Nature"},{"volume": "403","start-page": "335","year":
        "2000","end-page": "338","publication-title": "Nature"},{"volume": "40","start-page":
        "142","year": "2012","publication-title": "Nucleic Acids Res."},{"volume":
        "536","start-page": "81","year": "2016","end-page": "85","publication-title":
        "Nature"},{"volume": "6","start-page": "295","year": "2014","end-page": "302","publication-title":
        "Nat. Chem."},{"volume": "44","start-page": "92","year": "2016","publication-title":
        "Nucleic Acids Res."},{"volume": "42","start-page": "12322","year": "2014","end-page":
        "12328","publication-title": "Nucleic Acids Res."},{"volume": "110","start-page":
        "141","year": "2013","end-page": "146","publication-title": "Proc. Natl. Acad.
        Sci. USA"},{"volume": "336","start-page": "341","year": "2012","end-page":
        "344","publication-title": "Science"},{"volume": "34","start-page": "869","year":
        "2016","end-page": "874","publication-title": "Nat. Biotechnol."},{"volume":
        "349","start-page": "1095","year": "2015","end-page": "1100","publication-title":
        "Science"},{"volume": "333","start-page": "1252","year": "2011","end-page":
        "1254","publication-title": "Science"},{"volume": "36","start-page": "117","year":
        "2016","end-page": "126","publication-title": "Dev. Cell"},{"volume": "42","start-page":
        "84","year": "2016","end-page": "91","publication-title": "Curr. Opin. Biotechnol."},{"volume":
        "32","start-page": "569","year": "2014","end-page": "576","publication-title":
        "Nat. Biotechnol."},{"volume": "279","start-page": "21415","year": "2004","end-page":
        "21420","publication-title": "J. Biol. Chem."},{"volume": "429","start-page":
        "423","year": "2004","end-page": "429","publication-title": "Nature"},{"volume":
        "32","start-page": "279","year": "2014","end-page": "284","publication-title":
        "Nat. Biotechnol."},{"volume": "19","start-page": "114","year": "2014","end-page":
        "119","publication-title": "Curr. Opin. Microbiol."},{"volume": "332","start-page":
        "1196","year": "2011","end-page": "1201","publication-title": "Science"},{"volume":
        "461","start-page": "997","year": "2009","end-page": "1001","publication-title":
        "Nature"},{"volume": "509","start-page": "385","year": "2014","end-page":
        "388","publication-title": "Nature"},{"volume": "13","start-page": "177","year":
        "2016","end-page": "183","publication-title": "Nat. Methods"},{"volume": "82","start-page":
        "115","year": "2013","end-page": "153","publication-title": "Adv. Appl. Microbiol."},{"volume":
        "14","start-page": "252","year": "2012","end-page": "260","publication-title":
        "Metab. Eng."},{"volume": "3","start-page": "228","year": "2014","end-page":
        "237","publication-title": "ACS Synth. Biol."},{"volume": "330","start-page":
        "52","year": "2004","end-page": "57","publication-title": "Anal. Biochem."},{"volume":
        "7","start-page": "289ra","year": "2015","publication-title": "Sci. Transl.
        Med."},{"volume": "320","start-page": "789","year": "2008","end-page": "792","publication-title":
        "Science"},{"volume": "48 121","start-page": "7564 7701","year": "2009 2009","end-page":
        "7567 7704","publication-title": "Angew. Chem. Int. Ed. Angew. Chem."},{"volume":
        "339","start-page": "823","year": "2013","end-page": "826","publication-title":
        "Science"},{"volume": "10","start-page": "0135965","year": "2015","publication-title":
        "PLoS One"},{"volume": "44","start-page": "1172","year": "2015","end-page":
        "1239","publication-title": "Chem. Soc. Rev."},{"volume": "1","start-page":
        "29","year": "2012","end-page": "41","publication-title": "ACS Synth. Biol."},{"volume":
        "137","start-page": "1272","year": "2009","end-page": "1281","publication-title":
        "Cell"},{"volume": "13","start-page": "40","year": "2015","publication-title":
        "BMC Biol."},{"volume": "39","start-page": "106","year": "2016","end-page":
        "114","publication-title": "Curr. Opin. Struct. Biol."},{"volume": "16","start-page":
        "245","year": "2012","end-page": "252","publication-title": "Curr. Opin. Chem.
        Biol."},{"volume": "109","start-page": "2579","year": "2012","end-page": "2586","publication-title":
        "Proc. Natl. Acad. Sci. USA"},{"volume": "20","start-page": "1183","year":
        "2014","end-page": "1194","publication-title": "RNA"},{"volume": "34","start-page":
        "339","year": "2016","end-page": "344","publication-title": "Nat. Biotechnol."},{"volume":
        "40","start-page": "64","year": "2012","publication-title": "Nucleic Acids
        Res."},{"volume": "5","start-page": "4408","year": "2014","publication-title":
        "Nat. Commun."},{"volume": "83","start-page": "615","year": "2014","end-page":
        "640","publication-title": "Annu. Rev. Biochem."},{"volume": "35","start-page":
        "4179","year": "2007","end-page": "4185","publication-title": "Nucleic Acids
        Res."},{"volume": "5","start-page": "1011","year": "2013","end-page": "1018","publication-title":
        "Nat. Chem."},{"volume": "33","start-page": "449","year": "2015","end-page":
        "461","publication-title": "Trends Biotechnol."},{"volume": "10","start-page":
        "1009","year": "2013","end-page": "1016","publication-title": "RNA Biol."},{"volume":
        "14","start-page": "454","year": "2003","end-page": "459","publication-title":
        "Curr. Opin. Biotechnol."},{"volume": "23","start-page": "1424","year": "2005","end-page":
        "1433","publication-title": "Nat. Biotechnol."},{"volume": "131","start-page":
        "5873","year": "2009","end-page": "5884","publication-title": "J. Am. Chem.
        Soc."},{"volume": "6","start-page": "917","year": "2009","end-page": "922","publication-title":
        "Nat. Methods"},{"volume": "26","start-page": "409","year": "2015","end-page":
        "410","publication-title": "Hum. Gene Ther."},{"volume": "32","start-page":
        "1121","year": "2014","end-page": "1133","publication-title": "Nat. Biotechnol."},{"volume":
        "16","start-page": "173","year": "2009","end-page": "180","publication-title":
        "Chem. Biol."},{"volume": "113","start-page": "3431","year": "2016","end-page":
        "3440","publication-title": "Proc. Natl. Acad. Sci. USA"},{"volume": "26","start-page":
        "1486","year": "2012","end-page": "1497","publication-title": "Genes Dev."},{"volume":
        "329","start-page": "52","year": "2010","end-page": "56","publication-title":
        "Science"},{"volume": "17","start-page": "236","year": "2010","end-page":
        "242","publication-title": "Chem. Biol."},{"volume": "326","start-page": "1509","year":
        "2009","end-page": "1512","publication-title": "Science"},{"volume": "31","start-page":
        "833","year": "2013","end-page": "838","publication-title": "Nat. Biotechnol."},{"volume":
        "7","start-page": "521","year": "2011","publication-title": "Mol. Syst. Biol."},{"volume":
        "323","start-page": "1229","year": "2009","end-page": "1232","publication-title":
        "Science"},{"volume": "159","start-page": "428","year": "2014","end-page":
        "439","publication-title": "Cell"},{"volume": "54 127","start-page": "10030
        10168","year": "2015 2015","end-page": "10034 10172","publication-title":
        "Angew. Chem. Int. Ed. Angew. Chem."},{"volume": "7","start-page": "528","year":
        "2011","end-page": "530","publication-title": "Nat. Chem. Biol."},{"volume":
        "11","start-page": "1154","year": "2014","end-page": "1160","publication-title":
        "Nat. Methods"},{"volume": "338","start-page": "932","year": "2012","end-page":
        "936","publication-title": "Science"},{"volume": "537","start-page": "661","year":
        "2016","end-page": "665","publication-title": "Nature"},{"volume": "333","start-page":
        "348","year": "2011","end-page": "353","publication-title": "Science"},{"volume":
        "4","start-page": "2","year": "2011","publication-title": "Sci. Signaling"},{"volume":
        "5","start-page": "213","year": "2010","end-page": "217","publication-title":
        "Nat. Nanotechnol."},{"volume": "113","start-page": "216","year": "2016","end-page":
        "225","publication-title": "Biotechnol. Bioeng."},{"volume": "7","start-page":
        "445","year": "2011","end-page": "452","publication-title": "Nat. Chem. Biol."},{"volume":
        "7","start-page": "271","year": "2011","end-page": "277","publication-title":
        "Nat. Chem. Biol."},{"volume": "15","start-page": "3158","year": "2013","end-page":
        "3168","publication-title": "Environ. Microbiol."},{"volume": "38","start-page":
        "2663","year": "2010","end-page": "2675","publication-title": "Nucleic Acids
        Res."},{"volume": "33","start-page": "123","year": "2016","end-page": "130","publication-title":
        "Curr. Opin. Microbiol."},{"volume": "19","start-page": "751","year": "2001","end-page":
        "755","publication-title": "Nat. Biotechnol."},{"volume": "586","start-page":
        "2076","year": "2012","end-page": "2083","publication-title": "FEBS Lett."},{"volume":
        "28","start-page": "355","year": "2010","end-page": "360","publication-title":
        "Nat. Biotechnol."},{"volume": "464","start-page": "441","year": "2010","end-page":
        "444","publication-title": "Nature"},{"volume": "6","start-page": "35082","year":
        "2016","publication-title": "Sci. Rep."},{"volume": "10","start-page": "410","year":
        "2009","end-page": "422","publication-title": "Nat. Rev. Mol. Cell Biol."},{"volume":
        "252","start-page": "1668","year": "1991","end-page": "1675","publication-title":
        "Science"},{"volume": "11","start-page": "499","year": "2014","end-page":
        "507","publication-title": "Nat. Methods"},{"volume": "102","start-page":
        "12678","year": "2005","end-page": "12683","publication-title": "Proc. Natl.
        Acad. Sci. USA"},{"volume": "113","start-page": "1244","year": "2016","end-page":
        "1249","publication-title": "Proc. Natl. Acad. Sci. USA"},{"volume": "300","start-page":
        "763","year": "2003","publication-title": "Science"},{"volume": "79","start-page":
        "65","year": "2010","end-page": "87","publication-title": "Annu. Rev. Biochem."},{"volume":
        "403","start-page": "339","year": "2000","end-page": "342","publication-title":
        "Nature"},{"volume": "440","start-page": "940","year": "2006","end-page":
        "943","publication-title": "Nature"},{"volume": "7","start-page": "11163","year":
        "2016","publication-title": "Nat. Commun."},{"volume": "155","start-page":
        "1479","year": "2013","end-page": "1491","publication-title": "Cell"},{"volume":
        "15","start-page": "95","year": "2014","end-page": "107","publication-title":
        "Nat. Rev. Mol. Cell Biol."},{"volume": "16","start-page": "586","year": "2012","end-page":
        "592","publication-title": "Curr. Opin. Chem. Biol."},{"volume": "30","start-page":
        "991","year": "2012","end-page": "996","publication-title": "Nat. Biotechnol."},{"volume":
        "3","start-page": "77","year": "2009","publication-title": "Syst. Synth. Biol."},{"volume":
        "322","start-page": "456","year": "2008","end-page": "460","publication-title":
        "Science"},{"volume": "508","start-page": "387","year": "2014","end-page":
        "391","publication-title": "Nature"},{"volume": "14","start-page": "261","year":
        "2012","end-page": "269","publication-title": "Metab. Eng."},{"volume": "8","start-page":
        "1640","year": "2013","end-page": "1645","publication-title": "ACS Chem. Biol."},{"volume":
        "9","start-page": "636","year": "2013","publication-title": "Mol. Syst. Biol."},{"volume":
        "111","start-page": "11299","year": "2014","end-page": "11304","publication-title":
        "Proc. Natl. Acad. Sci. USA"},{"volume": "44","start-page": "1349","year":
        "2011","end-page": "1358","publication-title": "Acc. Chem. Res."},{"volume":
        "4","start-page": "526","year": "2015","end-page": "534","publication-title":
        "ACS Synth. Biol."},{"volume": "55","start-page": "489","year": "2015","end-page":
        "511","publication-title": "Annu. Rev. Pharmacol. Toxicol."},{"volume": "16","start-page":
        "566","year": "2016","end-page": "581","publication-title": "Nat. Rev. Cancer"},{"volume":
        "21","start-page": "121","year": "2015","end-page": "131","publication-title":
        "Nat. Med."},{"volume": "24","start-page": "633","year": "2013","end-page":
        "638","publication-title": "Curr. Opin. Biotechnol."},{"volume": "87","start-page":
        "478","year": "2004","end-page": "484","publication-title": "Biotechnol. Bioeng."},{"volume":
        "54 127","start-page": "3351 3408","year": "2015 2015","end-page": "3367 3426","publication-title":
        "Angew. Chem. Int. Ed. Angew. Chem."},{"volume": "11","start-page": "117","year":
        "2009","end-page": "124","publication-title": "Metab. Eng."},{"volume": "12","start-page":
        "951","year": "2016","end-page": "958","publication-title": "Nat. Chem. Biol."},{"volume":
        "106","start-page": "10638","year": "2009","end-page": "10643","publication-title":
        "Proc. Natl. Acad. Sci. USA"},{"volume": "4","start-page": "259","year": "2013","end-page":
        "288","publication-title": "Annu. Rev. Chem. Biomol. Eng."},{"volume": "11","start-page":
        "780","year": "2015","publication-title": "Mol. Syst. Biol."},{"volume": "296","start-page":
        "1466","year": "2002","end-page": "1470","publication-title": "Science"},{"volume":
        "5","start-page": "4729","year": "2014","publication-title": "Nat. Commun."},{"volume":
        "337","start-page": "816","year": "2012","end-page": "821","publication-title":
        "Science"},{"volume": "133","start-page": "16235","year": "2011","end-page":
        "16242","publication-title": "J. Am. Chem. Soc."},{"volume": "10","start-page":
        "598","year": "2014","end-page": "603","publication-title": "Nat. Chem. Biol."},{"volume":
        "100","start-page": "12672","year": "2003","end-page": "12677","publication-title":
        "Proc. Natl. Acad. Sci. USA"},{"volume": "163","start-page": "759","year":
        "2015","end-page": "771","publication-title": "Cell"},{"volume": "340","start-page":
        "599","year": "2013","end-page": "603","publication-title": "Science"},{"volume":
        "518","start-page": "89","year": "2015","end-page": "93","publication-title":
        "Nature"},{"volume": "32","start-page": "551","year": "2014","end-page": "553","publication-title":
        "Nat. Biotechnol."},{"volume": "9","start-page": "1088","year": "2012","end-page":
        "1094","publication-title": "Nat. Methods"},{"volume": "7","start-page": "10624","year":
        "2016","publication-title": "Nat. Commun."},{"volume": "491","start-page":
        "249","year": "2012","end-page": "253","publication-title": "Nature"},{"volume":
        "4","start-page": "474","year": "2008","end-page": "482","publication-title":
        "Nat. Chem. Biol."},{"volume": "50 123","start-page": "3124 3180","year":
        "2011 2011","end-page": "3156 3215","publication-title": "Angew. Chem. Int.
        Ed. Angew. Chem."},{"volume": "279","start-page": "14280","year": "2004","end-page":
        "14286","publication-title": "J. Biol. Chem."},{"volume": "460","start-page":
        "894","year": "2009","end-page": "898","publication-title": "Nature"},{"volume":
        "91","start-page": "883","year": "1994","end-page": "887","publication-title":
        "Proc. Natl. Acad. Sci. USA"},{"volume": "39","start-page": "155","year":
        "2011","publication-title": "Nucleic Acids Res."},{"volume": "12","start-page":
        "345","year": "2016","end-page": "349","publication-title": "Mol. BioSyst."},{"volume":
        "20","start-page": "147","year": "2015","end-page": "155","publication-title":
        "Drug Discovery Today"},{"volume": "14","start-page": "135","year": "2016","end-page":
        "149","publication-title": "Nat. Rev. Microbiol."},{"volume": "6","start-page":
        "444","year": "2010","publication-title": "Mol. Syst. Biol."},{"volume": "3","start-page":
        "03949","year": "2014","publication-title": "eLife"},{"volume": "20","start-page":
        "619","year": "2013","end-page": "626","publication-title": "Chem. Biol."},{"volume":
        "2","start-page": "00471","year": "2013","publication-title": "eLife"},{"volume":
        "7","start-page": "973","year": "2010","end-page": "975","publication-title":
        "Nat. Methods"},{"volume": "55","start-page": "397","year": "2014","end-page":
        "408","publication-title": "Mol. Cell"},{"volume": "22","start-page": "306","year":
        "2016","end-page": "311","publication-title": "Nat. Med."},{"volume": "44","start-page":
        "1165","year": "2016","end-page": "1175","publication-title": "Biochem. Soc.
        Trans."},{"volume": "350","start-page": "4077","year": "2015","publication-title":
        "Science"},{"volume": "463","start-page": "326","year": "2010","end-page":
        "330","publication-title": "Nature"},{"volume": "353","start-page": "8559","year":
        "2016","publication-title": "Science"},{"volume": "5","start-page": "179ps","year":
        "2013","publication-title": "Sci. Transl. Med."},{"volume": "110","start-page":
        "18150","year": "2013","end-page": "18155","publication-title": "Proc. Natl.
        Acad. Sci. USA"},{"volume": "48","start-page": "9870","year": "2012","end-page":
        "9872","publication-title": "Chem. Commun."},{"volume": "24","start-page":
        "1037","year": "2013","end-page": "1043","publication-title": "Curr. Opin.
        Biotechnol."},{"volume": "517","start-page": "583","year": "2015","end-page":
        "588","publication-title": "Nature"},{"volume": "18","start-page": "1203","year":
        "2000","end-page": "1208","publication-title": "Nat. Biotechnol."},{"volume":
        "338","start-page": "1177","year": "2012","end-page": "1183","publication-title":
        "Science"},{"volume": "19","start-page": "1004","year": "2014","end-page":
        "1022","publication-title": "Molecules"},{"volume": "332","start-page": "209","year":
        "2011","end-page": "212","publication-title": "Science"},{"volume": "49","start-page":
        "1711","year": "2016","end-page": "1721","publication-title": "Acc. Chem.
        Res."},{"volume": "481","start-page": "39","year": "2012","end-page": "44","publication-title":
        "Nature"},{"volume": "50 123","start-page": "138 144","year": "2011 2011","end-page":
        "174 182","publication-title": "Angew. Chem. Int. Ed. Angew. Chem."},{"volume":
        "33","start-page": "101","year": "2015","end-page": "110","publication-title":
        "Trends Biotechnol."},{"volume": "15","start-page": "1145","year": "2015","end-page":
        "1154","publication-title": "Expert Opin. Biol. Ther."},{"volume": "39","start-page":
        "2981","year": "2011","end-page": "2994","publication-title": "Nucleic Acids
        Res."},{"volume": "31","start-page": "1039","year": "2013","end-page": "1046","publication-title":
        "Nat. Biotechnol."},{"volume": "333","start-page": "1307","year": "2011","end-page":
        "1311","publication-title": "Science"},{"volume": "36","start-page": "76","year":
        "2008","publication-title": "Nucleic Acids Res."},{"volume": "134","start-page":
        "16480","year": "2012","end-page": "16483","publication-title": "J. Am. Chem.
        Soc."},{"volume": "11","start-page": "508","year": "2014","end-page": "520","publication-title":
        "Nat. Methods"},{"volume": "2","start-page": "715","year": "2013","end-page":
        "723","publication-title": "ACS Synth. Biol."},{"volume": "7","start-page":
        "12137","year": "2016","publication-title": "Nat. Commun."},{"volume": "4","start-page":
        "655","year": "2015","end-page": "658","publication-title": "ACS Synth. Biol."},{"volume":
        "590","start-page": "2051","year": "2016","end-page": "2062","publication-title":
        "FEBS Lett."},{"volume": "25","start-page": "770","year": "2007","end-page":
        "777","publication-title": "Nat. Biotechnol."},{"volume": "31","start-page":
        "448","year": "2013","end-page": "452","publication-title": "Nat. Biotechnol."},{"volume":
        "40","start-page": "9369","year": "2012","end-page": "9378","publication-title":
        "Nucleic Acids Res."},{"volume": "4","start-page": "2825","year": "2013","publication-title":
        "Nat. Commun."},{"volume": "158","start-page": "412","year": "2014","end-page":
        "421","publication-title": "Cell"},{"volume": "68","start-page": "518","year":
        "2004","end-page": "537","publication-title": "Microbiol. Mol. Biol. Rev."},{"volume":
        "285","start-page": "11039","year": "2010","end-page": "11044","publication-title":
        "J. Biol. Chem."},{"volume": "388","start-page": "882","year": "1997","end-page":
        "887","publication-title": "Nature"},{"volume": "346","start-page": "1258096","year":
        "2014","publication-title": "Science"},{"volume": "44","start-page": "7465","year":
        "2015","end-page": "7483","publication-title": "Chem. Soc. Rev."},{"volume":
        "5","start-page": "565","year": "2014","publication-title": "Front. Microbiol."},{"volume":
        "89","start-page": "5547","year": "1992","end-page": "5551","publication-title":
        "Proc. Natl. Acad. Sci. USA"},{"volume": "500","start-page": "472","year":
        "2013","end-page": "476","publication-title": "Nature"},{"volume": "524","start-page":
        "119","year": "2015","publication-title": "Nature"},{"volume": "9","start-page":
        "530","year": "2016","end-page": "540","publication-title": "Microb. Biotechnol."},{"volume":
        "159","start-page": "925","year": "2014","end-page": "939","publication-title":
        "Cell"},{"volume": "4","start-page": "441","year": "2009","end-page": "445","publication-title":
        "ACS Chem. Biol."},{"volume": "18","start-page": "372","year": "2011","end-page":
        "380","publication-title": "Chem. Biol."},{"volume": "457","start-page": "309","year":
        "2009","end-page": "312","publication-title": "Nature"},{"volume": "21","start-page":
        "81","year": "2014","end-page": "90","publication-title": "Metab. Eng."},{"volume":
        "527","start-page": "264","year": "2015","publication-title": "Nature"},{"volume":
        "33","start-page": "510","year": "2015","end-page": "517","publication-title":
        "Nat. Biotechnol."},{"volume": "7","start-page": "10243","year": "2016","publication-title":
        "Nat. Commun."},{"volume": "154","start-page": "1380","year": "2013","end-page":
        "1389","publication-title": "Cell"},{"volume": "111","start-page": "1396","year":
        "2014","end-page": "1405","publication-title": "Biotechnol. Bioeng."},{"volume":
        "40","start-page": "3763","year": "2012","end-page": "3774","publication-title":
        "Nucleic Acids Res."},{"volume": "487","start-page": "123","year": "2012","end-page":
        "127","publication-title": "Nature"},{"volume": "34","start-page": "863","year":
        "2016","end-page": "868","publication-title": "Nat. Biotechnol."},{"volume":
        "344","start-page": "55","year": "2014","end-page": "58","publication-title":
        "Science"},{"volume": "481","start-page": "295","year": "2012","end-page":
        "305","publication-title": "Nature"},{"volume": "8","start-page": "2127","year":
        "2013","end-page": "2132","publication-title": "ACS Chem. Biol."},{"volume":
        "159","start-page": "940","year": "2014","end-page": "954","publication-title":
        "Cell"},{"volume": "485","start-page": "185","year": "2012","end-page": "194","publication-title":
        "Nature"},{"volume": "52 125","start-page": "459 477","year": "2013 2013","end-page":
        "462 481","publication-title": "Angew. Chem. Int. Ed. Angew. Chem."},{"volume":
        "101","start-page": "7566","year": "2004","end-page": "7571","publication-title":
        "Proc. Natl. Acad. Sci. USA"},{"volume": "21","start-page": "562","year":
        "2011","end-page": "568","publication-title": "Trends Cell Biol."},{"volume":
        "55 128","start-page": "807 818","year": "2016 2016","end-page": "810 821","publication-title":
        "Angew. Chem. Int. Ed. Angew. Chem."},{"volume": "107","start-page": "3715","year":
        "2007","end-page": "3743","publication-title": "Chem. Rev."},{"volume": "428","start-page":
        "893","year": "2016","end-page": "915","publication-title": "J. Mol. Biol."},{"volume":
        "469","start-page": "207","year": "2011","end-page": "211","publication-title":
        "Nature"},{"volume": "11","start-page": "198","year": "2015","end-page": "200","publication-title":
        "Nat. Chem. Biol."},{"volume": "24","start-page": "1027","year": "2006","end-page":
        "1032","publication-title": "Nat. Biotechnol."},{"volume": "325","start-page":
        "725","year": "2009","end-page": "730","publication-title": "Science"},{"volume":
        "82","start-page": "447","year": "2013","end-page": "470","publication-title":
        "Annu. Rev. Biochem."},{"volume": "27","start-page": "946","year": "2009","end-page":
        "950","publication-title": "Nat. Biotechnol."},{"volume": "55 128","start-page":
        "1966 2002","year": "2016 2016","end-page": "1973 2010","publication-title":
        "Angew. Chem. Int. Ed. Angew. Chem."},{"volume": "520","start-page": "186","year":
        "2015","end-page": "191","publication-title": "Nature"},{"volume": "456","start-page":
        "516","year": "2008","end-page": "519","publication-title": "Nature"},{"volume":
        "41","start-page": "77","year": "2013","publication-title": "Nucleic Acids
        Res."},{"volume": "4","start-page": "09771","year": "2015","publication-title":
        "eLife"},{"volume": "11","start-page": "2101","year": "2016","end-page": "2104","publication-title":
        "ACS Chem. Biol."},{"volume": "2","start-page": "440","year": "2007","publication-title":
        "PLoS One"},{"volume": "339","start-page": "819","year": "2013","end-page":
        "823","publication-title": "Science"},{"volume": "47","start-page": "1871","year":
        "2014","end-page": "1880","publication-title": "Acc. Chem. Res."},{"volume":
        "21","start-page": "1238","year": "2014","end-page": "1252","publication-title":
        "Chem. Biol."},{"volume": "29","start-page": "245","year": "2011","end-page":
        "254","publication-title": "Nat. Biotechnol."},{"volume": "16","start-page":
        "379","year": "2015","end-page": "394","publication-title": "Nat. Rev. Genet."},{"volume":
        "469","start-page": "212","year": "2011","end-page": "215","publication-title":
        "Nature"},{"volume": "83","start-page": "379","year": "2014","end-page": "408","publication-title":
        "Annu. Rev. Biochem."},{"volume": "237","start-page": "752","year": "1997","end-page":
        "757","publication-title": "Biochem. Biophys. Res. Commun."},{"volume": "50
        123","start-page": "6960 7094","year": "2011 2011","end-page": "6962 7096","publication-title":
        "Angew. Chem. Int. Ed. Angew. Chem."},{"volume": "8","start-page": "556","year":
        "2016","end-page": "562","publication-title": "Nat. Chem."},{"volume": "125","start-page":
        "935","year": "2003","end-page": "939","publication-title": "J. Am. Chem.
        Soc."},{"volume": "29","start-page": "273","year": "2013","end-page": "279","publication-title":
        "Trends Genet."},{"volume": "98","start-page": "8554","year": "2001","end-page":
        "8559","publication-title": "Proc. Natl. Acad. Sci. USA"},{"volume": "9","start-page":
        "23","year": "2008","publication-title": "BMC Mol. Biol."},{"volume": "13","start-page":
        "168","year": "2012","end-page": "182","publication-title": "Nat. Rev. Mol.
        Cell Biol."},{"volume": "32","start-page": "1262","year": "2014","end-page":
        "1267","publication-title": "Nat. Biotechnol."},{"volume": "24","start-page":
        "555","year": "2013","end-page": "561","publication-title": "Curr. Opin. Biotechnol."},{"volume":
        "342","start-page": "357","year": "2013","end-page": "360","publication-title":
        "Science"},{"volume": "30","start-page": "354","year": "2012","end-page":
        "359","publication-title": "Nat. Biotechnol."},{"volume": "330","start-page":
        "1251","year": "2010","end-page": "1255","publication-title": "Science"},{"volume":
        "518","start-page": "427","year": "2015","end-page": "430","publication-title":
        "Nature"},{"volume": "111","start-page": "15934","year": "2014","end-page":
        "15939","publication-title": "Proc. Natl. Acad. Sci. USA"},{"volume": "48
        121","start-page": "2715 2753","year": "2009 2009","end-page": "2718 2756","publication-title":
        "Angew. Chem. Int. Ed. Angew. Chem."},{"volume": "10","start-page": "69","year":
        "2015","end-page": "82","publication-title": "Biotechnol. J."},{"volume":
        "159","start-page": "440","year": "2014","end-page": "455","publication-title":
        "Cell"},{"volume": "108","start-page": "8617","year": "2011","end-page": "8622","publication-title":
        "Proc. Natl. Acad. Sci. USA"},{"volume": "438","start-page": "449","year":
        "2005","end-page": "453","publication-title": "Nature"},{"volume": "3","start-page":
        "103","year": "2011","end-page": "113","publication-title": "Nat. Chem."},{"volume":
        "35","start-page": "123","year": "2015","end-page": "130","publication-title":
        "Curr. Opin. Immunol."},{"volume": "4","start-page": "1092","year": "2014","end-page":
        "1116","publication-title": "Life"},{"volume": "8","start-page": "2242","year":
        "2012","end-page": "2248","publication-title": "Mol. BioSyst."},{"volume":
        "9","start-page": "666","year": "2016","end-page": "676","publication-title":
        "Microb. Biotechnol."},{"volume": "7","start-page": "11463","year": "2016","publication-title":
        "Nat. Commun."},{"volume": "21","start-page": "1069","year": "2003","end-page":
        "1074","publication-title": "Nat. Biotechnol."},{"volume": "4","start-page":
        "1024","year": "2003","end-page": "1032","publication-title": "ChemBioChem"},{"volume":
        "3","start-page": "2854","year": "2013","publication-title": "Sci. Rep."},{"volume":
        "20","start-page": "901","year": "2002","end-page": "907","publication-title":
        "Nat. Biotechnol."},{"volume": "7","start-page": "318ra","year": "2015","publication-title":
        "Sci. Transl. Med."},{"volume": "8","start-page": "402","year": "2016","end-page":
        "422","publication-title": "Wiley Interdiscip. Rev. Syst. Biol. Med."},{"volume":
        "12","start-page": "1085","year": "2015","end-page": "1090","publication-title":
        "Nat. Methods"},{"volume": "5","start-page": "5392","year": "2014","publication-title":
        "Nat. Commun."},{"volume": "52 125","start-page": "12498 12728","year": "2013
        2013","end-page": "12508 12739","publication-title": "Angew. Chem. Int. Ed.
        Angew. Chem."},{"volume": "2","start-page": "15","year": "2014","publication-title":
        "Front. Chem."},{"volume": "108","start-page": "14198","year": "2011","end-page":
        "14203","publication-title": "Proc. Natl. Acad. Sci. USA"},{"volume": "428","start-page":
        "862","year": "2016","end-page": "888","publication-title": "J. Mol. Biol."},{"volume":
        "20","start-page": "16643","year": "2015","end-page": "16671","publication-title":
        "Molecules"},{"volume": "31","start-page": "155","year": "2013","end-page":
        "168","publication-title": "Trends Biotechnol."},{"volume": "12","start-page":
        "980","year": "2016","end-page": "987","publication-title": "Nat. Chem. Biol."},{"volume":
        "104","start-page": "14283","year": "2007","end-page": "14288","publication-title":
        "Proc. Natl. Acad. Sci. USA"},{"volume": "30","start-page": "521","year":
        "2014","end-page": "528","publication-title": "Trends Genet."},{"volume":
        "10","start-page": "957","year": "2013","end-page": "963","publication-title":
        "Nat. Methods"},{"volume": "44","start-page": "223","year": "2009","end-page":
        "242","publication-title": "Crit. Rev. Biochem. Mol. Biol."},{"volume": "14","start-page":
        "306","year": "2012","end-page": "316","publication-title": "Metab. Eng."},{"volume":
        "44","start-page": "94","year": "2016","publication-title": "Nucleic Acids
        Res."},{"volume": "6","start-page": "875","year": "2009","end-page": "881","publication-title":
        "Nat. Methods"},{"volume": "164","start-page": "770","year": "2016","end-page":
        "779","publication-title": "Cell"},{"volume": "131","start-page": "13906","year":
        "2009","end-page": "13907","publication-title": "J. Am. Chem. Soc."},{"volume":
        "335","start-page": "831","year": "2012","end-page": "834","publication-title":
        "Science"},{"volume": "326","start-page": "1501","year": "2009","publication-title":
        "Science"},{"volume": "21","start-page": "760","year": "2010","end-page":
        "765","publication-title": "Curr. Opin. Biotechnol."},{"volume": "32","start-page":
        "1610","year": "2004","end-page": "1614","publication-title": "Nucleic Acids
        Res."},{"volume": "165","start-page": "1255","year": "2016","end-page": "1266","publication-title":
        "Cell"},{"volume": "32","start-page": "577","year": "2014","end-page": "582","publication-title":
        "Nat. Biotechnol."},{"volume": "475","start-page": "368","year": "2011","end-page":
        "372","publication-title": "Nature"},{"volume": "4","start-page": "19","year":
        "2016","publication-title": "Front. Bioeng. Biotechnol."},{"volume": "1","start-page":
        "127","year": "2003","end-page": "136","publication-title": "Nat. Rev. Microbiol."},{"volume":
        "11","start-page": "625","year": "2015","end-page": "631","publication-title":
        "Nat. Chem. Biol."},{"volume": "6","start-page": "71","year": "2010","end-page":
        "78","publication-title": "Nat. Chem. Biol."},{"volume": "34","start-page":
        "401","year": "2016","end-page": "409","publication-title": "Nat. Biotechnol."},{"volume":
        "31","start-page": "827","year": "2013","end-page": "832","publication-title":
        "Nat. Biotechnol."},{"volume": "164","start-page": "1185","year": "2016","end-page":
        "1197","publication-title": "Cell"},{"volume": "21","start-page": "753","year":
        "2010","end-page": "759","publication-title": "Curr. Opin. Biotechnol."},{"volume":
        "40","start-page": "37","year": "2012","publication-title": "Nucleic Acids
        Res."},{"volume": "407","start-page": "193","year": "2011","end-page": "221","publication-title":
        "J. Mol. Biol."},{"volume": "351","start-page": "6253","year": "2016","publication-title":
        "Science"},{"volume": "262","start-page": "1019","year": "1993","end-page":
        "1024","publication-title": "Science"},{"volume": "4","start-page": "516","year":
        "2015","end-page": "525","publication-title": "ACS Synth. Biol."},{"volume":
        "7","start-page": "11247","year": "2016","publication-title": "Nat. Commun."},{"volume":
        "106","start-page": "22263","year": "2009","end-page": "22268","publication-title":
        "Proc. Natl. Acad. Sci. USA"},{"volume": "43 116","start-page": "6426 6586","year":
        "2004 2004","end-page": "6463 6624","publication-title": "Angew. Chem. Int.
        Ed. Angew. Chem."},{"volume": "352","start-page": "7341","year": "2016","publication-title":
        "Science"},{"volume": "25","start-page": "795","year": "2007","end-page":
        "801","publication-title": "Nat. Biotechnol."},{"volume": "29","start-page":
        "169","year": "2015","end-page": "179","publication-title": "Metab. Eng."},{"volume":
        "21","start-page": "7701","year": "2015","end-page": "7704","publication-title":
        "Chem. Eur. J."},{"volume": "8","start-page": "987","year": "2016","end-page":
        "991","publication-title": "EMBO Mol. Med."},{"volume": "34","start-page":
        "142","year": "2015","end-page": "152","publication-title": "Curr. Opin. Biotechnol."},{"volume":
        "16","start-page": "3540","year": "2016","end-page": "3544","publication-title":
        "Nano Lett."},{"volume": "54 127","start-page": "5933 6031","year": "2015
        2015","end-page": "5938 6036","publication-title": "Angew. Chem. Int. Ed.
        Angew. Chem."},{"volume": "164","start-page": "780","year": "2016","end-page":
        "791","publication-title": "Cell"},{"volume": "104","start-page": "14283","year":
        "2007","ident": "10.1002/anie.201609229-BIB0036b|anie201609229-cit-0156","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.0703961104","contributor":
        {"fullname": "Win"}},{"volume": "44","start-page": "1172","year": "2015","ident":
        "10.1002/anie.201609229-BIB0004b|anie201609229-cit-0016","publication-title":
        "Chem. Soc. Rev.","doi": "10.1039/C4CS00351A","contributor": {"fullname":
        "Currin"}},{"volume": "4","start-page": "1024","year": "2003","ident": "10.1002/anie.201609229-BIB0020d|anie201609229-cit-0095","publication-title":
        "ChemBioChem","doi": "10.1002/cbic.200300685","contributor": {"fullname":
        "Winkler"}},{"volume": "40","start-page": "3763","year": "2012","ident": "10.1002/anie.201609229-BIB0169a|anie201609229-cit-0378","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gkr1191","contributor": {"fullname":
        "Karig"}},{"ident": "10.1002/anie.201609229-BIB0006|anie201609229-cit-0027"},{"volume":
        "43","start-page": "6426","year": "2004","ident": "10.1002/anie.201609229-BIB0008e|anie201609229-cit-0043","publication-title":
        "Angew. Chem. Int. Ed.","doi": "10.1002/anie.200300646","contributor": {"fullname":
        "Budisa"}},{"ident": "10.1002/anie.201609229-BIB0022|anie201609229-cit-0109"},{"volume":
        "102","start-page": "12678","year": "2005","ident": "10.1002/anie.201609229-BIB0110a|anie201609229-cit-0285","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.0504604102","contributor":
        {"fullname": "Alper"}},{"volume": "457","start-page": "309","year": "2009","ident":
        "10.1002/anie.201609229-BIB0136|anie201609229-cit-0330","publication-title":
        "Nature","doi": "10.1038/nature07616","contributor": {"fullname": "Tigges"}},{"volume":
        "5","start-page": "565","year": "2014","ident": "10.1002/anie.201609229-BIB0007b|anie201609229-cit-0033","publication-title":
        "Front. Microbiol.","doi": "10.3389/fmicb.2014.00565","contributor": {"fullname":
        "Laos"}},{"volume": "44","start-page": "7465","year": "2015","ident": "10.1002/anie.201609229-BIB0162a|anie201609229-cit-0366","publication-title":
        "Chem. Soc. Rev.","doi": "10.1039/C5CS00361J","contributor": {"fullname":
        "van Roekel"}},{"volume": "41","start-page": "77","year": "2013","ident":
        "10.1002/anie.201609229-BIB0024b|anie201609229-cit-0119","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gkt002","contributor": {"fullname":
        "Muller"}},{"volume": "50","start-page": "138","year": "2011","ident": "10.1002/anie.201609229-BIB0004d|anie201609229-cit-0018","publication-title":
        "Angew. Chem. Int. Ed.","doi": "10.1002/anie.201000826","contributor": {"fullname":
        "Reetz"}},{"volume": "48","start-page": "2715","year": "2009","ident": "10.1002/anie.201609229-BIB0020e|anie201609229-cit-0096","publication-title":
        "Angew. Chem. Int. Ed.","doi": "10.1002/anie.200805311","contributor": {"fullname":
        "Wieland"}},{"ident": "10.1002/anie.201609229-BIB0015|anie201609229-cit-0065"},{"volume":
        "460","start-page": "894","year": "2009","ident": "10.1002/anie.201609229-BIB0101|anie201609229-cit-0266","publication-title":
        "Nature","doi": "10.1038/nature08187","contributor": {"fullname": "Wang"}},{"volume":
        "5","start-page": "1011","year": "2013","ident": "10.1002/anie.201609229-BIB0189a|anie201609229-cit-0408","publication-title":
        "Nat. Chem.","doi": "10.1038/nchem.1781","contributor": {"fullname": "Attwater"}},{"volume":
        "12","start-page": "664","year": "2015","ident": "10.1002/anie.201609229-BIB0093a|anie201609229-cit-0252","publication-title":
        "Nat. Methods","doi": "10.1038/nmeth.3433","contributor": {"fullname": "Shechner"}},{"volume":
        "2","start-page": "715","year": "2013","ident": "10.1002/anie.201609229-BIB0145|anie201609229-cit-0345","publication-title":
        "ACS Synth. Biol.","doi": "10.1021/sb4000417","contributor": {"fullname":
        "Gupta"}},{"volume": "54","start-page": "3351","year": "2015","ident": "10.1002/anie.201609229-BIB0004e|anie201609229-cit-0020","publication-title":
        "Angew. Chem. Int. Ed.","doi": "10.1002/anie.201409470","contributor": {"fullname":
        "Renata"}},{"volume": "11","start-page": "198","year": "2015","ident": "10.1002/anie.201609229-BIB0024d|anie201609229-cit-0121","publication-title":
        "Nat. Chem. Biol.","doi": "10.1038/nchembio.1753","contributor": {"fullname":
        "Polstein"}},{"ident": "10.1002/anie.201609229-BIB0105|anie201609229-cit-0270"},{"volume":
        "113","start-page": "216","year": "2016","ident": "10.1002/anie.201609229-BIB0039|anie201609229-cit-0159","publication-title":
        "Biotechnol. Bioeng.","doi": "10.1002/bit.25693","contributor": {"fullname":
        "Meyer"}},{"volume": "3","start-page": "77","year": "2009","ident": "10.1002/anie.201609229-BIB0105a|anie201609229-cit-0271","publication-title":
        "Syst. Synth. Biol.","doi": "10.1007/s11693-009-9040-9","contributor": {"fullname":
        "Marliere"}},{"volume": "40","start-page": "9369","year": "2012","ident":
        "10.1002/anie.201609229-BIB0032a|anie201609229-cit-0144","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gks668","contributor": {"fullname":
        "Kashida"}},{"volume": "163","start-page": "759","year": "2015","ident": "10.1002/anie.201609229-BIB0087a|anie201609229-cit-0234","publication-title":
        "Cell","doi": "10.1016/j.cell.2015.09.038","contributor": {"fullname": "Zetsche"}},{"ident":
        "10.1002/anie.201609229-BIB0029|anie201609229-cit-0133"},{"volume": "438","start-page":
        "449","year": "2005","ident": "10.1002/anie.201609229-BIB0001a|anie201609229-cit-0002","publication-title":
        "Nature","doi": "10.1038/nature04342","contributor": {"fullname": "Endy"}},{"volume":
        "30","start-page": "354","year": "2012","ident": "10.1002/anie.201609229-BIB0110e|anie201609229-cit-0289","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.2149","contributor": {"fullname": "Zhang"}},{"ident":
        "10.1002/anie.201609229-BIB0011|anie201609229-cit-0047"},{"volume": "121","start-page":
        "2753","year": "2009","ident": "10.1002/anie.201609229-BIB0020e.2|anie201609229-cit-0097","publication-title":
        "Angew. Chem.","doi": "10.1002/ange.200805311"},{"volume": "111","start-page":
        "15934","year": "2014","ident": "10.1002/anie.201609229-BIB0005d|anie201609229-cit-0026","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.1405220111","contributor":
        {"fullname": "Stein"}},{"volume": "31","start-page": "827","year": "2013","ident":
        "10.1002/anie.201609229-BIB0088c|anie201609229-cit-0240","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.2647","contributor": {"fullname": "Hsu"}},{"volume":
        "7","start-page": "521","year": "2011","ident": "10.1002/anie.201609229-BIB0144|anie201609229-cit-0344","publication-title":
        "Mol. Syst. Biol.","doi": "10.1038/msb.2011.55","contributor": {"fullname":
        "Saeidi"}},{"ident": "10.1002/anie.201609229-BIB0028|anie201609229-cit-0130"},{"volume":
        "159","start-page": "925","year": "2014","ident": "10.1002/anie.201609229-BIB0023a|anie201609229-cit-0113","publication-title":
        "Cell","doi": "10.1016/j.cell.2014.10.002","contributor": {"fullname": "Green"}},{"volume":
        "164","start-page": "780","year": "2016","ident": "10.1002/anie.201609229-BIB0029d|anie201609229-cit-0138","publication-title":
        "Cell","doi": "10.1016/j.cell.2016.01.012","contributor": {"fullname": "Morsut"}},{"ident":
        "10.1002/anie.201609229-BIB0137|anie201609229-cit-0331"},{"volume": "4","start-page":
        "441","year": "2009","ident": "10.1002/anie.201609229-BIB0079|anie201609229-cit-0216","publication-title":
        "ACS Chem. Biol.","doi": "10.1021/cb900041s","contributor": {"fullname": "Edwards"}},{"volume":
        "12","start-page": "1085","year": "2015","ident": "10.1002/anie.201609229-BIB0023c|anie201609229-cit-0115","publication-title":
        "Nat. Methods","doi": "10.1038/nmeth.3585","contributor": {"fullname": "Slomovic"}},{"volume":
        "83","start-page": "615","year": "2014","ident": "10.1002/anie.201609229-BIB0017c|anie201609229-cit-0076","publication-title":
        "Annu. Rev. Biochem.","doi": "10.1146/annurev-biochem-080411-124036","contributor":
        {"fullname": "Blain"}},{"volume": "10","start-page": "963","year": "2014","ident":
        "10.1002/anie.201609229-BIB0117c|anie201609229-cit-0303","publication-title":
        "Nat. Chem. Biol.","doi": "10.1038/nchembio.1659","contributor": {"fullname":
        "Doroghazi"}},{"ident": "10.1002/anie.201609229-BIB0129|anie201609229-cit-0317"},{"volume":
        "296","start-page": "1466","year": "2002","ident": "10.1002/anie.201609229-BIB0124|anie201609229-cit-0310","publication-title":
        "Science","doi": "10.1126/science.1067407","contributor": {"fullname": "Guet"}},{"volume":
        "21","start-page": "1238","year": "2014","ident": "10.1002/anie.201609229-BIB0040|anie201609229-cit-0160","publication-title":
        "Chem. Biol.","doi": "10.1016/j.chembiol.2014.08.011","contributor": {"fullname":
        "Rakhit"}},{"volume": "326","start-page": "1509","year": "2009","ident": "10.1002/anie.201609229-BIB0083a|anie201609229-cit-0223","publication-title":
        "Science","doi": "10.1126/science.1178811","contributor": {"fullname": "Boch"}},{"volume":
        "8","start-page": "402","year": "2016","ident": "10.1002/anie.201609229-BIB0149|anie201609229-cit-0349","publication-title":
        "Wiley Interdiscip. Rev. Syst. Biol. Med.","doi": "10.1002/wsbm.1345","contributor":
        {"fullname": "Schukur"}},{"volume": "12","start-page": "345","year": "2016","ident":
        "10.1002/anie.201609229-BIB0028a|anie201609229-cit-0131","publication-title":
        "Mol. BioSyst.","doi": "10.1039/C5MB00763A","contributor": {"fullname": "Juillot"}},{"volume":
        "16","start-page": "245","year": "2012","ident": "10.1002/anie.201609229-BIB0007c|anie201609229-cit-0034","publication-title":
        "Curr. Opin. Chem. Biol.","doi": "10.1016/j.cbpa.2012.05.198","contributor":
        {"fullname": "Pinheiro"}},{"volume": "4","start-page": "09771","year": "2015","ident":
        "10.1002/anie.201609229-BIB0169b|anie201609229-cit-0379","publication-title":
        "eLife","doi": "10.7554/eLife.09771","contributor": {"fullname": "Niederholtmeyer"}},{"volume":
        "388","start-page": "882","year": "1997","ident": "10.1002/anie.201609229-BIB0050|anie201609229-cit-0178","publication-title":
        "Nature","doi": "10.1038/42264","contributor": {"fullname": "Miyawaki"}},{"ident":
        "10.1002/anie.201609229-BIB0004|anie201609229-cit-0014"},{"volume": "164","start-page":
        "1185","year": "2016","ident": "10.1002/anie.201609229-BIB0011b|anie201609229-cit-0049","publication-title":
        "Cell","doi": "10.1016/j.cell.2016.02.004","contributor": {"fullname": "Nielsen"}},{"volume":
        "82","start-page": "447","year": "2013","ident": "10.1002/anie.201609229-BIB0004c|anie201609229-cit-0017","publication-title":
        "Annu. Rev. Biochem.","doi": "10.1146/annurev-biochem-072611-101825","contributor":
        {"fullname": "Hilvert"}},{"volume": "82","start-page": "115","year": "2013","ident":
        "10.1002/anie.201609229-BIB0122|anie201609229-cit-0308","publication-title":
        "Adv. Appl. Microbiol.","doi": "10.1016/B978-0-12-407679-2.00004-1","contributor":
        {"fullname": "Heidebrecht"}},{"volume": "21","start-page": "81","year": "2014","ident":
        "10.1002/anie.201609229-BIB0020g|anie201609229-cit-0099","publication-title":
        "Metab. Eng.","doi": "10.1016/j.ymben.2013.11.003","contributor": {"fullname":
        "Rössger"}},{"volume": "322","start-page": "456","year": "2008","ident": "10.1002/anie.201609229-BIB0127|anie201609229-cit-0313","publication-title":
        "Science","doi": "10.1126/science.1160311","contributor": {"fullname": "Win"}},{"volume":
        "50","start-page": "3124","year": "2011","ident": "10.1002/anie.201609229-BIB0018b|anie201609229-cit-0081","publication-title":
        "Angew. Chem. Int. Ed.","doi": "10.1002/anie.200907223","contributor": {"fullname":
        "Krishnan"}},{"volume": "508","start-page": "387","year": "2014","ident":
        "10.1002/anie.201609229-BIB0138|anie201609229-cit-0334","publication-title":
        "Nature","doi": "10.1038/nature13238","contributor": {"fullname": "Prindle"}},{"volume":
        "326","start-page": "1501","year": "2009","ident": "10.1002/anie.201609229-BIB0083b|anie201609229-cit-0224","publication-title":
        "Science","doi": "10.1126/science.1178817","contributor": {"fullname": "Moscou"}},{"volume":
        "108","start-page": "14198","year": "2011","ident": "10.1002/anie.201609229-BIB0081|anie201609229-cit-0218","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.1111704108","contributor":
        {"fullname": "Nern"}},{"volume": "14","start-page": "306","year": "2012","ident":
        "10.1002/anie.201609229-BIB0113|anie201609229-cit-0296","publication-title":
        "Metab. Eng.","doi": "10.1016/j.ymben.2012.04.004","contributor": {"fullname":
        "Michener"}},{"volume": "21","start-page": "562","year": "2011","ident": "10.1002/anie.201609229-BIB0014c|anie201609229-cit-0063","publication-title":
        "Trends Cell Biol.","doi": "10.1016/j.tcb.2011.07.005","contributor": {"fullname":
        "Juhas"}},{"volume": "13","start-page": "177","year": "2016","ident": "10.1002/anie.201609229-BIB0064|anie201609229-cit-0194","publication-title":
        "Nat. Methods","doi": "10.1038/nmeth.3696","contributor": {"fullname": "Taylor"}},{"volume":
        "86","start-page": "60","year": "2015","ident": "10.1002/anie.201609229-BIB0171|anie201609229-cit-0382","publication-title":
        "Methods","doi": "10.1016/j.ymeth.2015.05.020","contributor": {"fullname":
        "Takahashi"}},{"ident": "10.1002/anie.201609229-BIB0023|anie201609229-cit-0112"},{"volume":
        "10","start-page": "0135965","year": "2015","ident": "10.1002/anie.201609229-BIB0047|anie201609229-cit-0175","publication-title":
        "PLoS One","contributor": {"fullname": "Wong"}},{"volume": "7","start-page":
        "318ra","year": "2015","ident": "10.1002/anie.201609229-BIB0021c|anie201609229-cit-0107","publication-title":
        "Sci. Transl. Med.","doi": "10.1126/scitranslmed.aac4964","contributor": {"fullname":
        "Schukur"}},{"volume": "9","start-page": "23","year": "2008","ident": "10.1002/anie.201609229-BIB0030b|anie201609229-cit-0141","publication-title":
        "BMC Mol. Biol.","doi": "10.1186/1471-2199-9-23","contributor": {"fullname":
        "Kim"}},{"volume": "3","start-page": "627","year": "2014","ident": "10.1002/anie.201609229-BIB0129d|anie201609229-cit-0321","publication-title":
        "ACS Synth. Biol.","doi": "10.1021/sb4001596","contributor": {"fullname":
        "Guinn"}},{"volume": "428","start-page": "862","year": "2016","ident": "10.1002/anie.201609229-BIB0002e|anie201609229-cit-0009","publication-title":
        "J. Mol. Biol.","doi": "10.1016/j.jmb.2015.10.004","contributor": {"fullname":
        "Bradley"}},{"volume": "34","start-page": "869","year": "2016","ident": "10.1002/anie.201609229-BIB0087c|anie201609229-cit-0236","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.3620","contributor": {"fullname": "Kleinstiver"}},{"volume":
        "42","start-page": "12322","year": "2014","ident": "10.1002/anie.201609229-BIB0046|anie201609229-cit-0174","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gku884","contributor": {"fullname":
        "Schaerli"}},{"ident": "10.1002/anie.201609229-BIB0003|anie201609229-cit-0010"},{"volume":
        "4","start-page": "19","year": "2016","ident": "10.1002/anie.201609229-BIB0185|anie201609229-cit-0400","publication-title":
        "Front. Bioeng. Biotechnol.","doi": "10.3389/fbioe.2016.00019","contributor":
        {"fullname": "Schmitt"}},{"volume": "5","start-page": "5392","year": "2014","ident":
        "10.1002/anie.201609229-BIB0029b|anie201609229-cit-0136","publication-title":
        "Nat. Commun.","doi": "10.1038/ncomms6392","contributor": {"fullname": "Folcher"}},{"volume":
        "6","start-page": "444","year": "2010","ident": "10.1002/anie.201609229-BIB0027a|anie201609229-cit-0125","publication-title":
        "Mol. Syst. Biol.","doi": "10.1038/msb.2010.99","contributor": {"fullname":
        "Nissim"}},{"volume": "6","start-page": "35082","year": "2016","ident": "10.1002/anie.201609229-BIB0100c|anie201609229-cit-0265","publication-title":
        "Sci. Rep.","doi": "10.1038/srep35082","contributor": {"fullname": "Ye"}},{"volume":
        "279","start-page": "21415","year": "2004","ident": "10.1002/anie.201609229-BIB0041a|anie201609229-cit-0162","publication-title":
        "J. Biol. Chem.","doi": "10.1074/jbc.M402954200","contributor": {"fullname":
        "Janse"}},{"volume": "55","start-page": "1966","year": "2016","ident": "10.1002/anie.201609229-BIB0043b|anie201609229-cit-0167","publication-title":
        "Angew. Chem. Int. Ed.","doi": "10.1002/anie.201507978","contributor": {"fullname":
        "Toure"}},{"volume": "15","start-page": "3158","year": "2013","ident": "10.1002/anie.201609229-BIB0182|anie201609229-cit-0397","publication-title":
        "Environ. Microbiol.","doi": "10.1111/1462-2920.12214","contributor": {"fullname":
        "Jiménez"}},{"volume": "481","start-page": "295","year": "2012","ident": "10.1002/anie.201609229-BIB0152|anie201609229-cit-0352","publication-title":
        "Nature","doi": "10.1038/nature10761","contributor": {"fullname": "Robinton"}},{"volume":
        "159","start-page": "428","year": "2014","ident": "10.1002/anie.201609229-BIB0153b|anie201609229-cit-0355","publication-title":
        "Cell","doi": "10.1016/j.cell.2014.09.040","contributor": {"fullname": "Pagliuca"}},{"volume":
        "21","start-page": "1069","year": "2003","ident": "10.1002/anie.201609229-BIB0176|anie201609229-cit-0387","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt862","contributor": {"fullname": "Stojanovic"}},{"volume":
        "339","start-page": "823","year": "2013","ident": "10.1002/anie.201609229-BIB0085c|anie201609229-cit-0231","publication-title":
        "Science","doi": "10.1126/science.1232033","contributor": {"fullname": "Mali"}},{"volume":
        "500","start-page": "472","year": "2013","ident": "10.1002/anie.201609229-BIB0024a|anie201609229-cit-0118","publication-title":
        "Nature","doi": "10.1038/nature12466","contributor": {"fullname": "Konermann"}},{"volume":
        "4","start-page": "474","year": "2008","ident": "10.1002/anie.201609229-BIB0005a|anie201609229-cit-0023","publication-title":
        "Nat. Chem. Biol.","doi": "10.1038/nchembio.98","contributor": {"fullname":
        "Goodey"}},{"volume": "106","start-page": "22263","year": "2009","ident":
        "10.1002/anie.201609229-BIB0026|anie201609229-cit-0123","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.0911566106","contributor":
        {"fullname": "Reichheld"}},{"ident": "10.1002/anie.201609229-BIB0117|anie201609229-cit-0300"},{"volume":
        "133","start-page": "16235","year": "2011","ident": "10.1002/anie.201609229-BIB0054|anie201609229-cit-0182","publication-title":
        "J. Am. Chem. Soc.","doi": "10.1021/ja206915m","contributor": {"fullname":
        "Brun"}},{"volume": "1","start-page": "29","year": "2012","ident": "10.1002/anie.201609229-BIB0169c|anie201609229-cit-0380","publication-title":
        "ACS Synth. Biol.","doi": "10.1021/sb200016s","contributor": {"fullname":
        "Shin"}},{"volume": "47","start-page": "1871","year": "2014","ident": "10.1002/anie.201609229-BIB0018a|anie201609229-cit-0080","publication-title":
        "Acc. Chem. Res.","doi": "10.1021/ar500076k","contributor": {"fullname": "Grabow"}},{"volume":
        "123","start-page": "3180","year": "2011","ident": "10.1002/anie.201609229-BIB0018b.2|anie201609229-cit-0082","publication-title":
        "Angew. Chem.","doi": "10.1002/ange.200907223"},{"volume": "125","start-page":
        "477","year": "2013","ident": "10.1002/anie.201609229-BIB0187.2|anie201609229-cit-0405","publication-title":
        "Angew. Chem.","doi": "10.1002/ange.201207078"},{"volume": "10","start-page":
        "69","year": "2015","ident": "10.1002/anie.201609229-BIB0016b|anie201609229-cit-0070","publication-title":
        "Biotechnol. J.","doi": "10.1002/biot.201400330","contributor": {"fullname":
        "Dudley"}},{"ident": "10.1002/anie.201609229-BIB0112|anie201609229-cit-0292"},{"volume":
        "325","start-page": "725","year": "2009","ident": "10.1002/anie.201609229-BIB0179b|anie201609229-cit-0394","publication-title":
        "Science","doi": "10.1126/science.1174251","contributor": {"fullname": "Dietz"}},{"volume":
        "16","start-page": "173","year": "2009","ident": "10.1002/anie.201609229-BIB0033a|anie201609229-cit-0147","publication-title":
        "Chem. Biol.","doi": "10.1016/j.chembiol.2008.12.008","contributor": {"fullname":
        "Hunsicker"}},{"volume": "26","start-page": "1486","year": "2012","ident":
        "10.1002/anie.201609229-BIB0140a|anie201609229-cit-0337","publication-title":
        "Genes Dev.","doi": "10.1101/gad.189035.112","contributor": {"fullname": "Burrill"}},{"ident":
        "10.1002/anie.201609229-BIB0007|anie201609229-cit-0031"},{"volume": "4","start-page":
        "655","year": "2015","ident": "10.1002/anie.201609229-BIB0167a|anie201609229-cit-0373","publication-title":
        "ACS Synth. Biol.","doi": "10.1021/sb500314r","contributor": {"fullname":
        "Akter"}},{"volume": "128","start-page": "2002","year": "2016","ident": "10.1002/anie.201609229-BIB0043b.2|anie201609229-cit-0168","publication-title":
        "Angew. Chem.","doi": "10.1002/ange.201507978"},{"volume": "344","start-page":
        "55","year": "2014","ident": "10.1002/anie.201609229-BIB0099|anie201609229-cit-0261","publication-title":
        "Science","doi": "10.1126/science.1249252","contributor": {"fullname": "Annaluru"}},{"volume":
        "5","start-page": "179ps","year": "2013","ident": "10.1002/anie.201609229-BIB0013c|anie201609229-cit-0057","publication-title":
        "Sci. Transl. Med.","doi": "10.1126/scitranslmed.3005568","contributor": {"fullname":
        "Fischbach"}},{"volume": "11","start-page": "499","year": "2014","ident":
        "10.1002/anie.201609229-BIB0097|anie201609229-cit-0259","publication-title":
        "Nat. Methods","doi": "10.1038/nmeth.2918","contributor": {"fullname": "Kosuri"}},{"volume":
        "20","start-page": "901","year": "2002","ident": "10.1002/anie.201609229-BIB0019b|anie201609229-cit-0088","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt731","contributor": {"fullname": "Weber"}},{"volume":
        "31","start-page": "155","year": "2013","ident": "10.1002/anie.201609229-BIB0002a|anie201609229-cit-0005","publication-title":
        "Trends Biotechnol.","doi": "10.1016/j.tibtech.2012.11.006","contributor":
        {"fullname": "Ausländer"}},{"volume": "110","start-page": "141","year": "2013","ident":
        "10.1002/anie.201609229-BIB0021d|anie201609229-cit-0108","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.1216801110","contributor":
        {"fullname": "Ye"}},{"volume": "407","start-page": "193","year": "2011","ident":
        "10.1002/anie.201609229-BIB0078|anie201609229-cit-0215","publication-title":
        "J. Mol. Biol.","doi": "10.1016/j.jmb.2011.01.004","contributor": {"fullname":
        "Turan"}},{"volume": "7","start-page": "10624","year": "2016","ident": "10.1002/anie.201609229-BIB0028b|anie201609229-cit-0132","publication-title":
        "Nat. Commun.","doi": "10.1038/ncomms10624","contributor": {"fullname": "Niopek"}},{"volume":
        "13","start-page": "168","year": "2012","ident": "10.1002/anie.201609229-BIB0008b|anie201609229-cit-0040","publication-title":
        "Nat. Rev. Mol. Cell Biol.","doi": "10.1038/nrm3286","contributor": {"fullname":
        "Davis"}},{"volume": "54","start-page": "5933","year": "2015","ident": "10.1002/anie.201609229-BIB0029a|anie201609229-cit-0134","publication-title":
        "Angew. Chem. Int. Ed.","doi": "10.1002/anie.201412204","contributor": {"fullname":
        "Kim"}},{"volume": "428","start-page": "893","year": "2016","ident": "10.1002/anie.201609229-BIB0012|anie201609229-cit-0053","publication-title":
        "J. Mol. Biol.","doi": "10.1016/j.jmb.2016.02.018","contributor": {"fullname":
        "Ma"}},{"volume": "24","start-page": "633","year": "2013","ident": "10.1002/anie.201609229-BIB0017e|anie201609229-cit-0078","publication-title":
        "Curr. Opin. Biotechnol.","doi": "10.1016/j.copbio.2013.01.002","contributor":
        {"fullname": "Stano"}},{"volume": "111","start-page": "1396","year": "2014","ident":
        "10.1002/anie.201609229-BIB0174|anie201609229-cit-0385","publication-title":
        "Biotechnol. Bioeng.","doi": "10.1002/bit.25198","contributor": {"fullname":
        "Zhu"}},{"volume": "330","start-page": "52","year": "2004","ident": "10.1002/anie.201609229-BIB0164|anie201609229-cit-0369","publication-title":
        "Anal. Biochem.","doi": "10.1016/j.ab.2004.03.064","contributor": {"fullname":
        "Pellinen"}},{"volume": "320","start-page": "789","year": "2008","ident":
        "10.1002/anie.201609229-BIB0186a|anie201609229-cit-0402","publication-title":
        "Science","doi": "10.1126/science.1154413","contributor": {"fullname": "Loose"}},{"volume":
        "109","start-page": "2579","year": "2012","ident": "10.1002/anie.201609229-BIB0084a|anie201609229-cit-0226","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.1208507109","contributor":
        {"fullname": "Gasiunas"}},{"volume": "25","start-page": "770","year": "2007","ident":
        "10.1002/anie.201609229-BIB0072|anie201609229-cit-0207","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt1314","contributor": {"fullname": "Wang"}},{"volume":
        "32","start-page": "569","year": "2014","ident": "10.1002/anie.201609229-BIB0089b|anie201609229-cit-0243","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.2908","contributor": {"fullname": "Tsai"}},{"volume":
        "329","start-page": "52","year": "2010","ident": "10.1002/anie.201609229-BIB0015a|anie201609229-cit-0066","publication-title":
        "Science","doi": "10.1126/science.1190719","contributor": {"fullname": "Gibson"}},{"volume":
        "279","start-page": "14280","year": "2004","ident": "10.1002/anie.201609229-BIB0051|anie201609229-cit-0179","publication-title":
        "J. Biol. Chem.","doi": "10.1074/jbc.M312751200","contributor": {"fullname":
        "Heim"}},{"volume": "21","start-page": "7701","year": "2015","ident": "10.1002/anie.201609229-BIB0077b|anie201609229-cit-0214","publication-title":
        "Chem. Eur. J.","doi": "10.1002/chem.201500971","contributor": {"fullname":
        "Ehrlich"}},{"volume": "333","start-page": "1307","year": "2011","ident":
        "10.1002/anie.201609229-BIB0142a|anie201609229-cit-0341","publication-title":
        "Science","doi": "10.1126/science.1205527","contributor": {"fullname": "Xie"}},{"ident":
        "10.1002/anie.201609229-BIB0014|anie201609229-cit-0060"},{"volume": "496","start-page":
        "528","year": "2013","ident": "10.1002/anie.201609229-BIB0120|anie201609229-cit-0306","publication-title":
        "Nature","doi": "10.1038/nature12051","contributor": {"fullname": "Paddon"}},{"volume":
        "34","start-page": "142","year": "2015","ident": "10.1002/anie.201609229-BIB0112b|anie201609229-cit-0294","publication-title":
        "Curr. Opin. Biotechnol.","doi": "10.1016/j.copbio.2014.12.022","contributor":
        {"fullname": "Venayak"}},{"volume": "590","start-page": "2051","year": "2016","ident":
        "10.1002/anie.201609229-BIB0183|anie201609229-cit-0398","publication-title":
        "FEBS Lett.","doi": "10.1002/1873-3468.12233","contributor": {"fullname":
        "Biner"}},{"ident": "10.1002/anie.201609229-BIB0021|anie201609229-cit-0104"},{"volume":
        "518","start-page": "89","year": "2015","ident": "10.1002/anie.201609229-BIB0104|anie201609229-cit-0269","publication-title":
        "Nature","doi": "10.1038/nature14095","contributor": {"fullname": "Rovner"}},{"volume":
        "155","start-page": "1479","year": "2013","ident": "10.1002/anie.201609229-BIB0093b|anie201609229-cit-0253","publication-title":
        "Cell","doi": "10.1016/j.cell.2013.12.001","contributor": {"fullname": "Chen"}},{"volume":
        "7","start-page": "11463","year": "2016","ident": "10.1002/anie.201609229-BIB0153a|anie201609229-cit-0354","publication-title":
        "Nat. Commun.","doi": "10.1038/ncomms11463","contributor": {"fullname": "Millman"}},{"volume":
        "18","start-page": "372","year": "2011","ident": "10.1002/anie.201609229-BIB0173|anie201609229-cit-0384","publication-title":
        "Chem. Biol.","doi": "10.1016/j.chembiol.2010.12.019","contributor": {"fullname":
        "Wang"}},{"volume": "332","start-page": "1196","year": "2011","ident": "10.1002/anie.201609229-BIB0178a|anie201609229-cit-0390","publication-title":
        "Science","doi": "10.1126/science.1200520","contributor": {"fullname": "Qian"}},{"volume":
        "31","start-page": "1039","year": "2013","ident": "10.1002/anie.201609229-BIB0112a|anie201609229-cit-0293","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.2689","contributor": {"fullname": "Dahl"}},{"volume":
        "330","start-page": "1251","year": "2010","ident": "10.1002/anie.201609229-BIB0022a|anie201609229-cit-0110","publication-title":
        "Science","doi": "10.1126/science.1192128","contributor": {"fullname": "Culler"}},{"volume":
        "461","start-page": "997","year": "2009","ident": "10.1002/anie.201609229-BIB0045b|anie201609229-cit-0173","publication-title":
        "Nature","doi": "10.1038/nature08446","contributor": {"fullname": "Levskaya"}},{"ident":
        "10.1002/anie.201609229-BIB0153|anie201609229-cit-0353"},{"volume": "42","start-page":
        "84","year": "2016","ident": "10.1002/anie.201609229-BIB0011e|anie201609229-cit-0052","publication-title":
        "Curr. Opin. Biotechnol.","doi": "10.1016/j.copbio.2016.03.005","contributor":
        {"fullname": "Rogers"}},{"volume": "349","start-page": "1095","year": "2015","ident":
        "10.1002/anie.201609229-BIB0121|anie201609229-cit-0307","publication-title":
        "Science","doi": "10.1126/science.aac9373","contributor": {"fullname": "Galanie"}},{"volume":
        "8","start-page": "556","year": "2016","ident": "10.1002/anie.201609229-BIB0067|anie201609229-cit-0197","publication-title":
        "Nat. Chem.","doi": "10.1038/nchem.2493","contributor": {"fullname": "Chen"}},{"volume":
        "469","start-page": "212","year": "2011","ident": "10.1002/anie.201609229-BIB0132|anie201609229-cit-0324","publication-title":
        "Nature","doi": "10.1038/nature09565","contributor": {"fullname": "Tamsir"}},{"ident":
        "10.1002/anie.201609229-BIB0094|anie201609229-cit-0254"},{"volume": "481","start-page":
        "39","year": "2012","ident": "10.1002/anie.201609229-BIB0137a|anie201609229-cit-0332","publication-title":
        "Nature","doi": "10.1038/nature10722","contributor": {"fullname": "Prindle"}},{"volume":
        "8","start-page": "2127","year": "2013","ident": "10.1002/anie.201609229-BIB0058|anie201609229-cit-0186","publication-title":
        "ACS Chem. Biol.","doi": "10.1021/cb400406x","contributor": {"fullname": "Banala"}},{"volume":
        "536","start-page": "81","year": "2016","ident": "10.1002/anie.201609229-BIB0139|anie201609229-cit-0335","publication-title":
        "Nature","doi": "10.1038/nature18930","contributor": {"fullname": "Din"}},{"volume":
        "3","start-page": "103","year": "2011","ident": "10.1002/anie.201609229-BIB0018e|anie201609229-cit-0085","publication-title":
        "Nat. Chem.","doi": "10.1038/nchem.957","contributor": {"fullname": "Zhang"}},{"volume":
        "475","start-page": "368","year": "2011","ident": "10.1002/anie.201609229-BIB0178b|anie201609229-cit-0391","publication-title":
        "Nature","doi": "10.1038/nature10262","contributor": {"fullname": "Qian"}},{"volume":
        "456","start-page": "516","year": "2008","ident": "10.1002/anie.201609229-BIB0135|anie201609229-cit-0329","publication-title":
        "Nature","doi": "10.1038/nature07389","contributor": {"fullname": "Stricker"}},{"volume":
        "31","start-page": "448","year": "2013","ident": "10.1002/anie.201609229-BIB0133a|anie201609229-cit-0326","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.2510","contributor": {"fullname": "Siuti"}},{"volume":
        "335","start-page": "831","year": "2012","ident": "10.1002/anie.201609229-BIB0180|anie201609229-cit-0395","publication-title":
        "Science","doi": "10.1126/science.1214081","contributor": {"fullname": "Douglas"}},{"volume":
        "19","start-page": "114","year": "2014","ident": "10.1002/anie.201609229-BIB0106a|anie201609229-cit-0277","publication-title":
        "Curr. Opin. Microbiol.","doi": "10.1016/j.mib.2014.07.001","contributor":
        {"fullname": "Charpentier"}},{"volume": "40","start-page": "64","year": "2012","ident":
        "10.1002/anie.201609229-BIB0022b|anie201609229-cit-0111","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gks028","contributor": {"fullname":
        "Goldfless"}},{"volume": "21","start-page": "760","year": "2010","ident":
        "10.1002/anie.201609229-BIB0034a|anie201609229-cit-0150","publication-title":
        "Curr. Opin. Biotechnol.","doi": "10.1016/j.copbio.2010.06.010","contributor":
        {"fullname": "Wieland"}},{"volume": "4","start-page": "516","year": "2015","ident":
        "10.1002/anie.201609229-BIB0019d|anie201609229-cit-0090","publication-title":
        "ACS Synth. Biol.","doi": "10.1021/sb500062p","contributor": {"fullname":
        "Klauser"}},{"volume": "8","start-page": "2242","year": "2012","ident": "10.1002/anie.201609229-BIB0128b|anie201609229-cit-0316","publication-title":
        "Mol. BioSyst.","doi": "10.1039/c2mb25091h","contributor": {"fullname": "Klauser"}},{"volume":
        "7","start-page": "10243","year": "2016","ident": "10.1002/anie.201609229-BIB0156|anie201609229-cit-0359","publication-title":
        "Nat. Commun.","doi": "10.1038/ncomms10243","contributor": {"fullname": "Guye"}},{"volume":
        "300","start-page": "763","year": "2003","ident": "10.1002/anie.201609229-BIB0082b|anie201609229-cit-0221","publication-title":
        "Science","doi": "10.1126/science.1078395","contributor": {"fullname": "Porteus"}},{"volume":
        "252","start-page": "1668","year": "1991","ident": "10.1002/anie.201609229-BIB0011a|anie201609229-cit-0048","publication-title":
        "Science","doi": "10.1126/science.2047876","contributor": {"fullname": "Bailey"}},{"volume":
        "4","start-page": "2","year": "2011","ident": "10.1002/anie.201609229-BIB0020h|anie201609229-cit-0100","publication-title":
        "Sci. Signaling","doi": "10.1126/scisignal.2001449","contributor": {"fullname":
        "Liang"}},{"volume": "33","start-page": "101","year": "2015","ident": "10.1002/anie.201609229-BIB0048|anie201609229-cit-0176","publication-title":
        "Trends Biotechnol.","doi": "10.1016/j.tibtech.2014.11.010","contributor":
        {"fullname": "Stein"}},{"ident": "10.1002/anie.201609229-BIB0140|anie201609229-cit-0336"},{"volume":
        "22","start-page": "306","year": "2016","ident": "10.1002/anie.201609229-BIB0154|anie201609229-cit-0357","publication-title":
        "Nat. Med.","doi": "10.1038/nm.4030","contributor": {"fullname": "Vegas"}},{"volume":
        "134","start-page": "16480","year": "2012","ident": "10.1002/anie.201609229-BIB0024c|anie201609229-cit-0120","publication-title":
        "J. Am. Chem. Soc.","doi": "10.1021/ja3065667","contributor": {"fullname":
        "Polstein"}},{"volume": "353","start-page": "8559","year": "2016","ident":
        "10.1002/anie.201609229-BIB0134|anie201609229-cit-0328","publication-title":
        "Science","doi": "10.1126/science.aad8559","contributor": {"fullname": "Roquet"}},{"volume":
        "485","start-page": "185","year": "2012","ident": "10.1002/anie.201609229-BIB0004a|anie201609229-cit-0015","publication-title":
        "Nature","doi": "10.1038/nature11117","contributor": {"fullname": "Bornscheuer"}},{"volume":
        "9","start-page": "666","year": "2016","ident": "10.1002/anie.201609229-BIB0105d|anie201609229-cit-0275","publication-title":
        "Microb. Biotechnol.","doi": "10.1111/1751-7915.12398","contributor": {"fullname":
        "Acevedo-Rocha"}},{"ident": "10.1002/anie.201609229-BIB0041|anie201609229-cit-0161"},{"volume":
        "113","start-page": "3431","year": "2016","ident": "10.1002/anie.201609229-BIB0123|anie201609229-cit-0309","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.1522985113","contributor":
        {"fullname": "Florea"}},{"ident": "10.1002/anie.201609229-BIB0060|anie201609229-cit-0188"},{"ident":
        "10.1002/anie.201609229-BIB0008|anie201609229-cit-0038"},{"volume": "6","start-page":
        "71","year": "2010","ident": "10.1002/anie.201609229-BIB0031|anie201609229-cit-0142","publication-title":
        "Nat. Chem. Biol.","doi": "10.1038/nchembio.273","contributor": {"fullname":
        "Saito"}},{"volume": "33","start-page": "123","year": "2016","ident": "10.1002/anie.201609229-BIB0107|anie201609229-cit-0279","publication-title":
        "Curr. Opin. Microbiol.","doi": "10.1016/j.mib.2016.07.009","contributor":
        {"fullname": "Borkowski"}},{"volume": "469","start-page": "207","year": "2011","ident":
        "10.1002/anie.201609229-BIB0129b|anie201609229-cit-0319","publication-title":
        "Nature","doi": "10.1038/nature09679","contributor": {"fullname": "Regot"}},{"ident":
        "10.1002/anie.201609229-BIB0093|anie201609229-cit-0251"},{"ident": "10.1002/anie.201609229-BIB0045|anie201609229-cit-0171"},{"ident":
        "10.1002/anie.201609229-BIB0005|anie201609229-cit-0022"},{"volume": "44","start-page":
        "92","year": "2016","ident": "10.1002/anie.201609229-BIB0167b|anie201609229-cit-0374","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gkw108","contributor": {"fullname":
        "Aw"}},{"volume": "13","start-page": "687","year": "2012","ident": "10.1002/anie.201609229-BIB0049|anie201609229-cit-0177","publication-title":
        "Nat. Rev. Neurosci.","doi": "10.1038/nrn3293","contributor": {"fullname":
        "Knopfel"}},{"volume": "336","start-page": "341","year": "2012","ident": "10.1002/anie.201609229-BIB0068b|anie201609229-cit-0200","publication-title":
        "Science","doi": "10.1126/science.1217622","contributor": {"fullname": "Pinheiro"}},{"volume":
        "116","start-page": "6586","year": "2004","ident": "10.1002/anie.201609229-BIB0008e.2|anie201609229-cit-0044","publication-title":
        "Angew. Chem.","doi": "10.1002/ange.200300646"},{"volume": "40","start-page":
        "37","year": "2012","ident": "10.1002/anie.201609229-BIB0020b|anie201609229-cit-0093","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gkr1251","contributor": {"fullname":
        "Gitzinger"}},{"volume": "35","start-page": "123","year": "2015","ident":
        "10.1002/anie.201609229-BIB0013e|anie201609229-cit-0059","publication-title":
        "Curr. Opin. Immunol.","doi": "10.1016/j.coi.2015.06.015","contributor": {"fullname":
        "Wu"}},{"ident": "10.1002/anie.201609229-BIB0128|anie201609229-cit-0314"},{"volume":
        "44","start-page": "1349","year": "2011","ident": "10.1002/anie.201609229-BIB0006c|anie201609229-cit-0030","publication-title":
        "Acc. Chem. Res.","doi": "10.1021/ar2000293","contributor": {"fullname": "Famulok"}},{"volume":
        "91","start-page": "883","year": "1994","ident": "10.1002/anie.201609229-BIB0082a|anie201609229-cit-0220","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.91.3.883","contributor":
        {"fullname": "Kim"}},{"ident": "10.1002/anie.201609229-BIB0036|anie201609229-cit-0154"},{"volume":
        "13","start-page": "455","year": "2012","ident": "10.1002/anie.201609229-BIB0002b|anie201609229-cit-0006","publication-title":
        "Nat. Rev. Genet.","doi": "10.1038/nrg3197","contributor": {"fullname": "Benenson"}},{"volume":
        "154","start-page": "1380","year": "2013","ident": "10.1002/anie.201609229-BIB0090b|anie201609229-cit-0246","publication-title":
        "Cell","doi": "10.1016/j.cell.2013.08.021","contributor": {"fullname": "Ran"}},{"volume":
        "127","start-page": "10168","year": "2015","ident": "10.1002/anie.201609229-BIB0070.2|anie201609229-cit-0203","publication-title":
        "Angew. Chem.","doi": "10.1002/ange.201502868"},{"volume": "113","start-page":
        "1244","year": "2016","ident": "10.1002/anie.201609229-BIB0021b|anie201609229-cit-0106","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.1514383113","contributor":
        {"fullname": "Saxena"}},{"ident": "10.1002/anie.201609229-BIB0032|anie201609229-cit-0143"},{"volume":
        "164","start-page": "770","year": "2016","ident": "10.1002/anie.201609229-BIB0158|anie201609229-cit-0361","publication-title":
        "Cell","doi": "10.1016/j.cell.2016.01.011","contributor": {"fullname": "Roybal"}},{"volume":
        "39","start-page": "106","year": "2016","ident": "10.1002/anie.201609229-BIB0002d|anie201609229-cit-0008","publication-title":
        "Curr. Opin. Struct. Biol.","doi": "10.1016/j.sbi.2016.06.012","contributor":
        {"fullname": "Gordley"}},{"volume": "32","start-page": "1610","year": "2004","ident":
        "10.1002/anie.201609229-BIB0020k|anie201609229-cit-0103","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gkh321","contributor": {"fullname":
        "Suess"}},{"volume": "2","start-page": "15","year": "2014","ident": "10.1002/anie.201609229-BIB0008c|anie201609229-cit-0041","publication-title":
        "Front. Chem.","doi": "10.3389/fchem.2014.00015","contributor": {"fullname":
        "Wals"}},{"volume": "55","start-page": "807","year": "2016","ident": "10.1002/anie.201609229-BIB0044|anie201609229-cit-0169","publication-title":
        "Angew. Chem. Int. Ed.","doi": "10.1002/anie.201507634","contributor": {"fullname":
        "Lai"}},{"volume": "24","start-page": "555","year": "2013","ident": "10.1002/anie.201609229-BIB0018c|anie201609229-cit-0083","publication-title":
        "Curr. Opin. Biotechnol.","doi": "10.1016/j.copbio.2013.02.001","contributor":
        {"fullname": "Linko"}},{"ident": "10.1002/anie.201609229-BIB0085|anie201609229-cit-0228"},{"ident":
        "10.1002/anie.201609229-BIB0001|anie201609229-cit-0001"},{"volume": "16","start-page":
        "586","year": "2012","ident": "10.1002/anie.201609229-BIB0017d|anie201609229-cit-0077","publication-title":
        "Curr. Opin. Chem. Biol.","doi": "10.1016/j.cbpa.2012.10.020","contributor":
        {"fullname": "Forlin"}},{"volume": "16","start-page": "379","year": "2015","ident":
        "10.1002/anie.201609229-BIB0006a|anie201609229-cit-0028","publication-title":
        "Nat. Rev. Genet.","doi": "10.1038/nrg3927","contributor": {"fullname": "Packer"}},{"volume":
        "15","start-page": "95","year": "2014","ident": "10.1002/anie.201609229-BIB0013d|anie201609229-cit-0058","publication-title":
        "Nat. Rev. Mol. Cell Biol.","doi": "10.1038/nrm3738","contributor": {"fullname":
        "Lienert"}},{"ident": "10.1002/anie.201609229-BIB0178|anie201609229-cit-0389"},{"volume":
        "403","start-page": "335","year": "2000","ident": "10.1002/anie.201609229-BIB0170|anie201609229-cit-0381","publication-title":
        "Nature","doi": "10.1038/35002125","contributor": {"fullname": "Elowitz"}},{"volume":
        "4","start-page": "259","year": "2013","ident": "10.1002/anie.201609229-BIB0011d|anie201609229-cit-0051","publication-title":
        "Annu. Rev. Chem. Biomol. Eng.","doi": "10.1146/annurev-chembioeng-061312-103312","contributor":
        {"fullname": "Woolston"}},{"volume": "14","start-page": "252","year": "2012","ident":
        "10.1002/anie.201609229-BIB0013a|anie201609229-cit-0055","publication-title":
        "Metab. Eng.","doi": "10.1016/j.ymben.2011.06.003","contributor": {"fullname":
        "Ausländer"}},{"volume": "159","start-page": "940","year": "2014","ident":
        "10.1002/anie.201609229-BIB0165|anie201609229-cit-0370","publication-title":
        "Cell","doi": "10.1016/j.cell.2014.10.004","contributor": {"fullname": "Pardee"}},{"volume":
        "5","start-page": "4408","year": "2014","ident": "10.1002/anie.201609229-BIB0029c|anie201609229-cit-0137","publication-title":
        "Nat. Commun.","doi": "10.1038/ncomms5408","contributor": {"fullname": "Ausländer"}},{"volume":
        "36","start-page": "117","year": "2016","ident": "10.1002/anie.201609229-BIB0045a|anie201609229-cit-0172","publication-title":
        "Dev. Cell","doi": "10.1016/j.devcel.2015.12.011","contributor": {"fullname":
        "Buckley"}},{"volume": "7","start-page": "12137","year": "2016","ident": "10.1002/anie.201609229-BIB0119|anie201609229-cit-0305","publication-title":
        "Nat. Commun.","doi": "10.1038/ncomms12137","contributor": {"fullname": "Li"}},{"volume":
        "32","start-page": "1262","year": "2014","ident": "10.1002/anie.201609229-BIB0088a|anie201609229-cit-0238","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.3026","contributor": {"fullname": "Doench"}},{"volume":
        "7","start-page": "289ra","year": "2015","ident": "10.1002/anie.201609229-BIB0161|anie201609229-cit-0364","publication-title":
        "Sci. Transl. Med.","doi": "10.1126/scitranslmed.aaa3601","contributor": {"fullname":
        "Courbet"}},{"volume": "9","start-page": "636","year": "2013","ident": "10.1002/anie.201609229-BIB0147|anie201609229-cit-0347","publication-title":
        "Mol. Syst. Biol.","doi": "10.1038/msb.2012.71","contributor": {"fullname":
        "Wu"}},{"volume": "6","start-page": "875","year": "2009","ident": "10.1002/anie.201609229-BIB0053|anie201609229-cit-0181","publication-title":
        "Nat. Methods","doi": "10.1038/nmeth.1398","contributor": {"fullname": "Tian"}},{"ident":
        "10.1002/anie.201609229-BIB0167|anie201609229-cit-0372"},{"ident": "10.1002/anie.201609229-BIB0083|anie201609229-cit-0222"},{"volume":
        "7","start-page": "445","year": "2011","ident": "10.1002/anie.201609229-BIB0116|anie201609229-cit-0299","publication-title":
        "Nat. Chem. Biol.","doi": "10.1038/nchembio.580","contributor": {"fullname":
        "Yim"}},{"volume": "29","start-page": "169","year": "2015","ident": "10.1002/anie.201609229-BIB0020j|anie201609229-cit-0102","publication-title":
        "Metab. Eng.","doi": "10.1016/j.ymben.2015.03.016","contributor": {"fullname":
        "Kim"}},{"volume": "33","start-page": "543","year": "2015","ident": "10.1002/anie.201609229-BIB0091a|anie201609229-cit-0248","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.3198","contributor": {"fullname": "Chu"}},{"volume":
        "131","start-page": "13906","year": "2009","ident": "10.1002/anie.201609229-BIB0037|anie201609229-cit-0157","publication-title":
        "J. Am. Chem. Soc.","doi": "10.1021/ja905596t","contributor": {"fullname":
        "Kumar"}},{"volume": "127","start-page": "3408","year": "2015","ident": "10.1002/anie.201609229-BIB0004e.2|anie201609229-cit-0021","publication-title":
        "Angew. Chem.","doi": "10.1002/ange.201409470"},{"volume": "11","start-page":
        "625","year": "2015","ident": "10.1002/anie.201609229-BIB0117a|anie201609229-cit-0301","publication-title":
        "Nat. Chem. Biol.","doi": "10.1038/nchembio.1890","contributor": {"fullname":
        "Medema"}},{"ident": "10.1002/anie.201609229-BIB0030|anie201609229-cit-0139"},{"volume":
        "464","start-page": "441","year": "2010","ident": "10.1002/anie.201609229-BIB0073|anie201609229-cit-0208","publication-title":
        "Nature","doi": "10.1038/nature08817","contributor": {"fullname": "Neumann"}},{"volume":
        "586","start-page": "2076","year": "2012","ident": "10.1002/anie.201609229-BIB0034b|anie201609229-cit-0151","publication-title":
        "FEBS Lett.","doi": "10.1016/j.febslet.2012.02.038","contributor": {"fullname":
        "Wittmann"}},{"volume": "31","start-page": "833","year": "2013","ident": "10.1002/anie.201609229-BIB0090a|anie201609229-cit-0245","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.2675","contributor": {"fullname": "Mali"}},{"volume":
        "2","start-page": "440","year": "2007","ident": "10.1002/anie.201609229-BIB0052|anie201609229-cit-0180","publication-title":
        "PLoS One","doi": "10.1371/journal.pone.0000440","contributor": {"fullname":
        "Dimitrov"}},{"volume": "13","start-page": "40","year": "2015","ident": "10.1002/anie.201609229-BIB0129c|anie201609229-cit-0320","publication-title":
        "BMC Biol.","doi": "10.1186/s12915-015-0146-0","contributor": {"fullname":
        "Wong"}},{"volume": "14","start-page": "261","year": "2012","ident": "10.1002/anie.201609229-BIB0016c|anie201609229-cit-0071","publication-title":
        "Metab. Eng.","doi": "10.1016/j.ymben.2011.09.002","contributor": {"fullname":
        "Hodgman"}},{"volume": "537","start-page": "661","year": "2016","ident": "10.1002/anie.201609229-BIB0062|anie201609229-cit-0192","publication-title":
        "Nature","doi": "10.1038/nature19114","contributor": {"fullname": "Jeschek"}},{"volume":
        "5","start-page": "213","year": "2010","ident": "10.1002/anie.201609229-BIB0146|anie201609229-cit-0346","publication-title":
        "Nat. Nanotechnol.","doi": "10.1038/nnano.2009.457","contributor": {"fullname":
        "Fernandes"}},{"volume": "52","start-page": "12498","year": "2013","ident":
        "10.1002/anie.201609229-BIB0007e|anie201609229-cit-0036","publication-title":
        "Angew. Chem. Int. Ed.","doi": "10.1002/anie.201305267","contributor": {"fullname":
        "Winnacker"}},{"volume": "137","start-page": "1272","year": "2009","ident":
        "10.1002/anie.201609229-BIB0126|anie201609229-cit-0312","publication-title":
        "Cell","doi": "10.1016/j.cell.2009.04.048","contributor": {"fullname": "Tabor"}},{"volume":
        "30","start-page": "601","year": "2012","ident": "10.1002/anie.201609229-BIB0014b|anie201609229-cit-0062","publication-title":
        "Trends Biotechnol.","doi": "10.1016/j.tibtech.2012.08.002","contributor":
        {"fullname": "Juhas"}},{"volume": "7","start-page": "11163","year": "2016","ident":
        "10.1002/anie.201609229-BIB0110c|anie201609229-cit-0287","publication-title":
        "Nat. Commun.","doi": "10.1038/ncomms11163","contributor": {"fullname": "Jeschek"}},{"volume":
        "44","start-page": "94","year": "2016","ident": "10.1002/anie.201609229-BIB0168|anie201609229-cit-0376","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gkw117","contributor": {"fullname":
        "Ausländer"}},{"volume": "87","start-page": "478","year": "2004","ident":
        "10.1002/anie.201609229-BIB0125|anie201609229-cit-0311","publication-title":
        "Biotechnol. Bioeng.","doi": "10.1002/bit.20142","contributor": {"fullname":
        "Kramer"}},{"volume": "33","start-page": "510","year": "2015","ident": "10.1002/anie.201609229-BIB0094a|anie201609229-cit-0255","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.3199","contributor": {"fullname": "Hilton"}},{"ident":
        "10.1002/anie.201609229-BIB0077|anie201609229-cit-0212"},{"volume": "6","start-page":
        "295","year": "2014","ident": "10.1002/anie.201609229-BIB0184|anie201609229-cit-0399","publication-title":
        "Nat. Chem.","doi": "10.1038/nchem.1869","contributor": {"fullname": "Weitz"}},{"ident":
        "10.1002/anie.201609229-BIB0109|anie201609229-cit-0281"},{"volume": "32","start-page":
        "1121","year": "2014","ident": "10.1002/anie.201609229-BIB0153c|anie201609229-cit-0356","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.3033","contributor": {"fullname": "Rezania"}},{"ident":
        "10.1002/anie.201609229-BIB0082|anie201609229-cit-0219"},{"volume": "337","start-page":
        "816","year": "2012","ident": "10.1002/anie.201609229-BIB0084b|anie201609229-cit-0227","publication-title":
        "Science","doi": "10.1126/science.1225829","contributor": {"fullname": "Jinek"}},{"volume":
        "338","start-page": "1177","year": "2012","ident": "10.1002/anie.201609229-BIB0179a|anie201609229-cit-0393","publication-title":
        "Science","doi": "10.1126/science.1227268","contributor": {"fullname": "Ke"}},{"volume":
        "33","start-page": "449","year": "2015","ident": "10.1002/anie.201609229-BIB0013b|anie201609229-cit-0056","publication-title":
        "Trends Biotechnol.","doi": "10.1016/j.tibtech.2015.05.001","contributor":
        {"fullname": "Chakravarti"}},{"volume": "340","start-page": "599","year":
        "2013","ident": "10.1002/anie.201609229-BIB0133b|anie201609229-cit-0327","publication-title":
        "Science","doi": "10.1126/science.1232758","contributor": {"fullname": "Bonnet"}},{"volume":
        "48","start-page": "9870","year": "2012","ident": "10.1002/anie.201609229-BIB0066|anie201609229-cit-0196","publication-title":
        "Chem. Commun.","doi": "10.1039/c2cc35028a","contributor": {"fullname": "Siegmund"}},{"volume":
        "101","start-page": "7566","year": "2004","ident": "10.1002/anie.201609229-BIB0071a|anie201609229-cit-0205","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.0401517101","contributor":
        {"fullname": "Anderson"}},{"volume": "4","start-page": "1092","year": "2014","ident":
        "10.1002/anie.201609229-BIB0162b|anie201609229-cit-0367","publication-title":
        "Life","doi": "10.3390/life4041092","contributor": {"fullname": "Ding"}},{"ident":
        "10.1002/anie.201609229-BIB0024|anie201609229-cit-0117"},{"volume": "338","start-page":
        "932","year": "2012","ident": "10.1002/anie.201609229-BIB0181|anie201609229-cit-0396","publication-title":
        "Science","doi": "10.1126/science.1225624","contributor": {"fullname": "Langecker"}},{"volume":
        "346","start-page": "1258096","year": "2014","ident": "10.1002/anie.201609229-BIB0003b|anie201609229-cit-0012","publication-title":
        "Science","doi": "10.1126/science.1258096","contributor": {"fullname": "Doudna"}},{"volume":
        "11","start-page": "780","year": "2015","ident": "10.1002/anie.201609229-BIB0100b|anie201609229-cit-0264","publication-title":
        "Mol. Syst. Biol.","doi": "10.15252/msb.20145558","contributor": {"fullname":
        "Lluch-Senar"}},{"volume": "30","start-page": "991","year": "2012","ident":
        "10.1002/anie.201609229-BIB0143|anie201609229-cit-0343","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.2351","contributor": {"fullname": "Bacchus"}},{"volume":
        "165","start-page": "1255","year": "2016","ident": "10.1002/anie.201609229-BIB0023b|anie201609229-cit-0114","publication-title":
        "Cell","doi": "10.1016/j.cell.2016.04.059","contributor": {"fullname": "Pardee"}},{"volume":
        "403","start-page": "339","year": "2000","ident": "10.1002/anie.201609229-BIB0009|anie201609229-cit-0045","publication-title":
        "Nature","doi": "10.1038/35002131","contributor": {"fullname": "Gardner"}},{"volume":
        "54","start-page": "10030","year": "2015","ident": "10.1002/anie.201609229-BIB0070|anie201609229-cit-0202","publication-title":
        "Angew. Chem. Int. Ed.","doi": "10.1002/anie.201502868","contributor": {"fullname":
        "Hoesl"}},{"volume": "19","start-page": "751","year": "2001","ident": "10.1002/anie.201609229-BIB0163|anie201609229-cit-0368","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/90802","contributor": {"fullname": "Shimizu"}},{"ident":
        "10.1002/anie.201609229-BIB0090|anie201609229-cit-0244"},{"volume": "29","start-page":
        "273","year": "2013","ident": "10.1002/anie.201609229-BIB0014a|anie201609229-cit-0061","publication-title":
        "Trends Genet.","doi": "10.1016/j.tig.2012.11.001","contributor": {"fullname":
        "Acevedo-Rocha"}},{"volume": "39","start-page": "2981","year": "2011","ident":
        "10.1002/anie.201609229-BIB0032b|anie201609229-cit-0145","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gkq954","contributor": {"fullname":
        "Beisel"}},{"ident": "10.1002/anie.201609229-BIB0106|anie201609229-cit-0276"},{"volume":
        "440","start-page": "940","year": "2006","ident": "10.1002/anie.201609229-BIB0108|anie201609229-cit-0280","publication-title":
        "Nature","doi": "10.1038/nature04640","contributor": {"fullname": "Ro"}},{"ident":
        "10.1002/anie.201609229-BIB0068|anie201609229-cit-0198"},{"volume": "49","start-page":
        "1711","year": "2016","ident": "10.1002/anie.201609229-BIB0061|anie201609229-cit-0191","publication-title":
        "Acc. Chem. Res.","doi": "10.1021/acs.accounts.6b00235","contributor": {"fullname":
        "Heinisch"}},{"volume": "11","start-page": "2101","year": "2016","ident":
        "10.1002/anie.201609229-BIB0042|anie201609229-cit-0164","publication-title":
        "ACS Chem. Biol.","doi": "10.1021/acschembio.6b00234","contributor": {"fullname":
        "Navarro"}},{"volume": "333","start-page": "348","year": "2011","ident": "10.1002/anie.201609229-BIB0102|anie201609229-cit-0267","publication-title":
        "Science","doi": "10.1126/science.1205822","contributor": {"fullname": "Isaacs"}},{"volume":
        "9","start-page": "530","year": "2016","ident": "10.1002/anie.201609229-BIB0098|anie201609229-cit-0260","publication-title":
        "Microb. Biotechnol.","doi": "10.1111/1751-7915.12384","contributor": {"fullname":
        "Danchin"}},{"volume": "112","start-page": "14429","year": "2015","ident":
        "10.1002/anie.201609229-BIB0109b|anie201609229-cit-0283","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.1508521112","contributor":
        {"fullname": "Slomovic"}},{"volume": "12","start-page": "951","year": "2016","ident":
        "10.1002/anie.201609229-BIB0114|anie201609229-cit-0297","publication-title":
        "Nat. Chem. Biol.","doi": "10.1038/nchembio.2177","contributor": {"fullname":
        "Skjoedt"}},{"volume": "111","start-page": "11299","year": "2014","ident":
        "10.1002/anie.201609229-BIB0112c|anie201609229-cit-0295","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.1406401111","contributor":
        {"fullname": "Xu"}},{"ident": "10.1002/anie.201609229-BIB0013|anie201609229-cit-0054"},{"ident":
        "10.1002/anie.201609229-BIB0084|anie201609229-cit-0225"},{"volume": "36","start-page":
        "76","year": "2008","ident": "10.1002/anie.201609229-BIB0110b|anie201609229-cit-0286","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gkn369","contributor": {"fullname":
        "Hartner"}},{"volume": "18","start-page": "1203","year": "2000","ident": "10.1002/anie.201609229-BIB0019a|anie201609229-cit-0087","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/81208","contributor": {"fullname": "Fussenegger"}},{"volume":
        "34","start-page": "401","year": "2016","ident": "10.1002/anie.201609229-BIB0063|anie201609229-cit-0193","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.3467","contributor": {"fullname": "Karpinski"}},{"volume":
        "39","start-page": "155","year": "2011","ident": "10.1002/anie.201609229-BIB0033b|anie201609229-cit-0148","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gkr829","contributor": {"fullname":
        "Auslander"}},{"ident": "10.1002/anie.201609229-BIB0189|anie201609229-cit-0407"},{"volume":
        "32","start-page": "551","year": "2014","ident": "10.1002/anie.201609229-BIB0096|anie201609229-cit-0258","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.2884","contributor": {"fullname": "Yin"}},{"volume":
        "487","start-page": "123","year": "2012","ident": "10.1002/anie.201609229-BIB0129a|anie201609229-cit-0318","publication-title":
        "Nature","doi": "10.1038/nature11149","contributor": {"fullname": "Ausländer"}},{"volume":
        "20","start-page": "619","year": "2013","ident": "10.1002/anie.201609229-BIB0041b|anie201609229-cit-0163","publication-title":
        "Chem. Biol.","doi": "10.1016/j.chembiol.2013.03.005","contributor": {"fullname":
        "Renicke"}},{"volume": "23","start-page": "1424","year": "2005","ident": "10.1002/anie.201609229-BIB0177|anie201609229-cit-0388","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt1155","contributor": {"fullname": "Penchovsky"}},{"volume":
        "491","start-page": "249","year": "2012","ident": "10.1002/anie.201609229-BIB0130|anie201609229-cit-0322","publication-title":
        "Nature","doi": "10.1038/nature11516","contributor": {"fullname": "Moon"}},{"volume":
        "16","start-page": "566","year": "2016","ident": "10.1002/anie.201609229-BIB0157|anie201609229-cit-0360","publication-title":
        "Nat. Rev. Cancer","doi": "10.1038/nrc.2016.97","contributor": {"fullname":
        "Fesnak"}},{"volume": "29","start-page": "245","year": "2011","ident": "10.1002/anie.201609229-BIB0060a|anie201609229-cit-0189","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.1791","contributor": {"fullname": "Bradbury"}},{"ident":
        "10.1002/anie.201609229-BIB0027|anie201609229-cit-0124"},{"volume": "352","start-page":
        "7341","year": "2016","ident": "10.1002/anie.201609229-BIB0010|anie201609229-cit-0046","publication-title":
        "Science","doi": "10.1126/science.aac7341","contributor": {"fullname": "Nielsen"}},{"ident":
        "10.1002/anie.201609229-BIB0091|anie201609229-cit-0247"},{"volume": "52","start-page":
        "459","year": "2013","ident": "10.1002/anie.201609229-BIB0187|anie201609229-cit-0404","publication-title":
        "Angew. Chem. Int. Ed.","doi": "10.1002/anie.201207078","contributor": {"fullname":
        "Zieske"}},{"volume": "10","start-page": "410","year": "2009","ident": "10.1002/anie.201609229-BIB0001b|anie201609229-cit-0003","publication-title":
        "Nat. Rev. Mol. Cell Biol.","doi": "10.1038/nrm2698","contributor": {"fullname":
        "Purnick"}},{"ident": "10.1002/anie.201609229-BIB0162|anie201609229-cit-0365"},{"ident":
        "10.1002/anie.201609229-BIB0033|anie201609229-cit-0146"},{"volume": "40","start-page":
        "142","year": "2012","ident": "10.1002/anie.201609229-BIB0110f|anie201609229-cit-0290","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gks549","contributor": {"fullname":
        "Du"}},{"volume": "110","start-page": "18150","year": "2013","ident": "10.1002/anie.201609229-BIB0020i|anie201609229-cit-0101","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.1312414110","contributor":
        {"fullname": "Rossger"}},{"volume": "517","start-page": "583","year": "2015","ident":
        "10.1002/anie.201609229-BIB0094b|anie201609229-cit-0256","publication-title":
        "Nature","doi": "10.1038/nature14136","contributor": {"fullname": "Konermann"}},{"ident":
        "10.1002/anie.201609229-BIB0002|anie201609229-cit-0004"},{"volume": "128","start-page":
        "818","year": "2016","ident": "10.1002/anie.201609229-BIB0044.2|anie201609229-cit-0170","publication-title":
        "Angew. Chem.","doi": "10.1002/ange.201507634"},{"volume": "346","start-page":
        "1256272","year": "2014","ident": "10.1002/anie.201609229-BIB0140b|anie201609229-cit-0338","publication-title":
        "Science","doi": "10.1126/science.1256272","contributor": {"fullname": "Farzadfard"}},{"volume":
        "5","start-page": "4729","year": "2014","ident": "10.1002/anie.201609229-BIB0142b|anie201609229-cit-0342","publication-title":
        "Nat. Commun.","doi": "10.1038/ncomms5729","contributor": {"fullname": "Prochazka"}},{"volume":
        "429","start-page": "423","year": "2004","ident": "10.1002/anie.201609229-BIB0175|anie201609229-cit-0386","publication-title":
        "Nature","doi": "10.1038/nature02551","contributor": {"fullname": "Benenson"}},{"ident":
        "10.1002/anie.201609229-BIB0089|anie201609229-cit-0241"},{"volume": "333","start-page":
        "1252","year": "2011","ident": "10.1002/anie.201609229-BIB0017a|anie201609229-cit-0074","publication-title":
        "Science","doi": "10.1126/science.1211701","contributor": {"fullname": "Schwille"}},{"volume":
        "10","start-page": "1009","year": "2013","ident": "10.1002/anie.201609229-BIB0025|anie201609229-cit-0122","publication-title":
        "RNA Biol.","doi": "10.4161/rna.24482","contributor": {"fullname": "Saragliadis"}},{"ident":
        "10.1002/anie.201609229-BIB0186|anie201609229-cit-0401"},{"volume": "285","start-page":
        "11039","year": "2010","ident": "10.1002/anie.201609229-BIB0008d|anie201609229-cit-0042","publication-title":
        "J. Biol. Chem.","doi": "10.1074/jbc.R109.091306","contributor": {"fullname":
        "Young"}},{"volume": "509","start-page": "385","year": "2014","ident": "10.1002/anie.201609229-BIB0069|anie201609229-cit-0201","publication-title":
        "Nature","doi": "10.1038/nature13314","contributor": {"fullname": "Malyshev"}},{"volume":
        "100","start-page": "12672","year": "2003","ident": "10.1002/anie.201609229-BIB0016d|anie201609229-cit-0072","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.2135496100","contributor":
        {"fullname": "Noireaux"}},{"volume": "262","start-page": "1019","year": "1993","ident":
        "10.1002/anie.201609229-BIB0027c|anie201609229-cit-0127","publication-title":
        "Science","doi": "10.1126/science.7694365","contributor": {"fullname": "Spencer"}},{"volume":
        "26","start-page": "409","year": "2015","ident": "10.1002/anie.201609229-BIB0106b|anie201609229-cit-0278","publication-title":
        "Hum. Gene Ther.","doi": "10.1089/hum.2015.29002.fzh","contributor": {"fullname":
        "Zhang"}},{"volume": "3","start-page": "2854","year": "2013","ident": "10.1002/anie.201609229-BIB0057|anie201609229-cit-0185","publication-title":
        "Sci. Rep.","doi": "10.1038/srep02854","contributor": {"fullname": "Cabantous"}},{"volume":
        "55","start-page": "489","year": "2015","ident": "10.1002/anie.201609229-BIB0060b|anie201609229-cit-0190","publication-title":
        "Annu. Rev. Pharmacol. Toxicol.","doi": "10.1146/annurev-pharmtox-010611-134654","contributor":
        {"fullname": "Plückthun"}},{"volume": "79","start-page": "65","year": "2010","ident":
        "10.1002/anie.201609229-BIB0018d|anie201609229-cit-0084","publication-title":
        "Annu. Rev. Biochem.","doi": "10.1146/annurev-biochem-060308-102244","contributor":
        {"fullname": "Seeman"}},{"volume": "34","start-page": "863","year": "2016","ident":
        "10.1002/anie.201609229-BIB0087b|anie201609229-cit-0235","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.3609","contributor": {"fullname": "Kim"}},{"ident":
        "10.1002/anie.201609229-BIB0179|anie201609229-cit-0392"},{"volume": "44","start-page":
        "223","year": "2009","ident": "10.1002/anie.201609229-BIB0017b|anie201609229-cit-0075","publication-title":
        "Crit. Rev. Biochem. Mol. Biol.","doi": "10.1080/10409230903074549","contributor":
        {"fullname": "Schwille"}},{"ident": "10.1002/anie.201609229-BIB0019|anie201609229-cit-0086"},{"ident":
        "10.1002/anie.201609229-BIB0071|anie201609229-cit-0204"},{"volume": "32","start-page":
        "577","year": "2014","ident": "10.1002/anie.201609229-BIB0089a|anie201609229-cit-0242","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.2909","contributor": {"fullname": "Guilinger"}},{"volume":
        "16","start-page": "3540","year": "2016","ident": "10.1002/anie.201609229-BIB0186b|anie201609229-cit-0403","publication-title":
        "Nano Lett.","doi": "10.1021/acs.nanolett.6b00507","contributor": {"fullname":
        "Lambertz"}},{"volume": "15","start-page": "1145","year": "2015","ident":
        "10.1002/anie.201609229-BIB0159|anie201609229-cit-0362","publication-title":
        "Expert Opin. Biol. Ther.","doi": "10.1517/14712598.2015.1046430","contributor":
        {"fullname": "Chmielewski"}},{"volume": "323","start-page": "1229","year":
        "2009","ident": "10.1002/anie.201609229-BIB0189b|anie201609229-cit-0409","publication-title":
        "Science","doi": "10.1126/science.1167856","contributor": {"fullname": "Lincoln"}},{"volume":
        "518","start-page": "427","year": "2015","ident": "10.1002/anie.201609229-BIB0068a|anie201609229-cit-0199","publication-title":
        "Nature","doi": "10.1038/nature13982","contributor": {"fullname": "Taylor"}},{"volume":
        "44","start-page": "1165","year": "2016","ident": "10.1002/anie.201609229-BIB0006b|anie201609229-cit-0029","publication-title":
        "Biochem. Soc. Trans.","doi": "10.1042/BST20160076","contributor": {"fullname":
        "Tizei"}},{"volume": "4","start-page": "2825","year": "2013","ident": "10.1002/anie.201609229-BIB0150|anie201609229-cit-0350","publication-title":
        "Nat. Commun.","doi": "10.1038/ncomms3825","contributor": {"fullname": "Rossger"}},{"volume":
        "34","start-page": "339","year": "2016","ident": "10.1002/anie.201609229-BIB0091b|anie201609229-cit-0249","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.3481","contributor": {"fullname": "Richardson"}},{"volume":
        "342","start-page": "357","year": "2013","ident": "10.1002/anie.201609229-BIB0103|anie201609229-cit-0268","publication-title":
        "Science","doi": "10.1126/science.1241459","contributor": {"fullname": "Lajoie"}},{"volume":
        "48","start-page": "9059","year": "2012","ident": "10.1002/anie.201609229-BIB0166|anie201609229-cit-0371","publication-title":
        "Chem. Commun.","doi": "10.1039/c2cc34379g","contributor": {"fullname": "Nakayama"}},{"volume":
        "125","start-page": "935","year": "2003","ident": "10.1002/anie.201609229-BIB0076|anie201609229-cit-0211","publication-title":
        "J. Am. Chem. Soc.","doi": "10.1021/ja0284153","contributor": {"fullname":
        "Mehl"}},{"volume": "8","start-page": "987","year": "2016","ident": "10.1002/anie.201609229-BIB0109a|anie201609229-cit-0282","publication-title":
        "EMBO Mol. Med.","doi": "10.15252/emmm.201606541","contributor": {"fullname":
        "Courbet"}},{"volume": "7","start-page": "11247","year": "2016","ident": "10.1002/anie.201609229-BIB0155|anie201609229-cit-0358","publication-title":
        "Nat. Commun.","doi": "10.1038/ncomms11247","contributor": {"fullname": "Saxena"}},{"volume":
        "8","start-page": "1640","year": "2013","ident": "10.1002/anie.201609229-BIB0071b|anie201609229-cit-0206","publication-title":
        "ACS Chem. Biol.","doi": "10.1021/cb4001662","contributor": {"fullname": "Niu"}},{"volume":
        "7","start-page": "271","year": "2011","ident": "10.1002/anie.201609229-BIB0172|anie201609229-cit-0383","publication-title":
        "Nat. Chem. Biol.","doi": "10.1038/nchembio.541","contributor": {"fullname":
        "Bujara"}},{"volume": "158","start-page": "412","year": "2014","ident": "10.1002/anie.201609229-BIB0117b|anie201609229-cit-0302","publication-title":
        "Cell","doi": "10.1016/j.cell.2014.06.034","contributor": {"fullname": "Cimermancic"}},{"volume":
        "123","start-page": "7094","year": "2011","ident": "10.1002/anie.201609229-BIB0105c.2|anie201609229-cit-0274","publication-title":
        "Angew. Chem.","doi": "10.1002/ange.201103010"},{"ident": "10.1002/anie.201609229-BIB0169|anie201609229-cit-0377"},{"volume":
        "11","start-page": "117","year": "2009","ident": "10.1002/anie.201609229-BIB0151|anie201609229-cit-0351","publication-title":
        "Metab. Eng.","doi": "10.1016/j.ymben.2008.12.001","contributor": {"fullname":
        "Weber"}},{"volume": "108","start-page": "8617","year": "2011","ident": "10.1002/anie.201609229-BIB0023d|anie201609229-cit-0116","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.1015741108","contributor":
        {"fullname": "Lucks"}},{"volume": "48","start-page": "7564","year": "2009","ident":
        "10.1002/anie.201609229-BIB0035|anie201609229-cit-0152","publication-title":
        "Angew. Chem. Int. Ed.","doi": "10.1002/anie.200900851","contributor": {"fullname":
        "Berschneider"}},{"volume": "7","start-page": "973","year": "2010","ident":
        "10.1002/anie.201609229-BIB0027b|anie201609229-cit-0126","publication-title":
        "Nat. Methods","doi": "10.1038/nmeth.1524","contributor": {"fullname": "Kennedy"}},{"volume":
        "98","start-page": "8554","year": "2001","ident": "10.1002/anie.201609229-BIB0043a|anie201609229-cit-0166","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.141230798","contributor":
        {"fullname": "Sakamoto"}},{"volume": "19","start-page": "1004","year": "2014","ident":
        "10.1002/anie.201609229-BIB0075|anie201609229-cit-0210","publication-title":
        "Molecules","doi": "10.3390/molecules19011004","contributor": {"fullname":
        "Ma"}},{"volume": "339","start-page": "819","year": "2013","ident": "10.1002/anie.201609229-BIB0085a|anie201609229-cit-0229","publication-title":
        "Science","doi": "10.1126/science.1231143","contributor": {"fullname": "Cong"}},{"volume":
        "527","start-page": "264","year": "2015","ident": "10.1002/anie.201609229-BIB0105b|anie201609229-cit-0272","publication-title":
        "Nature","doi": "10.1038/nature15536","contributor": {"fullname": "Mandell"}},{"volume":
        "11","start-page": "508","year": "2014","ident": "10.1002/anie.201609229-BIB0002c|anie201609229-cit-0007","publication-title":
        "Nat. Methods","doi": "10.1038/nmeth.2926","contributor": {"fullname": "Brophy"}},{"volume":
        "35","start-page": "4179","year": "2007","ident": "10.1002/anie.201609229-BIB0030a|anie201609229-cit-0140","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gkm425","contributor": {"fullname":
        "Weigand"}},{"ident": "10.1002/anie.201609229-BIB0142|anie201609229-cit-0340"},{"volume":
        "3","start-page": "03949","year": "2014","ident": "10.1002/anie.201609229-BIB0188|anie201609229-cit-0406","publication-title":
        "eLife","doi": "10.7554/eLife.03949","contributor": {"fullname": "Zieske"}},{"volume":
        "12","start-page": "980","year": "2016","ident": "10.1002/anie.201609229-BIB0092|anie201609229-cit-0250","publication-title":
        "Nat. Chem. Biol.","doi": "10.1038/nchembio.2179","contributor": {"fullname":
        "Liu"}},{"volume": "14","start-page": "135","year": "2016","ident": "10.1002/anie.201609229-BIB0011c|anie201609229-cit-0050","publication-title":
        "Nat. Rev. Microbiol.","doi": "10.1038/nrmicro.2015.24","contributor": {"fullname":
        "Smanski"}},{"ident": "10.1002/anie.201609229-BIB0016|anie201609229-cit-0068"},{"volume":
        "38","start-page": "2663","year": "2010","ident": "10.1002/anie.201609229-BIB0005b|anie201609229-cit-0024","publication-title":
        "Nucleic Acids Res.","doi": "10.1093/nar/gkq139","contributor": {"fullname":
        "Grunberg"}},{"volume": "6","start-page": "917","year": "2009","ident": "10.1002/anie.201609229-BIB0020f|anie201609229-cit-0098","publication-title":
        "Nat. Methods","doi": "10.1038/nmeth.1401","contributor": {"fullname": "Nishimura"}},{"volume":
        "11","start-page": "1154","year": "2014","ident": "10.1002/anie.201609229-BIB0131|anie201609229-cit-0323","publication-title":
        "Nat. Methods","doi": "10.1038/nmeth.3136","contributor": {"fullname": "Ausländer"}},{"volume":
        "4","start-page": "526","year": "2015","ident": "10.1002/anie.201609229-BIB0036a|anie201609229-cit-0155","publication-title":
        "ACS Synth. Biol.","doi": "10.1021/sb500270h","contributor": {"fullname":
        "Beilstein"}},{"volume": "21","start-page": "753","year": "2010","ident":
        "10.1002/anie.201609229-BIB0059|anie201609229-cit-0187","publication-title":
        "Curr. Opin. Biotechnol.","doi": "10.1016/j.copbio.2010.08.008","contributor":
        {"fullname": "Jäckel"}},{"volume": "123","start-page": "144","year": "2011","ident":
        "10.1002/anie.201609229-BIB0004d.2|anie201609229-cit-0019","publication-title":
        "Angew. Chem.","doi": "10.1002/ange.201000826"},{"volume": "332","start-page":
        "209","year": "2011","ident": "10.1002/anie.201609229-BIB0189c|anie201609229-cit-0410","publication-title":
        "Science","doi": "10.1126/science.1200752","contributor": {"fullname": "Wochner"}},{"volume":
        "30","start-page": "521","year": "2014","ident": "10.1002/anie.201609229-BIB0005c|anie201609229-cit-0025","publication-title":
        "Trends Genet.","doi": "10.1016/j.tig.2014.09.004","contributor": {"fullname":
        "Raman"}},{"volume": "107","start-page": "3715","year": "2007","ident": "10.1002/anie.201609229-BIB0065|anie201609229-cit-0195","publication-title":
        "Chem. Rev.","doi": "10.1021/cr0306743","contributor": {"fullname": "Famulok"}},{"volume":
        "25","start-page": "795","year": "2007","ident": "10.1002/anie.201609229-BIB0141|anie201609229-cit-0339","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt1307","contributor": {"fullname": "Rinaudo"}},{"volume":
        "7","start-page": "289ra","year": "2015","ident": "10.1002/anie.201609229-BIB0160|anie201609229-cit-0363","publication-title":
        "Sci. Transl. Med.","doi": "10.1126/scitranslmed.aaa3519","contributor": {"fullname":
        "Danino"}},{"volume": "20","start-page": "1183","year": "2014","ident": "10.1002/anie.201609229-BIB0167c|anie201609229-cit-0375","publication-title":
        "RNA","doi": "10.1261/rna.045047.114","contributor": {"fullname": "Bhadra"}},{"ident":
        "10.1002/anie.201609229-BIB0088|anie201609229-cit-0237"},{"ident": "10.1002/anie.201609229-BIB0018|anie201609229-cit-0079"},{"volume":
        "55","start-page": "397","year": "2014","ident": "10.1002/anie.201609229-BIB0021a|anie201609229-cit-0105","publication-title":
        "Mol. Cell","doi": "10.1016/j.molcel.2014.06.007","contributor": {"fullname":
        "Ausländer"}},{"volume": "32","start-page": "279","year": "2014","ident":
        "10.1002/anie.201609229-BIB0088b|anie201609229-cit-0239","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.2808","contributor": {"fullname": "Fu"}},{"volume":
        "24","start-page": "1037","year": "2013","ident": "10.1002/anie.201609229-BIB0016a|anie201609229-cit-0069","publication-title":
        "Curr. Opin. Biotechnol.","doi": "10.1016/j.copbio.2013.03.007","contributor":
        {"fullname": "Billerbeck"}},{"ident": "10.1002/anie.201609229-BIB0133|anie201609229-cit-0325"},{"volume":
        "28","start-page": "355","year": "2010","ident": "10.1002/anie.201609229-BIB0020c|anie201609229-cit-0094","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.1617","contributor": {"fullname": "Kemmer"}},{"ident":
        "10.1002/anie.201609229-BIB0110|anie201609229-cit-0284"},{"volume": "20","start-page":
        "16643","year": "2015","ident": "10.1002/anie.201609229-BIB0007a|anie201609229-cit-0032","publication-title":
        "Molecules","doi": "10.3390/molecules200916643","contributor": {"fullname":
        "Diafa"}},{"volume": "20","start-page": "147","year": "2015","ident": "10.1002/anie.201609229-BIB0007d|anie201609229-cit-0035","publication-title":
        "Drug Discovery Today","doi": "10.1016/j.drudis.2014.09.004","contributor":
        {"fullname": "Vater"}},{"volume": "17","start-page": "236","year": "2010","ident":
        "10.1002/anie.201609229-BIB0038|anie201609229-cit-0158","publication-title":
        "Chem. Biol.","doi": "10.1016/j.chembiol.2010.02.012","contributor": {"fullname":
        "Wieland"}},{"volume": "127","start-page": "6031","year": "2015","ident":
        "10.1002/anie.201609229-BIB0029a.2|anie201609229-cit-0135","publication-title":
        "Angew. Chem.","doi": "10.1002/ange.201412204"},{"volume": "159","start-page":
        "440","year": "2014","ident": "10.1002/anie.201609229-BIB0095|anie201609229-cit-0257","publication-title":
        "Cell","doi": "10.1016/j.cell.2014.09.014","contributor": {"fullname": "Platt"}},{"volume":
        "9","start-page": "266","year": "2012","ident": "10.1002/anie.201609229-BIB0027d|anie201609229-cit-0128","publication-title":
        "Nat. Methods","doi": "10.1038/nmeth.1892","contributor": {"fullname": "Wang"}},{"volume":
        "463","start-page": "326","year": "2010","ident": "10.1002/anie.201609229-BIB0137b|anie201609229-cit-0333","publication-title":
        "Nature","doi": "10.1038/nature08753","contributor": {"fullname": "Danino"}},{"volume":
        "10","start-page": "957","year": "2013","ident": "10.1002/anie.201609229-BIB0003c|anie201609229-cit-0013","publication-title":
        "Nat. Methods","doi": "10.1038/nmeth.2649","contributor": {"fullname": "Mali"}},{"volume":
        "121","start-page": "7701","year": "2009","ident": "10.1002/anie.201609229-BIB0035.2|anie201609229-cit-0153","publication-title":
        "Angew. Chem.","doi": "10.1002/ange.200900851"},{"volume": "9","start-page":
        "1088","year": "2012","ident": "10.1002/anie.201609229-BIB0128a|anie201609229-cit-0315","publication-title":
        "Nat. Methods","doi": "10.1038/nmeth.2184","contributor": {"fullname": "Liu"}},{"volume":
        "1","start-page": "127","year": "2003","ident": "10.1002/anie.201609229-BIB0014d|anie201609229-cit-0064","publication-title":
        "Nat. Rev. Microbiol.","doi": "10.1038/nrmicro751","contributor": {"fullname":
        "Koonin"}},{"volume": "524","start-page": "119","year": "2015","ident": "10.1002/anie.201609229-BIB0074|anie201609229-cit-0209","publication-title":
        "Nature","doi": "10.1038/nature14862","contributor": {"fullname": "Orelle"}},{"volume":
        "520","start-page": "186","year": "2015","ident": "10.1002/anie.201609229-BIB0086|anie201609229-cit-0232","publication-title":
        "Nature","doi": "10.1038/nature14299","contributor": {"fullname": "Ran"}},{"volume":
        "237","start-page": "752","year": "1997","ident": "10.1002/anie.201609229-BIB0080|anie201609229-cit-0217","publication-title":
        "Biochem. Biophys. Res. Commun.","doi": "10.1006/bbrc.1997.7124","contributor":
        {"fullname": "Feil"}},{"volume": "83","start-page": "379","year": "2014","ident":
        "10.1002/anie.201609229-BIB0008a|anie201609229-cit-0039","publication-title":
        "Annu. Rev. Biochem.","doi": "10.1146/annurev-biochem-060713-035737","contributor":
        {"fullname": "Chin"}},{"volume": "50","start-page": "6960","year": "2011","ident":
        "10.1002/anie.201609229-BIB0105c|anie201609229-cit-0273","publication-title":
        "Angew. Chem. Int. Ed.","doi": "10.1002/anie.201103010","contributor": {"fullname":
        "Acevedo-Rocha"}},{"ident": "10.1002/anie.201609229-BIB0034|anie201609229-cit-0149"},{"volume":
        "2","start-page": "00471","year": "2013","ident": "10.1002/anie.201609229-BIB0085b|anie201609229-cit-0230","publication-title":
        "eLife","doi": "10.7554/eLife.00471","contributor": {"fullname": "Jinek"}},{"volume":
        "24","start-page": "1027","year": "2006","ident": "10.1002/anie.201609229-BIB0110d|anie201609229-cit-0288","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt1226","contributor": {"fullname": "Pfleger"}},{"ident":
        "10.1002/anie.201609229-BIB0020|anie201609229-cit-0091"},{"volume": "330","start-page":
        "70","year": "2010","ident": "10.1002/anie.201609229-BIB0118|anie201609229-cit-0304","publication-title":
        "Science","doi": "10.1126/science.1191652","contributor": {"fullname": "Ajikumar"}},{"ident":
        "10.1002/anie.201609229-BIB0100|anie201609229-cit-0262"},{"volume": "89","start-page":
        "5547","year": "1992","ident": "10.1002/anie.201609229-BIB0019c|anie201609229-cit-0089","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.89.12.5547","contributor":
        {"fullname": "Gossen"}},{"volume": "10","start-page": "598","year": "2014","ident":
        "10.1002/anie.201609229-BIB0056|anie201609229-cit-0184","publication-title":
        "Nat. Chem. Biol.","doi": "10.1038/nchembio.1554","contributor": {"fullname":
        "Griss"}},{"ident": "10.1002/anie.201609229-BIB0017|anie201609229-cit-0073"},{"volume":
        "106","start-page": "10638","year": "2009","ident": "10.1002/anie.201609229-BIB0020a|anie201609229-cit-0092","publication-title":
        "Proc. Natl. Acad. Sci. USA","doi": "10.1073/pnas.0901501106","contributor":
        {"fullname": "Gitzinger"}},{"volume": "27","start-page": "946","year": "2009","ident":
        "10.1002/anie.201609229-BIB0111|anie201609229-cit-0291","publication-title":
        "Nat. Biotechnol.","doi": "10.1038/nbt.1568","contributor": {"fullname": "Salis"}},{"volume":
        "125","start-page": "12728","year": "2013","ident": "10.1002/anie.201609229-BIB0007e.2|anie201609229-cit-0037","publication-title":
        "Angew. Chem.","doi": "10.1002/ange.201305267"},{"volume": "14","start-page":
        "454","year": "2003","ident": "10.1002/anie.201609229-BIB0115|anie201609229-cit-0298","publication-title":
        "Curr. Opin. Biotechnol.","doi": "10.1016/j.copbio.2003.08.005","contributor":
        {"fullname": "Nakamura"}},{"volume": "351","start-page": "6253","year": "2016","ident":
        "10.1002/anie.201609229-BIB0015b|anie201609229-cit-0067","publication-title":
        "Science","doi": "10.1126/science.aad6253","contributor": {"fullname": "Hutchison"}},{"ident":
        "10.1002/anie.201609229-BIB0087|anie201609229-cit-0233"},{"volume": "3","start-page":
        "228","year": "2014","ident": "10.1002/anie.201609229-BIB0148|anie201609229-cit-0348","publication-title":
        "ACS Synth. Biol.","doi": "10.1021/sb400077j","contributor": {"fullname":
        "Hwang"}},{"ident": "10.1002/anie.201609229-BIB0043|anie201609229-cit-0165"},{"volume":
        "131","start-page": "5873","year": "2009","ident": "10.1002/anie.201609229-BIB0055|anie201609229-cit-0183","publication-title":
        "J. Am. Chem. Soc.","doi": "10.1021/ja900149e","contributor": {"fullname":
        "Brun"}},{"volume": "350","start-page": "4077","year": "2015","ident": "10.1002/anie.201609229-BIB0027e|anie201609229-cit-0129","publication-title":
        "Science","doi": "10.1126/science.aab4077","contributor": {"fullname": "Wu"}},{"volume":
        "7","start-page": "528","year": "2011","ident": "10.1002/anie.201609229-BIB0077a|anie201609229-cit-0213","publication-title":
        "Nat. Chem. Biol.","doi": "10.1038/nchembio.586","contributor": {"fullname":
        "Cellitti"}},{"volume": "21","start-page": "121","year": "2015","ident": "10.1002/anie.201609229-BIB0003a|anie201609229-cit-0011","publication-title":
        "Nat. Med.","doi": "10.1038/nm.3793","contributor": {"fullname": "Cox"}},{"volume":
        "68","start-page": "518","year": "2004","ident": "10.1002/anie.201609229-BIB0100a|anie201609229-cit-0263","publication-title":
        "Microbiol. Mol. Biol. Rev.","doi": "10.1128/MMBR.68.3.518-537.2004","contributor":
        {"fullname": "Gil"}}],"Snippet": ["...Synthetic __BENTO_HL_START__biology__BENTO_HL_END__
        concerns the engineering of man‐made living biomachines from standardized
        components that can perform predefined functions in a (self‐)controlled manner...","...Synthetic
        __BENTO_HL_START__biology__BENTO_HL_END__ concerns the engineering of man-made
        living biomachines from standardized components that can perform predefined
        functions in a (self-)controlled manner..."],"PublicationTitle": ["Angewandte
        Chemie International Edition"],"ProviderPackageCode": ["A03","BFHJK","BROTX","AMBMR","DCZOG","~IA","ACFBH","50Y","50Z","AEUQT","AAEVG","MRSTM",".3N","MEWTI","1ZS","H.T","Q11","LP7","H.X","LP6","51W","51X","ACXME","WBKPD","AJXKR","UB1","AEIMD","GNP","ATUGU","WOHZO","G-S","O66","AZBYB","52M","3WU","52N","52O","52P","ADEOM","LATKE","ZZTAW","52S","930","BAFTC","52T","MK4","QRW","SUPJJ","52U","HHY","52W","1L6","52X","HHZ","AFPWT","4ZD","ALAGY","DR1","DR2","G.N","AFZJQ","ADAWD","702","7PT","66C","NNB","ADIZJ",".GA","AAONW","LYRES","GODZA","HBH","LUTES","AAZKR","MSFUL","LC2","LC3","ABWRO","AZVAB","RWI","KQQ","RX1","ACXQS","BMXJE","R.K","WIB","WQJ","MXFUL","P2W","W8V","W99","WYISQ","P2X","WIH","WIK","JPC","BY8","MSSTM","DPXWK","1OB","AUFTA","1OC","3SF","F01","F00","NF~","BRXPI","WRC","F04","8UM","N05","N04","WJL","BNHUX","~WT","8-0","8-1","P4A","8-3","AGJLS","8-4","8-5","P4D","IX1","BHBCM","LITHE","J0M","MXSTM","33P","Q.N","05W","XV2","AAESR","WBFHL","LOXES","MRFUL","D-F","D-E","CITATION","AAYXX","BSHEE"],"Volume":
        ["56"],"Author_xml": [{"sequence": "1","givenname": "Simon","surname": "Ausländer","fullname":
        "Ausländer, Simon","organization": " ETH Zurich "},{"sequence": "2","givenname":
        "David","surname": "Ausländer","fullname": "Ausländer, David","organization":
        " ETH Zurich "},{"sequence": "3","givenname": "Martin","surname": "Fussenegger","fullname":
        "Fussenegger, Martin","email": "fussenegger@bsse.ethz.ch","organization":
        " ETH Zurich ","organization": " University of Basel "}],"Abstract": ["Synthetic
        biology concerns the engineering of man‐made living biomachines from standardized
        components that can perform predefined functions in a (self‐)controlled manner.
        Different research strategies and interdisciplinary efforts are pursued to
        implement engineering principles to biology. The “top‐down” strategy exploits
        nature''s incredible diversity of existing, natural parts to construct synthetic
        compositions of genetic, metabolic, or signaling networks with predictable
        and controllable properties. This mainly application‐driven approach results
        in living factories that produce drugs, biofuels, biomaterials, and fine chemicals,
        and results in living pills that are based on engineered cells with the capacity
        to autonomously detect and treat disease states in vivo. In contrast, the
        “bottom‐up” strategy seeks to be independent of existing living systems by
        designing biological systems from scratch and synthesizing artificial biological
        entities not found in nature. This more knowledge‐driven approach investigates
        the reconstruction of minimal biological systems that are capable of performing
        basic biological phenomena, such as self‐organization, self‐replication, and
        self‐sustainability. Moreover, the syntheses of artificial biological units,
        such as synthetic nucleotides or amino acids, and their implementation into
        polymers inside living cells currently set the boundaries between natural
        and artificial biological systems. In particular, the in vitro design, synthesis,
        and transfer of complete genomes into host cells point to the future of synthetic
        biology: the creation of designer cells with tailored desirable properties
        for biomedicine and biotechnology. Exciting times for synthetic biology: Cells
        are being engineered to produce drugs and biofuels, entire genomes are being
        synthesized from scratch, proteins and DNA molecules are being equipped with
        unnatural functions, and recent progress in genome engineering promises to
        revolutionize biomedicine and biotechnology. This Review gives a comprehensive
        overview of different research areas in synthetic biology."],"Keywords": ["synthetic
        biology","metabolic engineering","chemical biology","genome engineering","bioengineering"],"PublicationDate":
        ["June 1, 2017","2017-06-01","20170601"],"Genre": ["reviewArticle","Research
        Support, Non-U.S. Gov''t","Journal Article","Review"],"PMID": ["27943572"],"IsPeerReviewed":
        ["true"],"Audience": ["Academic"],"thumbnail_s": ["http://covers-cdn.summon.serialssolutions.com/index.aspx?isbn=/sc.gif&issn=1433-7851&client=summon"],"thumbnail_m":
        ["http://covers-cdn.summon.serialssolutions.com/index.aspx?isbn=/mc.gif&issn=1433-7851&client=summon"],"thumbnail_l":
        ["http://covers-cdn.summon.serialssolutions.com/index.aspx?isbn=/lc.gif&issn=1433-7851&client=summon"],"Database_xml":
        [{"sequence": "1","dbid": "NPM","name": "PubMed","url": "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=PubMed","sourceTypes":
        ["Index Database"]},{"sequence": "2","dbid": "CVF","name": "MEDLINE (Ovid)","url":
        "http://proxy.library.cornell.edu/login?url=http://ovidsp.ovid.com/autologin","sourceTypes":
        ["Index Database"]},{"sequence": "3","dbid": "EIF","name": "MEDLINE","url":
        "http://proxy.library.cornell.edu/login?url=https://webofknowledge.com/MEDLINE","sourceTypes":
        ["Index Database"]}],"link.rule.ids": ["307,801,802,805,1445,28068"],"LinkModel":
        ["DirectLink"],"IEDL.DBID": ["1OC"],"BookMark": ["ePnHCXMwhV3NbsIwDI6QJqiAV0B9gHULbpufI5o6bRcuwDmKk1biAgi4cNtD7An3JLOXFo47RUpsR_pixbHkfBY9MaKEV_4jzcVTSloAO2LiUliSR2vyx4zidFlwZ_jJkB6RJ6mxmABTltUaMvG8uR3oFUQA5qkx4-3n65vQy9P8ZX_Jj92wNBNPHR1YO-_Hqdi9N9u3j6LvKVCEamlUQduiLlFGL5VEq6EyllKAKGWI6EOsEQ0q00kTtQqI0AF6sHQvIMS6xnIqXpJdvsAde8H17IPvi9mPh5b5lNyKOf8UxWb1UBjCnjslHgmXGIPBMU7ujhMpLJJCioh38QEYbvGbBP5e0_-Yc6v1Z_Mw_gt053Rg"],"DatabaseName":
        ["Academic OneFile (A&I only)"],"ParticipantIDs": ["gale_infotracacademiconefile_A492563176","crossref_primary_10_1002_anie_201609229","pubmed_primary_27943572","wiley_primary_10_1002_anie_201609229_ANIE201609229"]}],"rollups":
        {"image": {},"reference": {},"newspaper": {}}}'
    http_version: 
  recorded_at: Fri, 17 Jan 2020 14:28:53 GMT
recorded_with: VCR 5.0.0
