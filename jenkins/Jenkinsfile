pipeline {
    agent any
    environment {
        GIT_ACCESS_TOKEN = credentials('be6a5f7e-d674-4265-bdf9-f20267b9cee3')
        JENKINS_PROJECT = "blacklight-cornell-validate-pull-request"
        STORAGE_URL = "http://digcoll.internal.library.cornell.edu:8080/fcrepo/rest"
        COLLECTIONS = "development"
        CATALOG = "http://da-prod-solr.library.cornell.edu/solr/blacklight"
        DISPLAY_SOLR_QUERY = 1
        NUM_PROCESSES = "${params.NUM_PROCESSES}"
        TEST_ID = sh(script: 'openssl rand -hex 8', returnStdout: true).trim()
    }
    parameters {
        string(name: 'NUM_PROCESSES', defaultValue: '2', description: 'Number of processes to use for parallel cucumber tests')
        string(name: 'CUCUMBER_FEATURE_TESTS', defaultValue: '', description: "Leave blank to run all tests.\nTo run a specific suite, add file argument like features/catalog_search/results_list.feature\nTo run a specific test, add line argument like features/catalog_search/results_list.feature:317")
    }
    stages {
        // use this version for normal situations
        stage("Cucumber tests") {
            steps {
                echo "The branch is ${env.GIT_BRANCH}"
                echo "Running Cucumber tests with ${params.NUM_PROCESSES} processes"
                timeout(120) {
                    wrap([$class: 'Xvfb', additionalOptions: '', assignedLabels: '', autoDisplayName: true, debug: true, displayNameOffset: 0, installationName: 'default', parallelBuild: true, screen: '1024x758x24', timeout: 25]) {
                        sh """
                            export FEATURE=${params.CUCUMBER_FEATURE_TESTS}
                            export JENKINS_WORKSPACE=${WORKSPACE}
                            export NUM_PROCESSES=${params.NUM_PROCESSES}
                            export TEST_ID=${env.TEST_ID}
                            ./jenkins/cucumber-features.sh
                        """
                    }
                }
            }
        }

        stage("Rspec tests") {
            steps {
                echo "Running Rspec tests"
                timeout(90) {
                    wrap([$class: 'Xvfb', additionalOptions: '', assignedLabels: '', autoDisplayName: true, debug: true, displayNameOffset: 0, installationName: 'default', parallelBuild: true, screen: '1024x758x24', timeout: 25]) {
                        sh """
                            export JENKINS_WORKSPACE=${WORKSPACE}
                            export TEST_ID=${env.TEST_ID}
                            ./jenkins/rspec.sh
                        """
                    }
                }
            }
        }

        stage('Publish Coverage') {
            steps {
                echo "Publishing coverage"
                sh 'mkdir -p coverage'
                sh 'chmod g+w coverage'
                sh 'echo "dummy file to prevent copy error when there are no other files" > coverage/dummy-file.txt'
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: "${WORKSPACE}/blacklight-cornell/coverage/rcov",
                    reportFiles: 'index.html',
                    reportName: 'Code Coverage Report',
                    reportTitles: 'Discovery and Access Team Code Coverage'])
            }
        }
    }
    post {
        success {
            echo "The thrill of victory"
            sh 'jenkins/report-status-to-github.sh success'
            script {
                if (BRANCH_NAME ==~ /PR-.+/) {
                    slackSend channel: "#discovery-and-access", color: "#00ff00", message: "Build Successful - ${env.JOB_NAME} ${env.BUILD_NUMBER} ${CHANGE_BRANCH} --> ${CHANGE_TARGET} (<${env.BUILD_URL}|Open>)"
                }
            }
        }
        unsuccessful {
            echo "The agony of defeat"
            sh 'jenkins/report-status-to-github.sh failure'
            script {
                if (BRANCH_NAME ==~ /PR-.+/) {
                    // slackSend channel: "#discovery-and-access", color: "#ff0000", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} ${CHANGE_BRANCH} --> ${CHANGE_TARGET} (<${env.BUILD_URL}|Open>)"
                    slackSend channel: "#discovery-and-access", color: "#ff0000", message: "Build Failed  ${CHANGE_BRANCH} --> ${CHANGE_TARGET}"
                }
            }
        }
    }
}