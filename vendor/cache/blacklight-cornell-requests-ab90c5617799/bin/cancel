#!/usr/bin/env ruby
$:.unshift (File.dirname(__FILE__) + "/../lib")
$:.unshift (File.dirname(__FILE__) + "/../lib/blacklight_cornell_requests")


class Object
  def blank?
    respond_to?(:empty?) ? empty? : !self
  end
end

class Hold 
  begin
    require 'json'
    require 'james_monkeys'
    require 'httpclient'
    require 'voyager_request'
  rescue LoadError
    require 'rubygems'
    require 'json'
    require 'james_monkeys'
    require 'httpclient'
    require 'voyager_request'
  end
  VOYAGER_REQ_HOLDS = "#{ENV['REST_URL']}/SendPatronRequestService"
  HOLDINGS_URL      = "#{ENV['HOLDINGS_URL']}"
  MYACC_URL  = "#{ENV['MY_ACCOUNT_URL']}"


  def usage(s)
    $stderr.puts(s)
    $stderr.puts("Usage: #{File.basename($0)}: [-b bibid -m mfhdid -i itemid -n netid [-r (restfull) -p [hold|recall|callslip] ...")
    exit(2)
  end
  def run()
   restfull   = false
   bibid     = ''
   mfhdid     = ''
   itemid     = ''
   libraryid     = ''
   netid     = ''
   place     = ''

   loop { case ARGV[0]
      when '-r' then  ARGV.shift; restfull = true
      when '-b' then  ARGV.shift; bibid  = ARGV.shift
      when '-m' then  ARGV.shift; mfhdid  = ARGV.shift
      when '-i' then  ARGV.shift; itemid  = ARGV.shift
      when '-n' then  ARGV.shift; netid  = ARGV.shift
      when '-p' then  ARGV.shift; place  = ARGV.shift
      when /^-/ then  usage("Unknown option: #{ARGV[0].inspect}")
      else break
   end; }
    if netid == ''
       usage("Netid required")
       exit(1);
    end
    if bibid  == ''
       usage("bibid required")
       exit(1);
    end
    was = BlacklightCornellRequests::VoyagerRequest.use_rest(restfull)
    req =  BlacklightCornellRequests::VoyagerRequest.new(bibid,{:request_url => VOYAGER_REQ_HOLDS,:holdings_url =>HOLDINGS_URL})
    req.netid = netid
    req.patron(netid)
    req.itemid = itemid
    req.mfhdid = mfhdid
    req.reqnna = '' 
    # we have to fetch the user account data to find the transaction number for this item
   req2 =  BlacklightCornellRequests::VoyagerRequest.new(@bibid,{:request_url => MYACC_URL})
   req2.netid = netid
   req2.patron(netid)
   req2.user_account
   tocancel  = req2.requests.select{|h| h[:itemid] ==  req.itemid ? true : false  }
   method = 'cancel_' + place + '_item!'
   if tocancel.empty?
     print  "No transaction for #{itemid} found to be cancelled.\n"
     false 
   else 
     req.send(method,tocancel[0][:holdrecallid])
     print  tocancel[0][:holdrecallid] + " cancelled.\n"
     true
   end 
  end
end 

  app = Hold.new();
  exit(app.run())
